import * as _21 from "./app/v1alpha1/config";
import * as _22 from "./app/v1alpha1/module";
import * as _23 from "./app/v1alpha1/query";
import * as _24 from "./auth/v1beta1/auth";
import * as _25 from "./auth/v1beta1/genesis";
import * as _26 from "./auth/v1beta1/query";
import * as _27 from "./authz/v1beta1/authz";
import * as _28 from "./authz/v1beta1/event";
import * as _29 from "./authz/v1beta1/genesis";
import * as _30 from "./authz/v1beta1/query";
import * as _31 from "./authz/v1beta1/tx";
import * as _32 from "./bank/v1beta1/authz";
import * as _33 from "./bank/v1beta1/bank";
import * as _34 from "./bank/v1beta1/genesis";
import * as _35 from "./bank/v1beta1/query";
import * as _36 from "./bank/v1beta1/tx";
import * as _37 from "./base/abci/v1beta1/abci";
import * as _38 from "./base/kv/v1beta1/kv";
import * as _39 from "./base/query/v1beta1/pagination";
import * as _40 from "./base/reflection/v1beta1/reflection";
import * as _41 from "./base/reflection/v2alpha1/reflection";
import * as _42 from "./base/snapshots/v1beta1/snapshot";
import * as _43 from "./base/store/v1beta1/commit_info";
import * as _44 from "./base/store/v1beta1/listening";
import * as _45 from "./base/tendermint/v1beta1/query";
import * as _46 from "./base/v1beta1/coin";
import * as _47 from "./capability/v1beta1/capability";
import * as _48 from "./capability/v1beta1/genesis";
import * as _49 from "./crisis/v1beta1/genesis";
import * as _50 from "./crisis/v1beta1/tx";
import * as _51 from "./crypto/ed25519/keys";
import * as _52 from "./crypto/hd/v1/hd";
import * as _53 from "./crypto/keyring/v1/record";
import * as _54 from "./crypto/multisig/keys";
import * as _55 from "./crypto/secp256k1/keys";
import * as _56 from "./crypto/secp256r1/keys";
import * as _57 from "./distribution/v1beta1/distribution";
import * as _58 from "./distribution/v1beta1/genesis";
import * as _59 from "./distribution/v1beta1/query";
import * as _60 from "./distribution/v1beta1/tx";
import * as _61 from "./evidence/v1beta1/evidence";
import * as _62 from "./evidence/v1beta1/genesis";
import * as _63 from "./evidence/v1beta1/query";
import * as _64 from "./evidence/v1beta1/tx";
import * as _65 from "./feegrant/v1beta1/feegrant";
import * as _66 from "./feegrant/v1beta1/genesis";
import * as _67 from "./feegrant/v1beta1/query";
import * as _68 from "./feegrant/v1beta1/tx";
import * as _69 from "./genutil/v1beta1/genesis";
import * as _70 from "./gov/v1/genesis";
import * as _71 from "./gov/v1/gov";
import * as _72 from "./gov/v1/query";
import * as _73 from "./gov/v1/tx";
import * as _74 from "./gov/v1beta1/genesis";
import * as _75 from "./gov/v1beta1/gov";
import * as _76 from "./gov/v1beta1/query";
import * as _77 from "./gov/v1beta1/tx";
import * as _78 from "./group/v1/events";
import * as _79 from "./group/v1/genesis";
import * as _80 from "./group/v1/query";
import * as _81 from "./group/v1/tx";
import * as _82 from "./group/v1/types";
import * as _83 from "./mint/v1beta1/genesis";
import * as _84 from "./mint/v1beta1/mint";
import * as _85 from "./mint/v1beta1/query";
import * as _87 from "./nft/v1beta1/event";
import * as _88 from "./nft/v1beta1/genesis";
import * as _89 from "./nft/v1beta1/nft";
import * as _90 from "./nft/v1beta1/query";
import * as _91 from "./nft/v1beta1/tx";
import * as _92 from "./orm/v1/orm";
import * as _93 from "./orm/v1alpha1/schema";
import * as _94 from "./params/v1beta1/params";
import * as _95 from "./params/v1beta1/query";
import * as _96 from "./slashing/v1beta1/genesis";
import * as _97 from "./slashing/v1beta1/query";
import * as _98 from "./slashing/v1beta1/slashing";
import * as _99 from "./slashing/v1beta1/tx";
import * as _100 from "./staking/v1beta1/authz";
import * as _101 from "./staking/v1beta1/genesis";
import * as _102 from "./staking/v1beta1/query";
import * as _103 from "./staking/v1beta1/staking";
import * as _104 from "./staking/v1beta1/tx";
import * as _105 from "./tx/signing/v1beta1/signing";
import * as _106 from "./tx/v1beta1/service";
import * as _107 from "./tx/v1beta1/tx";
import * as _108 from "./upgrade/v1beta1/query";
import * as _109 from "./upgrade/v1beta1/tx";
import * as _110 from "./upgrade/v1beta1/upgrade";
import * as _111 from "./vesting/v1beta1/tx";
import * as _112 from "./vesting/v1beta1/vesting";
export declare namespace cosmos {
    namespace app {
        const v1alpha1: {
            QueryConfigRequest: {
                encode(_: _23.QueryConfigRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryConfigRequest;
                fromJSON(_: any): _23.QueryConfigRequest;
                toJSON(_: _23.QueryConfigRequest): unknown;
                fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): _23.QueryConfigRequest;
            };
            QueryConfigResponse: {
                encode(message: _23.QueryConfigResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _23.QueryConfigResponse;
                fromJSON(object: any): _23.QueryConfigResponse;
                toJSON(message: _23.QueryConfigResponse): unknown;
                fromPartial<I_1 extends {
                    config?: {
                        modules?: {
                            name?: string;
                            config?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                    };
                } & {
                    config?: {
                        modules?: {
                            name?: string;
                            config?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                    } & {
                        modules?: {
                            name?: string;
                            config?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[] & ({
                            name?: string;
                            config?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        } & {
                            name?: string;
                            config?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_1["config"]["modules"][number]["config"], keyof import("../google/protobuf/any").Any>, never>;
                        } & Record<Exclude<keyof I_1["config"]["modules"][number], keyof _21.ModuleConfig>, never>)[] & Record<Exclude<keyof I_1["config"]["modules"], keyof {
                            name?: string;
                            config?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[]>, never>;
                    } & Record<Exclude<keyof I_1["config"], "modules">, never>;
                } & Record<Exclude<keyof I_1, "config">, never>>(object: I_1): _23.QueryConfigResponse;
            };
            ModuleDescriptor: {
                encode(message: _22.ModuleDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _22.ModuleDescriptor;
                fromJSON(object: any): _22.ModuleDescriptor;
                toJSON(message: _22.ModuleDescriptor): unknown;
                fromPartial<I_2 extends {
                    goImport?: string;
                    usePackage?: {
                        name?: string;
                        revision?: number;
                    }[];
                    canMigrateFrom?: {
                        module?: string;
                    }[];
                } & {
                    goImport?: string;
                    usePackage?: {
                        name?: string;
                        revision?: number;
                    }[] & ({
                        name?: string;
                        revision?: number;
                    } & {
                        name?: string;
                        revision?: number;
                    } & Record<Exclude<keyof I_2["usePackage"][number], keyof _22.PackageReference>, never>)[] & Record<Exclude<keyof I_2["usePackage"], keyof {
                        name?: string;
                        revision?: number;
                    }[]>, never>;
                    canMigrateFrom?: {
                        module?: string;
                    }[] & ({
                        module?: string;
                    } & {
                        module?: string;
                    } & Record<Exclude<keyof I_2["canMigrateFrom"][number], "module">, never>)[] & Record<Exclude<keyof I_2["canMigrateFrom"], keyof {
                        module?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_2, keyof _22.ModuleDescriptor>, never>>(object: I_2): _22.ModuleDescriptor;
            };
            PackageReference: {
                encode(message: _22.PackageReference, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _22.PackageReference;
                fromJSON(object: any): _22.PackageReference;
                toJSON(message: _22.PackageReference): unknown;
                fromPartial<I_3 extends {
                    name?: string;
                    revision?: number;
                } & {
                    name?: string;
                    revision?: number;
                } & Record<Exclude<keyof I_3, keyof _22.PackageReference>, never>>(object: I_3): _22.PackageReference;
            };
            MigrateFromInfo: {
                encode(message: _22.MigrateFromInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _22.MigrateFromInfo;
                fromJSON(object: any): _22.MigrateFromInfo;
                toJSON(message: _22.MigrateFromInfo): unknown;
                fromPartial<I_4 extends {
                    module?: string;
                } & {
                    module?: string;
                } & Record<Exclude<keyof I_4, "module">, never>>(object: I_4): _22.MigrateFromInfo;
            };
            Config: {
                encode(message: _21.Config, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _21.Config;
                fromJSON(object: any): _21.Config;
                toJSON(message: _21.Config): unknown;
                fromPartial<I_5 extends {
                    modules?: {
                        name?: string;
                        config?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                } & {
                    modules?: {
                        name?: string;
                        config?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[] & ({
                        name?: string;
                        config?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        name?: string;
                        config?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_5["modules"][number]["config"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_5["modules"][number], keyof _21.ModuleConfig>, never>)[] & Record<Exclude<keyof I_5["modules"], keyof {
                        name?: string;
                        config?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[]>, never>;
                } & Record<Exclude<keyof I_5, "modules">, never>>(object: I_5): _21.Config;
            };
            ModuleConfig: {
                encode(message: _21.ModuleConfig, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _21.ModuleConfig;
                fromJSON(object: any): _21.ModuleConfig;
                toJSON(message: _21.ModuleConfig): unknown;
                fromPartial<I_6 extends {
                    name?: string;
                    config?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    name?: string;
                    config?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_6["config"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I_6, keyof _21.ModuleConfig>, never>>(object: I_6): _21.ModuleConfig;
            };
        };
    }
    namespace auth {
        const v1beta1: {
            QueryAccountsRequest: {
                encode(message: _26.QueryAccountsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.QueryAccountsRequest;
                fromJSON(object: any): _26.QueryAccountsRequest;
                toJSON(message: _26.QueryAccountsRequest): unknown;
                fromPartial<I extends {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I, "pagination">, never>>(object: I): _26.QueryAccountsRequest;
            };
            QueryAccountsResponse: {
                encode(message: _26.QueryAccountsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.QueryAccountsResponse;
                fromJSON(object: any): _26.QueryAccountsResponse;
                toJSON(message: _26.QueryAccountsResponse): unknown;
                fromPartial<I_1 extends {
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_1["accounts"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_1["accounts"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_1["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_1, keyof _26.QueryAccountsResponse>, never>>(object: I_1): _26.QueryAccountsResponse;
            };
            QueryAccountRequest: {
                encode(message: _26.QueryAccountRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.QueryAccountRequest;
                fromJSON(object: any): _26.QueryAccountRequest;
                toJSON(message: _26.QueryAccountRequest): unknown;
                fromPartial<I_2 extends {
                    address?: string;
                } & {
                    address?: string;
                } & Record<Exclude<keyof I_2, "address">, never>>(object: I_2): _26.QueryAccountRequest;
            };
            QueryModuleAccountsRequest: {
                encode(_: _26.QueryModuleAccountsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.QueryModuleAccountsRequest;
                fromJSON(_: any): _26.QueryModuleAccountsRequest;
                toJSON(_: _26.QueryModuleAccountsRequest): unknown;
                fromPartial<I_3 extends {} & {} & Record<Exclude<keyof I_3, never>, never>>(_: I_3): _26.QueryModuleAccountsRequest;
            };
            QueryParamsResponse: {
                encode(message: _26.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.QueryParamsResponse;
                fromJSON(object: any): _26.QueryParamsResponse;
                toJSON(message: _26.QueryParamsResponse): unknown;
                fromPartial<I_4 extends {
                    params?: {
                        maxMemoCharacters?: any;
                        txSigLimit?: any;
                        txSizeCostPerByte?: any;
                        sigVerifyCostEd25519?: any;
                        sigVerifyCostSecp256k1?: any;
                    };
                } & {
                    params?: {
                        maxMemoCharacters?: any;
                        txSigLimit?: any;
                        txSizeCostPerByte?: any;
                        sigVerifyCostEd25519?: any;
                        sigVerifyCostSecp256k1?: any;
                    } & {
                        maxMemoCharacters?: any;
                        txSigLimit?: any;
                        txSizeCostPerByte?: any;
                        sigVerifyCostEd25519?: any;
                        sigVerifyCostSecp256k1?: any;
                    } & Record<Exclude<keyof I_4["params"], keyof _24.Params>, never>;
                } & Record<Exclude<keyof I_4, "params">, never>>(object: I_4): _26.QueryParamsResponse;
            };
            QueryAccountResponse: {
                encode(message: _26.QueryAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.QueryAccountResponse;
                fromJSON(object: any): _26.QueryAccountResponse;
                toJSON(message: _26.QueryAccountResponse): unknown;
                fromPartial<I_5 extends {
                    account?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    account?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_5["account"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I_5, "account">, never>>(object: I_5): _26.QueryAccountResponse;
            };
            QueryParamsRequest: {
                encode(_: _26.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.QueryParamsRequest;
                fromJSON(_: any): _26.QueryParamsRequest;
                toJSON(_: _26.QueryParamsRequest): unknown;
                fromPartial<I_6 extends {} & {} & Record<Exclude<keyof I_6, never>, never>>(_: I_6): _26.QueryParamsRequest;
            };
            QueryModuleAccountsResponse: {
                encode(message: _26.QueryModuleAccountsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.QueryModuleAccountsResponse;
                fromJSON(object: any): _26.QueryModuleAccountsResponse;
                toJSON(message: _26.QueryModuleAccountsResponse): unknown;
                fromPartial<I_7 extends {
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                } & {
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_7["accounts"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_7["accounts"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                } & Record<Exclude<keyof I_7, "accounts">, never>>(object: I_7): _26.QueryModuleAccountsResponse;
            };
            Bech32PrefixRequest: {
                encode(_: _26.Bech32PrefixRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.Bech32PrefixRequest;
                fromJSON(_: any): _26.Bech32PrefixRequest;
                toJSON(_: _26.Bech32PrefixRequest): unknown;
                fromPartial<I_8 extends {} & {} & Record<Exclude<keyof I_8, never>, never>>(_: I_8): _26.Bech32PrefixRequest;
            };
            Bech32PrefixResponse: {
                encode(message: _26.Bech32PrefixResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.Bech32PrefixResponse;
                fromJSON(object: any): _26.Bech32PrefixResponse;
                toJSON(message: _26.Bech32PrefixResponse): unknown;
                fromPartial<I_9 extends {
                    bech32Prefix?: string;
                } & {
                    bech32Prefix?: string;
                } & Record<Exclude<keyof I_9, "bech32Prefix">, never>>(object: I_9): _26.Bech32PrefixResponse;
            };
            AddressBytesToStringRequest: {
                encode(message: _26.AddressBytesToStringRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.AddressBytesToStringRequest;
                fromJSON(object: any): _26.AddressBytesToStringRequest;
                toJSON(message: _26.AddressBytesToStringRequest): unknown;
                fromPartial<I_10 extends {
                    addressBytes?: Uint8Array;
                } & {
                    addressBytes?: Uint8Array;
                } & Record<Exclude<keyof I_10, "addressBytes">, never>>(object: I_10): _26.AddressBytesToStringRequest;
            };
            AddressBytesToStringResponse: {
                encode(message: _26.AddressBytesToStringResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.AddressBytesToStringResponse;
                fromJSON(object: any): _26.AddressBytesToStringResponse;
                toJSON(message: _26.AddressBytesToStringResponse): unknown;
                fromPartial<I_11 extends {
                    addressString?: string;
                } & {
                    addressString?: string;
                } & Record<Exclude<keyof I_11, "addressString">, never>>(object: I_11): _26.AddressBytesToStringResponse;
            };
            AddressStringToBytesRequest: {
                encode(message: _26.AddressStringToBytesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.AddressStringToBytesRequest;
                fromJSON(object: any): _26.AddressStringToBytesRequest;
                toJSON(message: _26.AddressStringToBytesRequest): unknown;
                fromPartial<I_12 extends {
                    addressString?: string;
                } & {
                    addressString?: string;
                } & Record<Exclude<keyof I_12, "addressString">, never>>(object: I_12): _26.AddressStringToBytesRequest;
            };
            AddressStringToBytesResponse: {
                encode(message: _26.AddressStringToBytesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _26.AddressStringToBytesResponse;
                fromJSON(object: any): _26.AddressStringToBytesResponse;
                toJSON(message: _26.AddressStringToBytesResponse): unknown;
                fromPartial<I_13 extends {
                    addressBytes?: Uint8Array;
                } & {
                    addressBytes?: Uint8Array;
                } & Record<Exclude<keyof I_13, "addressBytes">, never>>(object: I_13): _26.AddressStringToBytesResponse;
            };
            GenesisState: {
                encode(message: _25.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _25.GenesisState;
                fromJSON(object: any): _25.GenesisState;
                toJSON(message: _25.GenesisState): unknown;
                fromPartial<I_14 extends {
                    params?: {
                        maxMemoCharacters?: any;
                        txSigLimit?: any;
                        txSizeCostPerByte?: any;
                        sigVerifyCostEd25519?: any;
                        sigVerifyCostSecp256k1?: any;
                    };
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                } & {
                    params?: {
                        maxMemoCharacters?: any;
                        txSigLimit?: any;
                        txSizeCostPerByte?: any;
                        sigVerifyCostEd25519?: any;
                        sigVerifyCostSecp256k1?: any;
                    } & {
                        maxMemoCharacters?: any;
                        txSigLimit?: any;
                        txSizeCostPerByte?: any;
                        sigVerifyCostEd25519?: any;
                        sigVerifyCostSecp256k1?: any;
                    } & Record<Exclude<keyof I_14["params"], keyof _24.Params>, never>;
                    accounts?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_14["accounts"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_14["accounts"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                } & Record<Exclude<keyof I_14, keyof _25.GenesisState>, never>>(object: I_14): _25.GenesisState;
            };
            BaseAccount: {
                encode(message: _24.BaseAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.BaseAccount;
                fromJSON(object: any): _24.BaseAccount;
                toJSON(message: _24.BaseAccount): unknown;
                fromPartial<I_15 extends {
                    address?: string;
                    pubKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    accountNumber?: any;
                    sequence?: any;
                } & {
                    address?: string;
                    pubKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_15["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                    accountNumber?: any;
                    sequence?: any;
                } & Record<Exclude<keyof I_15, keyof _24.BaseAccount>, never>>(object: I_15): _24.BaseAccount;
            };
            ModuleAccount: {
                encode(message: _24.ModuleAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.ModuleAccount;
                fromJSON(object: any): _24.ModuleAccount;
                toJSON(message: _24.ModuleAccount): unknown;
                fromPartial<I_16 extends {
                    baseAccount?: {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        accountNumber?: any;
                        sequence?: any;
                    };
                    name?: string;
                    permissions?: string[];
                } & {
                    baseAccount?: {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        accountNumber?: any;
                        sequence?: any;
                    } & {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_16["baseAccount"]["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                        accountNumber?: any;
                        sequence?: any;
                    } & Record<Exclude<keyof I_16["baseAccount"], keyof _24.BaseAccount>, never>;
                    name?: string;
                    permissions?: string[] & string[] & Record<Exclude<keyof I_16["permissions"], keyof string[]>, never>;
                } & Record<Exclude<keyof I_16, keyof _24.ModuleAccount>, never>>(object: I_16): _24.ModuleAccount;
            };
            Params: {
                encode(message: _24.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _24.Params;
                fromJSON(object: any): _24.Params;
                toJSON(message: _24.Params): unknown;
                fromPartial<I_17 extends {
                    maxMemoCharacters?: any;
                    txSigLimit?: any;
                    txSizeCostPerByte?: any;
                    sigVerifyCostEd25519?: any;
                    sigVerifyCostSecp256k1?: any;
                } & {
                    maxMemoCharacters?: any;
                    txSigLimit?: any;
                    txSizeCostPerByte?: any;
                    sigVerifyCostEd25519?: any;
                    sigVerifyCostSecp256k1?: any;
                } & Record<Exclude<keyof I_17, keyof _24.Params>, never>>(object: I_17): _24.Params;
            };
        };
    }
    namespace authz {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    grant(value: _31.MsgGrant): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    exec(value: _31.MsgExec): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    revoke(value: _31.MsgRevoke): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    grant(value: _31.MsgGrant): {
                        typeUrl: string;
                        value: _31.MsgGrant;
                    };
                    exec(value: _31.MsgExec): {
                        typeUrl: string;
                        value: _31.MsgExec;
                    };
                    revoke(value: _31.MsgRevoke): {
                        typeUrl: string;
                        value: _31.MsgRevoke;
                    };
                };
                toJSON: {
                    grant(value: _31.MsgGrant): {
                        typeUrl: string;
                        value: unknown;
                    };
                    exec(value: _31.MsgExec): {
                        typeUrl: string;
                        value: unknown;
                    };
                    revoke(value: _31.MsgRevoke): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    grant(value: any): {
                        typeUrl: string;
                        value: _31.MsgGrant;
                    };
                    exec(value: any): {
                        typeUrl: string;
                        value: _31.MsgExec;
                    };
                    revoke(value: any): {
                        typeUrl: string;
                        value: _31.MsgRevoke;
                    };
                };
                fromPartial: {
                    grant(value: _31.MsgGrant): {
                        typeUrl: string;
                        value: _31.MsgGrant;
                    };
                    exec(value: _31.MsgExec): {
                        typeUrl: string;
                        value: _31.MsgExec;
                    };
                    revoke(value: _31.MsgRevoke): {
                        typeUrl: string;
                        value: _31.MsgRevoke;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.authz.v1beta1.MsgGrant": {
                    aminoType: string;
                    toAmino: ({ granter, grantee, grant }: _31.MsgGrant) => {
                        granter: string;
                        grantee: string;
                        grant: {
                            authorization: {
                                type_url: string;
                                value: Uint8Array;
                            };
                            expiration: {
                                seconds: string;
                                nanos: number;
                            };
                        };
                    };
                    fromAmino: ({ granter, grantee, grant }: {
                        granter: string;
                        grantee: string;
                        grant: {
                            authorization: {
                                type_url: string;
                                value: Uint8Array;
                            };
                            expiration: {
                                seconds: string;
                                nanos: number;
                            };
                        };
                    }) => _31.MsgGrant;
                };
                "/cosmos.authz.v1beta1.MsgExec": {
                    aminoType: string;
                    toAmino: ({ grantee, msgs }: _31.MsgExec) => {
                        grantee: string;
                        msgs: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                    };
                    fromAmino: ({ grantee, msgs }: {
                        grantee: string;
                        msgs: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                    }) => _31.MsgExec;
                };
                "/cosmos.authz.v1beta1.MsgRevoke": {
                    aminoType: string;
                    toAmino: ({ granter, grantee, msgTypeUrl }: _31.MsgRevoke) => {
                        granter: string;
                        grantee: string;
                        msg_type_url: string;
                    };
                    fromAmino: ({ granter, grantee, msg_type_url }: {
                        granter: string;
                        grantee: string;
                        msg_type_url: string;
                    }) => _31.MsgRevoke;
                };
            };
            MsgGrant: {
                encode(message: _31.MsgGrant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _31.MsgGrant;
                fromJSON(object: any): _31.MsgGrant;
                toJSON(message: _31.MsgGrant): unknown;
                fromPartial<I extends {
                    granter?: string;
                    grantee?: string;
                    grant?: {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    };
                } & {
                    granter?: string;
                    grantee?: string;
                    grant?: {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    } & {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["grant"]["authorization"], keyof import("../google/protobuf/any").Any>, never>;
                        expiration?: Date;
                    } & Record<Exclude<keyof I["grant"], keyof _27.Grant>, never>;
                } & Record<Exclude<keyof I, keyof _31.MsgGrant>, never>>(object: I): _31.MsgGrant;
            };
            MsgExecResponse: {
                encode(message: _31.MsgExecResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _31.MsgExecResponse;
                fromJSON(object: any): _31.MsgExecResponse;
                toJSON(message: _31.MsgExecResponse): unknown;
                fromPartial<I_1 extends {
                    results?: Uint8Array[];
                } & {
                    results?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_1["results"], keyof Uint8Array[]>, never>;
                } & Record<Exclude<keyof I_1, "results">, never>>(object: I_1): _31.MsgExecResponse;
            };
            MsgExec: {
                encode(message: _31.MsgExec, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _31.MsgExec;
                fromJSON(object: any): _31.MsgExec;
                toJSON(message: _31.MsgExec): unknown;
                fromPartial<I_2 extends {
                    grantee?: string;
                    msgs?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                } & {
                    grantee?: string;
                    msgs?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_2["msgs"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_2["msgs"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                } & Record<Exclude<keyof I_2, keyof _31.MsgExec>, never>>(object: I_2): _31.MsgExec;
            };
            MsgGrantResponse: {
                encode(_: _31.MsgGrantResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _31.MsgGrantResponse;
                fromJSON(_: any): _31.MsgGrantResponse;
                toJSON(_: _31.MsgGrantResponse): unknown;
                fromPartial<I_3 extends {} & {} & Record<Exclude<keyof I_3, never>, never>>(_: I_3): _31.MsgGrantResponse;
            };
            MsgRevoke: {
                encode(message: _31.MsgRevoke, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _31.MsgRevoke;
                fromJSON(object: any): _31.MsgRevoke;
                toJSON(message: _31.MsgRevoke): unknown;
                fromPartial<I_4 extends {
                    granter?: string;
                    grantee?: string;
                    msgTypeUrl?: string;
                } & {
                    granter?: string;
                    grantee?: string;
                    msgTypeUrl?: string;
                } & Record<Exclude<keyof I_4, keyof _31.MsgRevoke>, never>>(object: I_4): _31.MsgRevoke;
            };
            MsgRevokeResponse: {
                encode(_: _31.MsgRevokeResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _31.MsgRevokeResponse;
                fromJSON(_: any): _31.MsgRevokeResponse;
                toJSON(_: _31.MsgRevokeResponse): unknown;
                fromPartial<I_5 extends {} & {} & Record<Exclude<keyof I_5, never>, never>>(_: I_5): _31.MsgRevokeResponse;
            };
            QueryGrantsRequest: {
                encode(message: _30.QueryGrantsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.QueryGrantsRequest;
                fromJSON(object: any): _30.QueryGrantsRequest;
                toJSON(message: _30.QueryGrantsRequest): unknown;
                fromPartial<I_6 extends {
                    granter?: string;
                    grantee?: string;
                    msgTypeUrl?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    granter?: string;
                    grantee?: string;
                    msgTypeUrl?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_6["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_6, keyof _30.QueryGrantsRequest>, never>>(object: I_6): _30.QueryGrantsRequest;
            };
            QueryGrantsResponse: {
                encode(message: _30.QueryGrantsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.QueryGrantsResponse;
                fromJSON(object: any): _30.QueryGrantsResponse;
                toJSON(message: _30.QueryGrantsResponse): unknown;
                fromPartial<I_7 extends {
                    grants?: {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    grants?: {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[] & ({
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    } & {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_7["grants"][number]["authorization"], keyof import("../google/protobuf/any").Any>, never>;
                        expiration?: Date;
                    } & Record<Exclude<keyof I_7["grants"][number], keyof _27.Grant>, never>)[] & Record<Exclude<keyof I_7["grants"], keyof {
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_7["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_7, keyof _30.QueryGrantsResponse>, never>>(object: I_7): _30.QueryGrantsResponse;
            };
            QueryGranterGrantsRequest: {
                encode(message: _30.QueryGranterGrantsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.QueryGranterGrantsRequest;
                fromJSON(object: any): _30.QueryGranterGrantsRequest;
                toJSON(message: _30.QueryGranterGrantsRequest): unknown;
                fromPartial<I_8 extends {
                    granter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    granter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_8["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_8, keyof _30.QueryGranterGrantsRequest>, never>>(object: I_8): _30.QueryGranterGrantsRequest;
            };
            QueryGranterGrantsResponse: {
                encode(message: _30.QueryGranterGrantsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.QueryGranterGrantsResponse;
                fromJSON(object: any): _30.QueryGranterGrantsResponse;
                toJSON(message: _30.QueryGranterGrantsResponse): unknown;
                fromPartial<I_9 extends {
                    grants?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    grants?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[] & ({
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    } & {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_9["grants"][number]["authorization"], keyof import("../google/protobuf/any").Any>, never>;
                        expiration?: Date;
                    } & Record<Exclude<keyof I_9["grants"][number], keyof _27.GrantAuthorization>, never>)[] & Record<Exclude<keyof I_9["grants"], keyof {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_9["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_9, keyof _30.QueryGranterGrantsResponse>, never>>(object: I_9): _30.QueryGranterGrantsResponse;
            };
            QueryGranteeGrantsRequest: {
                encode(message: _30.QueryGranteeGrantsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.QueryGranteeGrantsRequest;
                fromJSON(object: any): _30.QueryGranteeGrantsRequest;
                toJSON(message: _30.QueryGranteeGrantsRequest): unknown;
                fromPartial<I_10 extends {
                    grantee?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    grantee?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_10["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_10, keyof _30.QueryGranteeGrantsRequest>, never>>(object: I_10): _30.QueryGranteeGrantsRequest;
            };
            QueryGranteeGrantsResponse: {
                encode(message: _30.QueryGranteeGrantsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _30.QueryGranteeGrantsResponse;
                fromJSON(object: any): _30.QueryGranteeGrantsResponse;
                toJSON(message: _30.QueryGranteeGrantsResponse): unknown;
                fromPartial<I_11 extends {
                    grants?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    grants?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[] & ({
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    } & {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_11["grants"][number]["authorization"], keyof import("../google/protobuf/any").Any>, never>;
                        expiration?: Date;
                    } & Record<Exclude<keyof I_11["grants"][number], keyof _27.GrantAuthorization>, never>)[] & Record<Exclude<keyof I_11["grants"], keyof {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_11["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_11, keyof _30.QueryGranteeGrantsResponse>, never>>(object: I_11): _30.QueryGranteeGrantsResponse;
            };
            GenesisState: {
                encode(message: _29.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _29.GenesisState;
                fromJSON(object: any): _29.GenesisState;
                toJSON(message: _29.GenesisState): unknown;
                fromPartial<I_12 extends {
                    authorization?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[];
                } & {
                    authorization?: {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[] & ({
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    } & {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_12["authorization"][number]["authorization"], keyof import("../google/protobuf/any").Any>, never>;
                        expiration?: Date;
                    } & Record<Exclude<keyof I_12["authorization"][number], keyof _27.GrantAuthorization>, never>)[] & Record<Exclude<keyof I_12["authorization"], keyof {
                        granter?: string;
                        grantee?: string;
                        authorization?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        expiration?: Date;
                    }[]>, never>;
                } & Record<Exclude<keyof I_12, "authorization">, never>>(object: I_12): _29.GenesisState;
            };
            EventGrant: {
                encode(message: _28.EventGrant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _28.EventGrant;
                fromJSON(object: any): _28.EventGrant;
                toJSON(message: _28.EventGrant): unknown;
                fromPartial<I_13 extends {
                    msgTypeUrl?: string;
                    granter?: string;
                    grantee?: string;
                } & {
                    msgTypeUrl?: string;
                    granter?: string;
                    grantee?: string;
                } & Record<Exclude<keyof I_13, keyof _28.EventGrant>, never>>(object: I_13): _28.EventGrant;
            };
            EventRevoke: {
                encode(message: _28.EventRevoke, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _28.EventRevoke;
                fromJSON(object: any): _28.EventRevoke;
                toJSON(message: _28.EventRevoke): unknown;
                fromPartial<I_14 extends {
                    msgTypeUrl?: string;
                    granter?: string;
                    grantee?: string;
                } & {
                    msgTypeUrl?: string;
                    granter?: string;
                    grantee?: string;
                } & Record<Exclude<keyof I_14, keyof _28.EventRevoke>, never>>(object: I_14): _28.EventRevoke;
            };
            GenericAuthorization: {
                encode(message: _27.GenericAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _27.GenericAuthorization;
                fromJSON(object: any): _27.GenericAuthorization;
                toJSON(message: _27.GenericAuthorization): unknown;
                fromPartial<I_15 extends {
                    msg?: string;
                } & {
                    msg?: string;
                } & Record<Exclude<keyof I_15, "msg">, never>>(object: I_15): _27.GenericAuthorization;
            };
            Grant: {
                encode(message: _27.Grant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _27.Grant;
                fromJSON(object: any): _27.Grant;
                toJSON(message: _27.Grant): unknown;
                fromPartial<I_16 extends {
                    authorization?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    expiration?: Date;
                } & {
                    authorization?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_16["authorization"], keyof import("../google/protobuf/any").Any>, never>;
                    expiration?: Date;
                } & Record<Exclude<keyof I_16, keyof _27.Grant>, never>>(object: I_16): _27.Grant;
            };
            GrantAuthorization: {
                encode(message: _27.GrantAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _27.GrantAuthorization;
                fromJSON(object: any): _27.GrantAuthorization;
                toJSON(message: _27.GrantAuthorization): unknown;
                fromPartial<I_17 extends {
                    granter?: string;
                    grantee?: string;
                    authorization?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    expiration?: Date;
                } & {
                    granter?: string;
                    grantee?: string;
                    authorization?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_17["authorization"], keyof import("../google/protobuf/any").Any>, never>;
                    expiration?: Date;
                } & Record<Exclude<keyof I_17, keyof _27.GrantAuthorization>, never>>(object: I_17): _27.GrantAuthorization;
            };
            GrantQueueItem: {
                encode(message: _27.GrantQueueItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _27.GrantQueueItem;
                fromJSON(object: any): _27.GrantQueueItem;
                toJSON(message: _27.GrantQueueItem): unknown;
                fromPartial<I_18 extends {
                    msgTypeUrls?: string[];
                } & {
                    msgTypeUrls?: string[] & string[] & Record<Exclude<keyof I_18["msgTypeUrls"], keyof string[]>, never>;
                } & Record<Exclude<keyof I_18, "msgTypeUrls">, never>>(object: I_18): _27.GrantQueueItem;
            };
        };
    }
    namespace bank {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    send(value: _36.MsgSend): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    multiSend(value: _36.MsgMultiSend): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    send(value: _36.MsgSend): {
                        typeUrl: string;
                        value: _36.MsgSend;
                    };
                    multiSend(value: _36.MsgMultiSend): {
                        typeUrl: string;
                        value: _36.MsgMultiSend;
                    };
                };
                toJSON: {
                    send(value: _36.MsgSend): {
                        typeUrl: string;
                        value: unknown;
                    };
                    multiSend(value: _36.MsgMultiSend): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    send(value: any): {
                        typeUrl: string;
                        value: _36.MsgSend;
                    };
                    multiSend(value: any): {
                        typeUrl: string;
                        value: _36.MsgMultiSend;
                    };
                };
                fromPartial: {
                    send(value: _36.MsgSend): {
                        typeUrl: string;
                        value: _36.MsgSend;
                    };
                    multiSend(value: _36.MsgMultiSend): {
                        typeUrl: string;
                        value: _36.MsgMultiSend;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.bank.v1beta1.MsgSend": {
                    aminoType: string;
                    toAmino: ({ fromAddress, toAddress, amount }: _36.MsgSend) => {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    };
                    fromAmino: ({ from_address, to_address, amount }: {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    }) => _36.MsgSend;
                };
                "/cosmos.bank.v1beta1.MsgMultiSend": {
                    aminoType: string;
                    toAmino: ({ inputs, outputs }: _36.MsgMultiSend) => {
                        inputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                        outputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                    };
                    fromAmino: ({ inputs, outputs }: {
                        inputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                        outputs: {
                            address: string;
                            coins: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                    }) => _36.MsgMultiSend;
                };
            };
            MsgSend: {
                encode(message: _36.MsgSend, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _36.MsgSend;
                fromJSON(object: any): _36.MsgSend;
                toJSON(message: _36.MsgSend): unknown;
                fromPartial<I extends {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I, keyof _36.MsgSend>, never>>(object: I): _36.MsgSend;
            };
            MsgSendResponse: {
                encode(_: _36.MsgSendResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _36.MsgSendResponse;
                fromJSON(_: any): _36.MsgSendResponse;
                toJSON(_: _36.MsgSendResponse): unknown;
                fromPartial<I_1 extends {} & {} & Record<Exclude<keyof I_1, never>, never>>(_: I_1): _36.MsgSendResponse;
            };
            MsgMultiSend: {
                encode(message: _36.MsgMultiSend, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _36.MsgMultiSend;
                fromJSON(object: any): _36.MsgMultiSend;
                toJSON(message: _36.MsgMultiSend): unknown;
                fromPartial<I_2 extends {
                    inputs?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    outputs?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                } & {
                    inputs?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_2["inputs"][number]["coins"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_2["inputs"][number]["coins"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_2["inputs"][number], keyof _33.Input>, never>)[] & Record<Exclude<keyof I_2["inputs"], keyof {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                    outputs?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_2["outputs"][number]["coins"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_2["outputs"][number]["coins"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_2["outputs"][number], keyof _33.Output>, never>)[] & Record<Exclude<keyof I_2["outputs"], keyof {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                } & Record<Exclude<keyof I_2, keyof _36.MsgMultiSend>, never>>(object: I_2): _36.MsgMultiSend;
            };
            MsgMultiSendResponse: {
                encode(_: _36.MsgMultiSendResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _36.MsgMultiSendResponse;
                fromJSON(_: any): _36.MsgMultiSendResponse;
                toJSON(_: _36.MsgMultiSendResponse): unknown;
                fromPartial<I_3 extends {} & {} & Record<Exclude<keyof I_3, never>, never>>(_: I_3): _36.MsgMultiSendResponse;
            };
            QueryBalanceRequest: {
                encode(message: _35.QueryBalanceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryBalanceRequest;
                fromJSON(object: any): _35.QueryBalanceRequest;
                toJSON(message: _35.QueryBalanceRequest): unknown;
                fromPartial<I_4 extends {
                    address?: string;
                    denom?: string;
                } & {
                    address?: string;
                    denom?: string;
                } & Record<Exclude<keyof I_4, keyof _35.QueryBalanceRequest>, never>>(object: I_4): _35.QueryBalanceRequest;
            };
            QueryBalanceResponse: {
                encode(message: _35.QueryBalanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryBalanceResponse;
                fromJSON(object: any): _35.QueryBalanceResponse;
                toJSON(message: _35.QueryBalanceResponse): unknown;
                fromPartial<I_5 extends {
                    balance?: {
                        denom?: string;
                        amount?: string;
                    };
                } & {
                    balance?: {
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_5["balance"], keyof _46.Coin>, never>;
                } & Record<Exclude<keyof I_5, "balance">, never>>(object: I_5): _35.QueryBalanceResponse;
            };
            QueryAllBalancesRequest: {
                encode(message: _35.QueryAllBalancesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryAllBalancesRequest;
                fromJSON(object: any): _35.QueryAllBalancesRequest;
                toJSON(message: _35.QueryAllBalancesRequest): unknown;
                fromPartial<I_6 extends {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_6["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_6, keyof _35.QueryAllBalancesRequest>, never>>(object: I_6): _35.QueryAllBalancesRequest;
            };
            QueryAllBalancesResponse: {
                encode(message: _35.QueryAllBalancesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryAllBalancesResponse;
                fromJSON(object: any): _35.QueryAllBalancesResponse;
                toJSON(message: _35.QueryAllBalancesResponse): unknown;
                fromPartial<I_7 extends {
                    balances?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    balances?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_7["balances"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_7["balances"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_7["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_7, keyof _35.QueryAllBalancesResponse>, never>>(object: I_7): _35.QueryAllBalancesResponse;
            };
            QuerySpendableBalancesRequest: {
                encode(message: _35.QuerySpendableBalancesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QuerySpendableBalancesRequest;
                fromJSON(object: any): _35.QuerySpendableBalancesRequest;
                toJSON(message: _35.QuerySpendableBalancesRequest): unknown;
                fromPartial<I_8 extends {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_8["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_8, keyof _35.QuerySpendableBalancesRequest>, never>>(object: I_8): _35.QuerySpendableBalancesRequest;
            };
            QuerySpendableBalancesResponse: {
                encode(message: _35.QuerySpendableBalancesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QuerySpendableBalancesResponse;
                fromJSON(object: any): _35.QuerySpendableBalancesResponse;
                toJSON(message: _35.QuerySpendableBalancesResponse): unknown;
                fromPartial<I_9 extends {
                    balances?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    balances?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_9["balances"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_9["balances"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_9["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_9, keyof _35.QuerySpendableBalancesResponse>, never>>(object: I_9): _35.QuerySpendableBalancesResponse;
            };
            QueryTotalSupplyRequest: {
                encode(message: _35.QueryTotalSupplyRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryTotalSupplyRequest;
                fromJSON(object: any): _35.QueryTotalSupplyRequest;
                toJSON(message: _35.QueryTotalSupplyRequest): unknown;
                fromPartial<I_10 extends {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_10["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_10, "pagination">, never>>(object: I_10): _35.QueryTotalSupplyRequest;
            };
            QueryTotalSupplyResponse: {
                encode(message: _35.QueryTotalSupplyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryTotalSupplyResponse;
                fromJSON(object: any): _35.QueryTotalSupplyResponse;
                toJSON(message: _35.QueryTotalSupplyResponse): unknown;
                fromPartial<I_11 extends {
                    supply?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    supply?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_11["supply"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_11["supply"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_11["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_11, keyof _35.QueryTotalSupplyResponse>, never>>(object: I_11): _35.QueryTotalSupplyResponse;
            };
            QuerySupplyOfRequest: {
                encode(message: _35.QuerySupplyOfRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QuerySupplyOfRequest;
                fromJSON(object: any): _35.QuerySupplyOfRequest;
                toJSON(message: _35.QuerySupplyOfRequest): unknown;
                fromPartial<I_12 extends {
                    denom?: string;
                } & {
                    denom?: string;
                } & Record<Exclude<keyof I_12, "denom">, never>>(object: I_12): _35.QuerySupplyOfRequest;
            };
            QuerySupplyOfResponse: {
                encode(message: _35.QuerySupplyOfResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QuerySupplyOfResponse;
                fromJSON(object: any): _35.QuerySupplyOfResponse;
                toJSON(message: _35.QuerySupplyOfResponse): unknown;
                fromPartial<I_13 extends {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                } & {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_13["amount"], keyof _46.Coin>, never>;
                } & Record<Exclude<keyof I_13, "amount">, never>>(object: I_13): _35.QuerySupplyOfResponse;
            };
            QueryParamsRequest: {
                encode(_: _35.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryParamsRequest;
                fromJSON(_: any): _35.QueryParamsRequest;
                toJSON(_: _35.QueryParamsRequest): unknown;
                fromPartial<I_14 extends {} & {} & Record<Exclude<keyof I_14, never>, never>>(_: I_14): _35.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _35.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryParamsResponse;
                fromJSON(object: any): _35.QueryParamsResponse;
                toJSON(message: _35.QueryParamsResponse): unknown;
                fromPartial<I_15 extends {
                    params?: {
                        sendEnabled?: {
                            denom?: string;
                            enabled?: boolean;
                        }[];
                        defaultSendEnabled?: boolean;
                    };
                } & {
                    params?: {
                        sendEnabled?: {
                            denom?: string;
                            enabled?: boolean;
                        }[];
                        defaultSendEnabled?: boolean;
                    } & {
                        sendEnabled?: {
                            denom?: string;
                            enabled?: boolean;
                        }[] & ({
                            denom?: string;
                            enabled?: boolean;
                        } & {
                            denom?: string;
                            enabled?: boolean;
                        } & Record<Exclude<keyof I_15["params"]["sendEnabled"][number], keyof _33.SendEnabled>, never>)[] & Record<Exclude<keyof I_15["params"]["sendEnabled"], keyof {
                            denom?: string;
                            enabled?: boolean;
                        }[]>, never>;
                        defaultSendEnabled?: boolean;
                    } & Record<Exclude<keyof I_15["params"], keyof _33.Params>, never>;
                } & Record<Exclude<keyof I_15, "params">, never>>(object: I_15): _35.QueryParamsResponse;
            };
            QueryDenomsMetadataRequest: {
                encode(message: _35.QueryDenomsMetadataRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryDenomsMetadataRequest;
                fromJSON(object: any): _35.QueryDenomsMetadataRequest;
                toJSON(message: _35.QueryDenomsMetadataRequest): unknown;
                fromPartial<I_16 extends {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_16["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_16, "pagination">, never>>(object: I_16): _35.QueryDenomsMetadataRequest;
            };
            QueryDenomsMetadataResponse: {
                encode(message: _35.QueryDenomsMetadataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryDenomsMetadataResponse;
                fromJSON(object: any): _35.QueryDenomsMetadataResponse;
                toJSON(message: _35.QueryDenomsMetadataResponse): unknown;
                fromPartial<I_17 extends {
                    metadatas?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    metadatas?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    }[] & ({
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    } & {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[] & ({
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        } & {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[] & string[] & Record<Exclude<keyof I_17["metadatas"][number]["denomUnits"][number]["aliases"], keyof string[]>, never>;
                        } & Record<Exclude<keyof I_17["metadatas"][number]["denomUnits"][number], keyof _33.DenomUnit>, never>)[] & Record<Exclude<keyof I_17["metadatas"][number]["denomUnits"], keyof {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[]>, never>;
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    } & Record<Exclude<keyof I_17["metadatas"][number], keyof _33.Metadata>, never>)[] & Record<Exclude<keyof I_17["metadatas"], keyof {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_17["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_17, keyof _35.QueryDenomsMetadataResponse>, never>>(object: I_17): _35.QueryDenomsMetadataResponse;
            };
            QueryDenomMetadataRequest: {
                encode(message: _35.QueryDenomMetadataRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryDenomMetadataRequest;
                fromJSON(object: any): _35.QueryDenomMetadataRequest;
                toJSON(message: _35.QueryDenomMetadataRequest): unknown;
                fromPartial<I_18 extends {
                    denom?: string;
                } & {
                    denom?: string;
                } & Record<Exclude<keyof I_18, "denom">, never>>(object: I_18): _35.QueryDenomMetadataRequest;
            };
            QueryDenomMetadataResponse: {
                encode(message: _35.QueryDenomMetadataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryDenomMetadataResponse;
                fromJSON(object: any): _35.QueryDenomMetadataResponse;
                toJSON(message: _35.QueryDenomMetadataResponse): unknown;
                fromPartial<I_19 extends {
                    metadata?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    };
                } & {
                    metadata?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    } & {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[] & ({
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        } & {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[] & string[] & Record<Exclude<keyof I_19["metadata"]["denomUnits"][number]["aliases"], keyof string[]>, never>;
                        } & Record<Exclude<keyof I_19["metadata"]["denomUnits"][number], keyof _33.DenomUnit>, never>)[] & Record<Exclude<keyof I_19["metadata"]["denomUnits"], keyof {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[]>, never>;
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    } & Record<Exclude<keyof I_19["metadata"], keyof _33.Metadata>, never>;
                } & Record<Exclude<keyof I_19, "metadata">, never>>(object: I_19): _35.QueryDenomMetadataResponse;
            };
            QueryDenomOwnersRequest: {
                encode(message: _35.QueryDenomOwnersRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryDenomOwnersRequest;
                fromJSON(object: any): _35.QueryDenomOwnersRequest;
                toJSON(message: _35.QueryDenomOwnersRequest): unknown;
                fromPartial<I_20 extends {
                    denom?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    denom?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_20["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_20, keyof _35.QueryDenomOwnersRequest>, never>>(object: I_20): _35.QueryDenomOwnersRequest;
            };
            DenomOwner: {
                encode(message: _35.DenomOwner, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.DenomOwner;
                fromJSON(object: any): _35.DenomOwner;
                toJSON(message: _35.DenomOwner): unknown;
                fromPartial<I_21 extends {
                    address?: string;
                    balance?: {
                        denom?: string;
                        amount?: string;
                    };
                } & {
                    address?: string;
                    balance?: {
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_21["balance"], keyof _46.Coin>, never>;
                } & Record<Exclude<keyof I_21, keyof _35.DenomOwner>, never>>(object: I_21): _35.DenomOwner;
            };
            QueryDenomOwnersResponse: {
                encode(message: _35.QueryDenomOwnersResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _35.QueryDenomOwnersResponse;
                fromJSON(object: any): _35.QueryDenomOwnersResponse;
                toJSON(message: _35.QueryDenomOwnersResponse): unknown;
                fromPartial<I_22 extends {
                    denomOwners?: {
                        address?: string;
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    denomOwners?: {
                        address?: string;
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[] & ({
                        address?: string;
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    } & {
                        address?: string;
                        balance?: {
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_22["denomOwners"][number]["balance"], keyof _46.Coin>, never>;
                    } & Record<Exclude<keyof I_22["denomOwners"][number], keyof _35.DenomOwner>, never>)[] & Record<Exclude<keyof I_22["denomOwners"], keyof {
                        address?: string;
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_22["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_22, keyof _35.QueryDenomOwnersResponse>, never>>(object: I_22): _35.QueryDenomOwnersResponse;
            };
            GenesisState: {
                encode(message: _34.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.GenesisState;
                fromJSON(object: any): _34.GenesisState;
                toJSON(message: _34.GenesisState): unknown;
                fromPartial<I_23 extends {
                    params?: {
                        sendEnabled?: {
                            denom?: string;
                            enabled?: boolean;
                        }[];
                        defaultSendEnabled?: boolean;
                    };
                    balances?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    supply?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    denomMetadata?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    }[];
                } & {
                    params?: {
                        sendEnabled?: {
                            denom?: string;
                            enabled?: boolean;
                        }[];
                        defaultSendEnabled?: boolean;
                    } & {
                        sendEnabled?: {
                            denom?: string;
                            enabled?: boolean;
                        }[] & ({
                            denom?: string;
                            enabled?: boolean;
                        } & {
                            denom?: string;
                            enabled?: boolean;
                        } & Record<Exclude<keyof I_23["params"]["sendEnabled"][number], keyof _33.SendEnabled>, never>)[] & Record<Exclude<keyof I_23["params"]["sendEnabled"], keyof {
                            denom?: string;
                            enabled?: boolean;
                        }[]>, never>;
                        defaultSendEnabled?: boolean;
                    } & Record<Exclude<keyof I_23["params"], keyof _33.Params>, never>;
                    balances?: {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_23["balances"][number]["coins"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_23["balances"][number]["coins"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_23["balances"][number], keyof _34.Balance>, never>)[] & Record<Exclude<keyof I_23["balances"], keyof {
                        address?: string;
                        coins?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                    supply?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_23["supply"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_23["supply"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    denomMetadata?: {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    }[] & ({
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    } & {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[] & ({
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        } & {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[] & string[] & Record<Exclude<keyof I_23["denomMetadata"][number]["denomUnits"][number]["aliases"], keyof string[]>, never>;
                        } & Record<Exclude<keyof I_23["denomMetadata"][number]["denomUnits"][number], keyof _33.DenomUnit>, never>)[] & Record<Exclude<keyof I_23["denomMetadata"][number]["denomUnits"], keyof {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[]>, never>;
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    } & Record<Exclude<keyof I_23["denomMetadata"][number], keyof _33.Metadata>, never>)[] & Record<Exclude<keyof I_23["denomMetadata"], keyof {
                        description?: string;
                        denomUnits?: {
                            denom?: string;
                            exponent?: number;
                            aliases?: string[];
                        }[];
                        base?: string;
                        display?: string;
                        name?: string;
                        symbol?: string;
                        uri?: string;
                        uriHash?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_23, keyof _34.GenesisState>, never>>(object: I_23): _34.GenesisState;
            };
            Balance: {
                encode(message: _34.Balance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _34.Balance;
                fromJSON(object: any): _34.Balance;
                toJSON(message: _34.Balance): unknown;
                fromPartial<I_24 extends {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_24["coins"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_24["coins"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_24, keyof _34.Balance>, never>>(object: I_24): _34.Balance;
            };
            Params: {
                encode(message: _33.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _33.Params;
                fromJSON(object: any): _33.Params;
                toJSON(message: _33.Params): unknown;
                fromPartial<I_25 extends {
                    sendEnabled?: {
                        denom?: string;
                        enabled?: boolean;
                    }[];
                    defaultSendEnabled?: boolean;
                } & {
                    sendEnabled?: {
                        denom?: string;
                        enabled?: boolean;
                    }[] & ({
                        denom?: string;
                        enabled?: boolean;
                    } & {
                        denom?: string;
                        enabled?: boolean;
                    } & Record<Exclude<keyof I_25["sendEnabled"][number], keyof _33.SendEnabled>, never>)[] & Record<Exclude<keyof I_25["sendEnabled"], keyof {
                        denom?: string;
                        enabled?: boolean;
                    }[]>, never>;
                    defaultSendEnabled?: boolean;
                } & Record<Exclude<keyof I_25, keyof _33.Params>, never>>(object: I_25): _33.Params;
            };
            SendEnabled: {
                encode(message: _33.SendEnabled, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _33.SendEnabled;
                fromJSON(object: any): _33.SendEnabled;
                toJSON(message: _33.SendEnabled): unknown;
                fromPartial<I_26 extends {
                    denom?: string;
                    enabled?: boolean;
                } & {
                    denom?: string;
                    enabled?: boolean;
                } & Record<Exclude<keyof I_26, keyof _33.SendEnabled>, never>>(object: I_26): _33.SendEnabled;
            };
            Input: {
                encode(message: _33.Input, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _33.Input;
                fromJSON(object: any): _33.Input;
                toJSON(message: _33.Input): unknown;
                fromPartial<I_27 extends {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_27["coins"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_27["coins"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_27, keyof _33.Input>, never>>(object: I_27): _33.Input;
            };
            Output: {
                encode(message: _33.Output, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _33.Output;
                fromJSON(object: any): _33.Output;
                toJSON(message: _33.Output): unknown;
                fromPartial<I_28 extends {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    address?: string;
                    coins?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_28["coins"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_28["coins"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_28, keyof _33.Output>, never>>(object: I_28): _33.Output;
            };
            Supply: {
                encode(message: _33.Supply, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _33.Supply;
                fromJSON(object: any): _33.Supply;
                toJSON(message: _33.Supply): unknown;
                fromPartial<I_29 extends {
                    total?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    total?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_29["total"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_29["total"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_29, "total">, never>>(object: I_29): _33.Supply;
            };
            DenomUnit: {
                encode(message: _33.DenomUnit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _33.DenomUnit;
                fromJSON(object: any): _33.DenomUnit;
                toJSON(message: _33.DenomUnit): unknown;
                fromPartial<I_30 extends {
                    denom?: string;
                    exponent?: number;
                    aliases?: string[];
                } & {
                    denom?: string;
                    exponent?: number;
                    aliases?: string[] & string[] & Record<Exclude<keyof I_30["aliases"], keyof string[]>, never>;
                } & Record<Exclude<keyof I_30, keyof _33.DenomUnit>, never>>(object: I_30): _33.DenomUnit;
            };
            Metadata: {
                encode(message: _33.Metadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _33.Metadata;
                fromJSON(object: any): _33.Metadata;
                toJSON(message: _33.Metadata): unknown;
                fromPartial<I_31 extends {
                    description?: string;
                    denomUnits?: {
                        denom?: string;
                        exponent?: number;
                        aliases?: string[];
                    }[];
                    base?: string;
                    display?: string;
                    name?: string;
                    symbol?: string;
                    uri?: string;
                    uriHash?: string;
                } & {
                    description?: string;
                    denomUnits?: {
                        denom?: string;
                        exponent?: number;
                        aliases?: string[];
                    }[] & ({
                        denom?: string;
                        exponent?: number;
                        aliases?: string[];
                    } & {
                        denom?: string;
                        exponent?: number;
                        aliases?: string[] & string[] & Record<Exclude<keyof I_31["denomUnits"][number]["aliases"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I_31["denomUnits"][number], keyof _33.DenomUnit>, never>)[] & Record<Exclude<keyof I_31["denomUnits"], keyof {
                        denom?: string;
                        exponent?: number;
                        aliases?: string[];
                    }[]>, never>;
                    base?: string;
                    display?: string;
                    name?: string;
                    symbol?: string;
                    uri?: string;
                    uriHash?: string;
                } & Record<Exclude<keyof I_31, keyof _33.Metadata>, never>>(object: I_31): _33.Metadata;
            };
            SendAuthorization: {
                encode(message: _32.SendAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _32.SendAuthorization;
                fromJSON(object: any): _32.SendAuthorization;
                toJSON(message: _32.SendAuthorization): unknown;
                fromPartial<I_32 extends {
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_32["spendLimit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_32["spendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_32, "spendLimit">, never>>(object: I_32): _32.SendAuthorization;
            };
        };
    }
    namespace base {
        namespace abci {
            const v1beta1: {
                TxResponse: {
                    encode(message: _37.TxResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.TxResponse;
                    fromJSON(object: any): _37.TxResponse;
                    toJSON(message: _37.TxResponse): unknown;
                    fromPartial<I extends {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    } & {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[] & ({
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        } & {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[] & ({
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            } & {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[] & ({
                                    key?: string;
                                    value?: string;
                                } & {
                                    key?: string;
                                    value?: string;
                                } & Record<Exclude<keyof I["logs"][number]["events"][number]["attributes"][number], keyof _37.Attribute>, never>)[] & Record<Exclude<keyof I["logs"][number]["events"][number]["attributes"], keyof {
                                    key?: string;
                                    value?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I["logs"][number]["events"][number], keyof _37.StringEvent>, never>)[] & Record<Exclude<keyof I["logs"][number]["events"], keyof {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[]>, never>;
                        } & Record<Exclude<keyof I["logs"][number], keyof _37.ABCIMessageLog>, never>)[] & Record<Exclude<keyof I["logs"], keyof {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[]>, never>;
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["tx"], keyof import("../google/protobuf/any").Any>, never>;
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[] & ({
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        } & {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[] & ({
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & Record<Exclude<keyof I["events"][number]["attributes"][number], keyof import("../tendermint/abci/types").EventAttribute>, never>)[] & Record<Exclude<keyof I["events"][number]["attributes"], keyof {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[]>, never>;
                        } & Record<Exclude<keyof I["events"][number], keyof import("../tendermint/abci/types").Event>, never>)[] & Record<Exclude<keyof I["events"], keyof {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[]>, never>;
                    } & Record<Exclude<keyof I, keyof _37.TxResponse>, never>>(object: I): _37.TxResponse;
                };
                ABCIMessageLog: {
                    encode(message: _37.ABCIMessageLog, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.ABCIMessageLog;
                    fromJSON(object: any): _37.ABCIMessageLog;
                    toJSON(message: _37.ABCIMessageLog): unknown;
                    fromPartial<I_1 extends {
                        msgIndex?: number;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: string;
                                value?: string;
                            }[];
                        }[];
                    } & {
                        msgIndex?: number;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: string;
                                value?: string;
                            }[];
                        }[] & ({
                            type?: string;
                            attributes?: {
                                key?: string;
                                value?: string;
                            }[];
                        } & {
                            type?: string;
                            attributes?: {
                                key?: string;
                                value?: string;
                            }[] & ({
                                key?: string;
                                value?: string;
                            } & {
                                key?: string;
                                value?: string;
                            } & Record<Exclude<keyof I_1["events"][number]["attributes"][number], keyof _37.Attribute>, never>)[] & Record<Exclude<keyof I_1["events"][number]["attributes"], keyof {
                                key?: string;
                                value?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_1["events"][number], keyof _37.StringEvent>, never>)[] & Record<Exclude<keyof I_1["events"], keyof {
                            type?: string;
                            attributes?: {
                                key?: string;
                                value?: string;
                            }[];
                        }[]>, never>;
                    } & Record<Exclude<keyof I_1, keyof _37.ABCIMessageLog>, never>>(object: I_1): _37.ABCIMessageLog;
                };
                StringEvent: {
                    encode(message: _37.StringEvent, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.StringEvent;
                    fromJSON(object: any): _37.StringEvent;
                    toJSON(message: _37.StringEvent): unknown;
                    fromPartial<I_2 extends {
                        type?: string;
                        attributes?: {
                            key?: string;
                            value?: string;
                        }[];
                    } & {
                        type?: string;
                        attributes?: {
                            key?: string;
                            value?: string;
                        }[] & ({
                            key?: string;
                            value?: string;
                        } & {
                            key?: string;
                            value?: string;
                        } & Record<Exclude<keyof I_2["attributes"][number], keyof _37.Attribute>, never>)[] & Record<Exclude<keyof I_2["attributes"], keyof {
                            key?: string;
                            value?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_2, keyof _37.StringEvent>, never>>(object: I_2): _37.StringEvent;
                };
                Attribute: {
                    encode(message: _37.Attribute, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.Attribute;
                    fromJSON(object: any): _37.Attribute;
                    toJSON(message: _37.Attribute): unknown;
                    fromPartial<I_3 extends {
                        key?: string;
                        value?: string;
                    } & {
                        key?: string;
                        value?: string;
                    } & Record<Exclude<keyof I_3, keyof _37.Attribute>, never>>(object: I_3): _37.Attribute;
                };
                GasInfo: {
                    encode(message: _37.GasInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.GasInfo;
                    fromJSON(object: any): _37.GasInfo;
                    toJSON(message: _37.GasInfo): unknown;
                    fromPartial<I_4 extends {
                        gasWanted?: any;
                        gasUsed?: any;
                    } & {
                        gasWanted?: any;
                        gasUsed?: any;
                    } & Record<Exclude<keyof I_4, keyof _37.GasInfo>, never>>(object: I_4): _37.GasInfo;
                };
                Result: {
                    encode(message: _37.Result, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.Result;
                    fromJSON(object: any): _37.Result;
                    toJSON(message: _37.Result): unknown;
                    fromPartial<I_5 extends {
                        data?: Uint8Array;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                        msgResponses?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    } & {
                        data?: Uint8Array;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[] & ({
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        } & {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[] & ({
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & Record<Exclude<keyof I_5["events"][number]["attributes"][number], keyof import("../tendermint/abci/types").EventAttribute>, never>)[] & Record<Exclude<keyof I_5["events"][number]["attributes"], keyof {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_5["events"][number], keyof import("../tendermint/abci/types").Event>, never>)[] & Record<Exclude<keyof I_5["events"], keyof {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[]>, never>;
                        msgResponses?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_5["msgResponses"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_5["msgResponses"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_5, keyof _37.Result>, never>>(object: I_5): _37.Result;
                };
                SimulationResponse: {
                    encode(message: _37.SimulationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.SimulationResponse;
                    fromJSON(object: any): _37.SimulationResponse;
                    toJSON(message: _37.SimulationResponse): unknown;
                    fromPartial<I_6 extends {
                        gasInfo?: {
                            gasWanted?: any;
                            gasUsed?: any;
                        };
                        result?: {
                            data?: Uint8Array;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                            msgResponses?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                    } & {
                        gasInfo?: {
                            gasWanted?: any;
                            gasUsed?: any;
                        } & {
                            gasWanted?: any;
                            gasUsed?: any;
                        } & Record<Exclude<keyof I_6["gasInfo"], keyof _37.GasInfo>, never>;
                        result?: {
                            data?: Uint8Array;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                            msgResponses?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        } & {
                            data?: Uint8Array;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[] & ({
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            } & {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[] & ({
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                } & {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                } & Record<Exclude<keyof I_6["result"]["events"][number]["attributes"][number], keyof import("../tendermint/abci/types").EventAttribute>, never>)[] & Record<Exclude<keyof I_6["result"]["events"][number]["attributes"], keyof {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[]>, never>;
                            } & Record<Exclude<keyof I_6["result"]["events"][number], keyof import("../tendermint/abci/types").Event>, never>)[] & Record<Exclude<keyof I_6["result"]["events"], keyof {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[]>, never>;
                            msgResponses?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_6["result"]["msgResponses"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_6["result"]["msgResponses"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_6["result"], keyof _37.Result>, never>;
                    } & Record<Exclude<keyof I_6, keyof _37.SimulationResponse>, never>>(object: I_6): _37.SimulationResponse;
                };
                MsgData: {
                    encode(message: _37.MsgData, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.MsgData;
                    fromJSON(object: any): _37.MsgData;
                    toJSON(message: _37.MsgData): unknown;
                    fromPartial<I_7 extends {
                        msgType?: string;
                        data?: Uint8Array;
                    } & {
                        msgType?: string;
                        data?: Uint8Array;
                    } & Record<Exclude<keyof I_7, keyof _37.MsgData>, never>>(object: I_7): _37.MsgData;
                };
                TxMsgData: {
                    encode(message: _37.TxMsgData, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.TxMsgData;
                    fromJSON(object: any): _37.TxMsgData;
                    toJSON(message: _37.TxMsgData): unknown;
                    fromPartial<I_8 extends {
                        data?: {
                            msgType?: string;
                            data?: Uint8Array;
                        }[];
                        msgResponses?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    } & {
                        data?: {
                            msgType?: string;
                            data?: Uint8Array;
                        }[] & ({
                            msgType?: string;
                            data?: Uint8Array;
                        } & {
                            msgType?: string;
                            data?: Uint8Array;
                        } & Record<Exclude<keyof I_8["data"][number], keyof _37.MsgData>, never>)[] & Record<Exclude<keyof I_8["data"], keyof {
                            msgType?: string;
                            data?: Uint8Array;
                        }[]>, never>;
                        msgResponses?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_8["msgResponses"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_8["msgResponses"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_8, keyof _37.TxMsgData>, never>>(object: I_8): _37.TxMsgData;
                };
                SearchTxsResult: {
                    encode(message: _37.SearchTxsResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _37.SearchTxsResult;
                    fromJSON(object: any): _37.SearchTxsResult;
                    toJSON(message: _37.SearchTxsResult): unknown;
                    fromPartial<I_9 extends {
                        totalCount?: any;
                        count?: any;
                        pageNumber?: any;
                        pageTotal?: any;
                        limit?: any;
                        txs?: {
                            height?: any;
                            txhash?: string;
                            codespace?: string;
                            code?: number;
                            data?: string;
                            rawLog?: string;
                            logs?: {
                                msgIndex?: number;
                                log?: string;
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[];
                            }[];
                            info?: string;
                            gasWanted?: any;
                            gasUsed?: any;
                            tx?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            timestamp?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                        }[];
                    } & {
                        totalCount?: any;
                        count?: any;
                        pageNumber?: any;
                        pageTotal?: any;
                        limit?: any;
                        txs?: {
                            height?: any;
                            txhash?: string;
                            codespace?: string;
                            code?: number;
                            data?: string;
                            rawLog?: string;
                            logs?: {
                                msgIndex?: number;
                                log?: string;
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[];
                            }[];
                            info?: string;
                            gasWanted?: any;
                            gasUsed?: any;
                            tx?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            timestamp?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                        }[] & ({
                            height?: any;
                            txhash?: string;
                            codespace?: string;
                            code?: number;
                            data?: string;
                            rawLog?: string;
                            logs?: {
                                msgIndex?: number;
                                log?: string;
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[];
                            }[];
                            info?: string;
                            gasWanted?: any;
                            gasUsed?: any;
                            tx?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            timestamp?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                        } & {
                            height?: any;
                            txhash?: string;
                            codespace?: string;
                            code?: number;
                            data?: string;
                            rawLog?: string;
                            logs?: {
                                msgIndex?: number;
                                log?: string;
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[];
                            }[] & ({
                                msgIndex?: number;
                                log?: string;
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[];
                            } & {
                                msgIndex?: number;
                                log?: string;
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[] & ({
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                } & {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[] & ({
                                        key?: string;
                                        value?: string;
                                    } & {
                                        key?: string;
                                        value?: string;
                                    } & Record<Exclude<keyof I_9["txs"][number]["logs"][number]["events"][number]["attributes"][number], keyof _37.Attribute>, never>)[] & Record<Exclude<keyof I_9["txs"][number]["logs"][number]["events"][number]["attributes"], keyof {
                                        key?: string;
                                        value?: string;
                                    }[]>, never>;
                                } & Record<Exclude<keyof I_9["txs"][number]["logs"][number]["events"][number], keyof _37.StringEvent>, never>)[] & Record<Exclude<keyof I_9["txs"][number]["logs"][number]["events"], keyof {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[]>, never>;
                            } & Record<Exclude<keyof I_9["txs"][number]["logs"][number], keyof _37.ABCIMessageLog>, never>)[] & Record<Exclude<keyof I_9["txs"][number]["logs"], keyof {
                                msgIndex?: number;
                                log?: string;
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[];
                            }[]>, never>;
                            info?: string;
                            gasWanted?: any;
                            gasUsed?: any;
                            tx?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_9["txs"][number]["tx"], keyof import("../google/protobuf/any").Any>, never>;
                            timestamp?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[] & ({
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            } & {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[] & ({
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                } & {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                } & Record<Exclude<keyof I_9["txs"][number]["events"][number]["attributes"][number], keyof import("../tendermint/abci/types").EventAttribute>, never>)[] & Record<Exclude<keyof I_9["txs"][number]["events"][number]["attributes"], keyof {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[]>, never>;
                            } & Record<Exclude<keyof I_9["txs"][number]["events"][number], keyof import("../tendermint/abci/types").Event>, never>)[] & Record<Exclude<keyof I_9["txs"][number]["events"], keyof {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[]>, never>;
                        } & Record<Exclude<keyof I_9["txs"][number], keyof _37.TxResponse>, never>)[] & Record<Exclude<keyof I_9["txs"], keyof {
                            height?: any;
                            txhash?: string;
                            codespace?: string;
                            code?: number;
                            data?: string;
                            rawLog?: string;
                            logs?: {
                                msgIndex?: number;
                                log?: string;
                                events?: {
                                    type?: string;
                                    attributes?: {
                                        key?: string;
                                        value?: string;
                                    }[];
                                }[];
                            }[];
                            info?: string;
                            gasWanted?: any;
                            gasUsed?: any;
                            tx?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            timestamp?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: Uint8Array;
                                    value?: Uint8Array;
                                    index?: boolean;
                                }[];
                            }[];
                        }[]>, never>;
                    } & Record<Exclude<keyof I_9, keyof _37.SearchTxsResult>, never>>(object: I_9): _37.SearchTxsResult;
                };
            };
        }
        namespace kv {
            const v1beta1: {
                Pairs: {
                    encode(message: _38.Pairs, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _38.Pairs;
                    fromJSON(object: any): _38.Pairs;
                    toJSON(message: _38.Pairs): unknown;
                    fromPartial<I extends {
                        pairs?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        }[];
                    } & {
                        pairs?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        }[] & ({
                            key?: Uint8Array;
                            value?: Uint8Array;
                        } & {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["pairs"][number], keyof _38.Pair>, never>)[] & Record<Exclude<keyof I["pairs"], keyof {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        }[]>, never>;
                    } & Record<Exclude<keyof I, "pairs">, never>>(object: I): _38.Pairs;
                };
                Pair: {
                    encode(message: _38.Pair, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _38.Pair;
                    fromJSON(object: any): _38.Pair;
                    toJSON(message: _38.Pair): unknown;
                    fromPartial<I_1 extends {
                        key?: Uint8Array;
                        value?: Uint8Array;
                    } & {
                        key?: Uint8Array;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_1, keyof _38.Pair>, never>>(object: I_1): _38.Pair;
                };
            };
        }
        namespace query {
            const v1beta1: {
                PageRequest: {
                    encode(message: _39.PageRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _39.PageRequest;
                    fromJSON(object: any): _39.PageRequest;
                    toJSON(message: _39.PageRequest): unknown;
                    fromPartial<I extends {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I, keyof _39.PageRequest>, never>>(object: I): _39.PageRequest;
                };
                PageResponse: {
                    encode(message: _39.PageResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _39.PageResponse;
                    fromJSON(object: any): _39.PageResponse;
                    toJSON(message: _39.PageResponse): unknown;
                    fromPartial<I_1 extends {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_1, keyof _39.PageResponse>, never>>(object: I_1): _39.PageResponse;
                };
            };
        }
        namespace reflection {
            const v1beta1: {
                ListAllInterfacesRequest: {
                    encode(_: _40.ListAllInterfacesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _40.ListAllInterfacesRequest;
                    fromJSON(_: any): _40.ListAllInterfacesRequest;
                    toJSON(_: _40.ListAllInterfacesRequest): unknown;
                    fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): _40.ListAllInterfacesRequest;
                };
                ListAllInterfacesResponse: {
                    encode(message: _40.ListAllInterfacesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _40.ListAllInterfacesResponse;
                    fromJSON(object: any): _40.ListAllInterfacesResponse;
                    toJSON(message: _40.ListAllInterfacesResponse): unknown;
                    fromPartial<I_1 extends {
                        interfaceNames?: string[];
                    } & {
                        interfaceNames?: string[] & string[] & Record<Exclude<keyof I_1["interfaceNames"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I_1, "interfaceNames">, never>>(object: I_1): _40.ListAllInterfacesResponse;
                };
                ListImplementationsRequest: {
                    encode(message: _40.ListImplementationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _40.ListImplementationsRequest;
                    fromJSON(object: any): _40.ListImplementationsRequest;
                    toJSON(message: _40.ListImplementationsRequest): unknown;
                    fromPartial<I_2 extends {
                        interfaceName?: string;
                    } & {
                        interfaceName?: string;
                    } & Record<Exclude<keyof I_2, "interfaceName">, never>>(object: I_2): _40.ListImplementationsRequest;
                };
                ListImplementationsResponse: {
                    encode(message: _40.ListImplementationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _40.ListImplementationsResponse;
                    fromJSON(object: any): _40.ListImplementationsResponse;
                    toJSON(message: _40.ListImplementationsResponse): unknown;
                    fromPartial<I_3 extends {
                        implementationMessageNames?: string[];
                    } & {
                        implementationMessageNames?: string[] & string[] & Record<Exclude<keyof I_3["implementationMessageNames"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I_3, "implementationMessageNames">, never>>(object: I_3): _40.ListImplementationsResponse;
                };
            };
            const v2alpha1: {
                AppDescriptor: {
                    encode(message: _41.AppDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.AppDescriptor;
                    fromJSON(object: any): _41.AppDescriptor;
                    toJSON(message: _41.AppDescriptor): unknown;
                    fromPartial<I extends {
                        authn?: {
                            signModes?: {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[];
                        };
                        chain?: {
                            id?: string;
                        };
                        codec?: {
                            interfaces?: {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[];
                        };
                        configuration?: {
                            bech32AccountAddressPrefix?: string;
                        };
                        queryServices?: {
                            queryServices?: {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[];
                        };
                        tx?: {
                            fullname?: string;
                            msgs?: {
                                msgTypeUrl?: string;
                            }[];
                        };
                    } & {
                        authn?: {
                            signModes?: {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[];
                        } & {
                            signModes?: {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[] & ({
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            } & {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            } & Record<Exclude<keyof I["authn"]["signModes"][number], keyof _41.SigningModeDescriptor>, never>)[] & Record<Exclude<keyof I["authn"]["signModes"], keyof {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I["authn"], "signModes">, never>;
                        chain?: {
                            id?: string;
                        } & {
                            id?: string;
                        } & Record<Exclude<keyof I["chain"], "id">, never>;
                        codec?: {
                            interfaces?: {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[];
                        } & {
                            interfaces?: {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[] & ({
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            } & {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[] & ({
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                } & {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[] & string[] & Record<Exclude<keyof I["codec"]["interfaces"][number]["interfaceAcceptingMessages"][number]["fieldDescriptorNames"], keyof string[]>, never>;
                                } & Record<Exclude<keyof I["codec"]["interfaces"][number]["interfaceAcceptingMessages"][number], keyof _41.InterfaceAcceptingMessageDescriptor>, never>)[] & Record<Exclude<keyof I["codec"]["interfaces"][number]["interfaceAcceptingMessages"], keyof {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[]>, never>;
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[] & ({
                                    fullname?: string;
                                    typeUrl?: string;
                                } & {
                                    fullname?: string;
                                    typeUrl?: string;
                                } & Record<Exclude<keyof I["codec"]["interfaces"][number]["interfaceImplementers"][number], keyof _41.InterfaceImplementerDescriptor>, never>)[] & Record<Exclude<keyof I["codec"]["interfaces"][number]["interfaceImplementers"], keyof {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I["codec"]["interfaces"][number], keyof _41.InterfaceDescriptor>, never>)[] & Record<Exclude<keyof I["codec"]["interfaces"], keyof {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[]>, never>;
                        } & Record<Exclude<keyof I["codec"], "interfaces">, never>;
                        configuration?: {
                            bech32AccountAddressPrefix?: string;
                        } & {
                            bech32AccountAddressPrefix?: string;
                        } & Record<Exclude<keyof I["configuration"], "bech32AccountAddressPrefix">, never>;
                        queryServices?: {
                            queryServices?: {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[];
                        } & {
                            queryServices?: {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[] & ({
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            } & {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[] & ({
                                    name?: string;
                                    fullQueryPath?: string;
                                } & {
                                    name?: string;
                                    fullQueryPath?: string;
                                } & Record<Exclude<keyof I["queryServices"]["queryServices"][number]["methods"][number], keyof _41.QueryMethodDescriptor>, never>)[] & Record<Exclude<keyof I["queryServices"]["queryServices"][number]["methods"], keyof {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I["queryServices"]["queryServices"][number], keyof _41.QueryServiceDescriptor>, never>)[] & Record<Exclude<keyof I["queryServices"]["queryServices"], keyof {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[]>, never>;
                        } & Record<Exclude<keyof I["queryServices"], "queryServices">, never>;
                        tx?: {
                            fullname?: string;
                            msgs?: {
                                msgTypeUrl?: string;
                            }[];
                        } & {
                            fullname?: string;
                            msgs?: {
                                msgTypeUrl?: string;
                            }[] & ({
                                msgTypeUrl?: string;
                            } & {
                                msgTypeUrl?: string;
                            } & Record<Exclude<keyof I["tx"]["msgs"][number], "msgTypeUrl">, never>)[] & Record<Exclude<keyof I["tx"]["msgs"], keyof {
                                msgTypeUrl?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I["tx"], keyof _41.TxDescriptor>, never>;
                    } & Record<Exclude<keyof I, keyof _41.AppDescriptor>, never>>(object: I): _41.AppDescriptor;
                };
                TxDescriptor: {
                    encode(message: _41.TxDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.TxDescriptor;
                    fromJSON(object: any): _41.TxDescriptor;
                    toJSON(message: _41.TxDescriptor): unknown;
                    fromPartial<I_1 extends {
                        fullname?: string;
                        msgs?: {
                            msgTypeUrl?: string;
                        }[];
                    } & {
                        fullname?: string;
                        msgs?: {
                            msgTypeUrl?: string;
                        }[] & ({
                            msgTypeUrl?: string;
                        } & {
                            msgTypeUrl?: string;
                        } & Record<Exclude<keyof I_1["msgs"][number], "msgTypeUrl">, never>)[] & Record<Exclude<keyof I_1["msgs"], keyof {
                            msgTypeUrl?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_1, keyof _41.TxDescriptor>, never>>(object: I_1): _41.TxDescriptor;
                };
                AuthnDescriptor: {
                    encode(message: _41.AuthnDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.AuthnDescriptor;
                    fromJSON(object: any): _41.AuthnDescriptor;
                    toJSON(message: _41.AuthnDescriptor): unknown;
                    fromPartial<I_2 extends {
                        signModes?: {
                            name?: string;
                            number?: number;
                            authnInfoProviderMethodFullname?: string;
                        }[];
                    } & {
                        signModes?: {
                            name?: string;
                            number?: number;
                            authnInfoProviderMethodFullname?: string;
                        }[] & ({
                            name?: string;
                            number?: number;
                            authnInfoProviderMethodFullname?: string;
                        } & {
                            name?: string;
                            number?: number;
                            authnInfoProviderMethodFullname?: string;
                        } & Record<Exclude<keyof I_2["signModes"][number], keyof _41.SigningModeDescriptor>, never>)[] & Record<Exclude<keyof I_2["signModes"], keyof {
                            name?: string;
                            number?: number;
                            authnInfoProviderMethodFullname?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_2, "signModes">, never>>(object: I_2): _41.AuthnDescriptor;
                };
                SigningModeDescriptor: {
                    encode(message: _41.SigningModeDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.SigningModeDescriptor;
                    fromJSON(object: any): _41.SigningModeDescriptor;
                    toJSON(message: _41.SigningModeDescriptor): unknown;
                    fromPartial<I_3 extends {
                        name?: string;
                        number?: number;
                        authnInfoProviderMethodFullname?: string;
                    } & {
                        name?: string;
                        number?: number;
                        authnInfoProviderMethodFullname?: string;
                    } & Record<Exclude<keyof I_3, keyof _41.SigningModeDescriptor>, never>>(object: I_3): _41.SigningModeDescriptor;
                };
                ChainDescriptor: {
                    encode(message: _41.ChainDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.ChainDescriptor;
                    fromJSON(object: any): _41.ChainDescriptor;
                    toJSON(message: _41.ChainDescriptor): unknown;
                    fromPartial<I_4 extends {
                        id?: string;
                    } & {
                        id?: string;
                    } & Record<Exclude<keyof I_4, "id">, never>>(object: I_4): _41.ChainDescriptor;
                };
                CodecDescriptor: {
                    encode(message: _41.CodecDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.CodecDescriptor;
                    fromJSON(object: any): _41.CodecDescriptor;
                    toJSON(message: _41.CodecDescriptor): unknown;
                    fromPartial<I_5 extends {
                        interfaces?: {
                            fullname?: string;
                            interfaceAcceptingMessages?: {
                                fullname?: string;
                                fieldDescriptorNames?: string[];
                            }[];
                            interfaceImplementers?: {
                                fullname?: string;
                                typeUrl?: string;
                            }[];
                        }[];
                    } & {
                        interfaces?: {
                            fullname?: string;
                            interfaceAcceptingMessages?: {
                                fullname?: string;
                                fieldDescriptorNames?: string[];
                            }[];
                            interfaceImplementers?: {
                                fullname?: string;
                                typeUrl?: string;
                            }[];
                        }[] & ({
                            fullname?: string;
                            interfaceAcceptingMessages?: {
                                fullname?: string;
                                fieldDescriptorNames?: string[];
                            }[];
                            interfaceImplementers?: {
                                fullname?: string;
                                typeUrl?: string;
                            }[];
                        } & {
                            fullname?: string;
                            interfaceAcceptingMessages?: {
                                fullname?: string;
                                fieldDescriptorNames?: string[];
                            }[] & ({
                                fullname?: string;
                                fieldDescriptorNames?: string[];
                            } & {
                                fullname?: string;
                                fieldDescriptorNames?: string[] & string[] & Record<Exclude<keyof I_5["interfaces"][number]["interfaceAcceptingMessages"][number]["fieldDescriptorNames"], keyof string[]>, never>;
                            } & Record<Exclude<keyof I_5["interfaces"][number]["interfaceAcceptingMessages"][number], keyof _41.InterfaceAcceptingMessageDescriptor>, never>)[] & Record<Exclude<keyof I_5["interfaces"][number]["interfaceAcceptingMessages"], keyof {
                                fullname?: string;
                                fieldDescriptorNames?: string[];
                            }[]>, never>;
                            interfaceImplementers?: {
                                fullname?: string;
                                typeUrl?: string;
                            }[] & ({
                                fullname?: string;
                                typeUrl?: string;
                            } & {
                                fullname?: string;
                                typeUrl?: string;
                            } & Record<Exclude<keyof I_5["interfaces"][number]["interfaceImplementers"][number], keyof _41.InterfaceImplementerDescriptor>, never>)[] & Record<Exclude<keyof I_5["interfaces"][number]["interfaceImplementers"], keyof {
                                fullname?: string;
                                typeUrl?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_5["interfaces"][number], keyof _41.InterfaceDescriptor>, never>)[] & Record<Exclude<keyof I_5["interfaces"], keyof {
                            fullname?: string;
                            interfaceAcceptingMessages?: {
                                fullname?: string;
                                fieldDescriptorNames?: string[];
                            }[];
                            interfaceImplementers?: {
                                fullname?: string;
                                typeUrl?: string;
                            }[];
                        }[]>, never>;
                    } & Record<Exclude<keyof I_5, "interfaces">, never>>(object: I_5): _41.CodecDescriptor;
                };
                InterfaceDescriptor: {
                    encode(message: _41.InterfaceDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.InterfaceDescriptor;
                    fromJSON(object: any): _41.InterfaceDescriptor;
                    toJSON(message: _41.InterfaceDescriptor): unknown;
                    fromPartial<I_6 extends {
                        fullname?: string;
                        interfaceAcceptingMessages?: {
                            fullname?: string;
                            fieldDescriptorNames?: string[];
                        }[];
                        interfaceImplementers?: {
                            fullname?: string;
                            typeUrl?: string;
                        }[];
                    } & {
                        fullname?: string;
                        interfaceAcceptingMessages?: {
                            fullname?: string;
                            fieldDescriptorNames?: string[];
                        }[] & ({
                            fullname?: string;
                            fieldDescriptorNames?: string[];
                        } & {
                            fullname?: string;
                            fieldDescriptorNames?: string[] & string[] & Record<Exclude<keyof I_6["interfaceAcceptingMessages"][number]["fieldDescriptorNames"], keyof string[]>, never>;
                        } & Record<Exclude<keyof I_6["interfaceAcceptingMessages"][number], keyof _41.InterfaceAcceptingMessageDescriptor>, never>)[] & Record<Exclude<keyof I_6["interfaceAcceptingMessages"], keyof {
                            fullname?: string;
                            fieldDescriptorNames?: string[];
                        }[]>, never>;
                        interfaceImplementers?: {
                            fullname?: string;
                            typeUrl?: string;
                        }[] & ({
                            fullname?: string;
                            typeUrl?: string;
                        } & {
                            fullname?: string;
                            typeUrl?: string;
                        } & Record<Exclude<keyof I_6["interfaceImplementers"][number], keyof _41.InterfaceImplementerDescriptor>, never>)[] & Record<Exclude<keyof I_6["interfaceImplementers"], keyof {
                            fullname?: string;
                            typeUrl?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_6, keyof _41.InterfaceDescriptor>, never>>(object: I_6): _41.InterfaceDescriptor;
                };
                InterfaceImplementerDescriptor: {
                    encode(message: _41.InterfaceImplementerDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.InterfaceImplementerDescriptor;
                    fromJSON(object: any): _41.InterfaceImplementerDescriptor;
                    toJSON(message: _41.InterfaceImplementerDescriptor): unknown;
                    fromPartial<I_7 extends {
                        fullname?: string;
                        typeUrl?: string;
                    } & {
                        fullname?: string;
                        typeUrl?: string;
                    } & Record<Exclude<keyof I_7, keyof _41.InterfaceImplementerDescriptor>, never>>(object: I_7): _41.InterfaceImplementerDescriptor;
                };
                InterfaceAcceptingMessageDescriptor: {
                    encode(message: _41.InterfaceAcceptingMessageDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.InterfaceAcceptingMessageDescriptor;
                    fromJSON(object: any): _41.InterfaceAcceptingMessageDescriptor;
                    toJSON(message: _41.InterfaceAcceptingMessageDescriptor): unknown;
                    fromPartial<I_8 extends {
                        fullname?: string;
                        fieldDescriptorNames?: string[];
                    } & {
                        fullname?: string;
                        fieldDescriptorNames?: string[] & string[] & Record<Exclude<keyof I_8["fieldDescriptorNames"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I_8, keyof _41.InterfaceAcceptingMessageDescriptor>, never>>(object: I_8): _41.InterfaceAcceptingMessageDescriptor;
                };
                ConfigurationDescriptor: {
                    encode(message: _41.ConfigurationDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.ConfigurationDescriptor;
                    fromJSON(object: any): _41.ConfigurationDescriptor;
                    toJSON(message: _41.ConfigurationDescriptor): unknown;
                    fromPartial<I_9 extends {
                        bech32AccountAddressPrefix?: string;
                    } & {
                        bech32AccountAddressPrefix?: string;
                    } & Record<Exclude<keyof I_9, "bech32AccountAddressPrefix">, never>>(object: I_9): _41.ConfigurationDescriptor;
                };
                MsgDescriptor: {
                    encode(message: _41.MsgDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.MsgDescriptor;
                    fromJSON(object: any): _41.MsgDescriptor;
                    toJSON(message: _41.MsgDescriptor): unknown;
                    fromPartial<I_10 extends {
                        msgTypeUrl?: string;
                    } & {
                        msgTypeUrl?: string;
                    } & Record<Exclude<keyof I_10, "msgTypeUrl">, never>>(object: I_10): _41.MsgDescriptor;
                };
                GetAuthnDescriptorRequest: {
                    encode(_: _41.GetAuthnDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetAuthnDescriptorRequest;
                    fromJSON(_: any): _41.GetAuthnDescriptorRequest;
                    toJSON(_: _41.GetAuthnDescriptorRequest): unknown;
                    fromPartial<I_11 extends {} & {} & Record<Exclude<keyof I_11, never>, never>>(_: I_11): _41.GetAuthnDescriptorRequest;
                };
                GetAuthnDescriptorResponse: {
                    encode(message: _41.GetAuthnDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetAuthnDescriptorResponse;
                    fromJSON(object: any): _41.GetAuthnDescriptorResponse;
                    toJSON(message: _41.GetAuthnDescriptorResponse): unknown;
                    fromPartial<I_12 extends {
                        authn?: {
                            signModes?: {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[];
                        };
                    } & {
                        authn?: {
                            signModes?: {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[];
                        } & {
                            signModes?: {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[] & ({
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            } & {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            } & Record<Exclude<keyof I_12["authn"]["signModes"][number], keyof _41.SigningModeDescriptor>, never>)[] & Record<Exclude<keyof I_12["authn"]["signModes"], keyof {
                                name?: string;
                                number?: number;
                                authnInfoProviderMethodFullname?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_12["authn"], "signModes">, never>;
                    } & Record<Exclude<keyof I_12, "authn">, never>>(object: I_12): _41.GetAuthnDescriptorResponse;
                };
                GetChainDescriptorRequest: {
                    encode(_: _41.GetChainDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetChainDescriptorRequest;
                    fromJSON(_: any): _41.GetChainDescriptorRequest;
                    toJSON(_: _41.GetChainDescriptorRequest): unknown;
                    fromPartial<I_13 extends {} & {} & Record<Exclude<keyof I_13, never>, never>>(_: I_13): _41.GetChainDescriptorRequest;
                };
                GetChainDescriptorResponse: {
                    encode(message: _41.GetChainDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetChainDescriptorResponse;
                    fromJSON(object: any): _41.GetChainDescriptorResponse;
                    toJSON(message: _41.GetChainDescriptorResponse): unknown;
                    fromPartial<I_14 extends {
                        chain?: {
                            id?: string;
                        };
                    } & {
                        chain?: {
                            id?: string;
                        } & {
                            id?: string;
                        } & Record<Exclude<keyof I_14["chain"], "id">, never>;
                    } & Record<Exclude<keyof I_14, "chain">, never>>(object: I_14): _41.GetChainDescriptorResponse;
                };
                GetCodecDescriptorRequest: {
                    encode(_: _41.GetCodecDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetCodecDescriptorRequest;
                    fromJSON(_: any): _41.GetCodecDescriptorRequest;
                    toJSON(_: _41.GetCodecDescriptorRequest): unknown;
                    fromPartial<I_15 extends {} & {} & Record<Exclude<keyof I_15, never>, never>>(_: I_15): _41.GetCodecDescriptorRequest;
                };
                GetCodecDescriptorResponse: {
                    encode(message: _41.GetCodecDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetCodecDescriptorResponse;
                    fromJSON(object: any): _41.GetCodecDescriptorResponse;
                    toJSON(message: _41.GetCodecDescriptorResponse): unknown;
                    fromPartial<I_16 extends {
                        codec?: {
                            interfaces?: {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[];
                        };
                    } & {
                        codec?: {
                            interfaces?: {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[];
                        } & {
                            interfaces?: {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[] & ({
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            } & {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[] & ({
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                } & {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[] & string[] & Record<Exclude<keyof I_16["codec"]["interfaces"][number]["interfaceAcceptingMessages"][number]["fieldDescriptorNames"], keyof string[]>, never>;
                                } & Record<Exclude<keyof I_16["codec"]["interfaces"][number]["interfaceAcceptingMessages"][number], keyof _41.InterfaceAcceptingMessageDescriptor>, never>)[] & Record<Exclude<keyof I_16["codec"]["interfaces"][number]["interfaceAcceptingMessages"], keyof {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[]>, never>;
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[] & ({
                                    fullname?: string;
                                    typeUrl?: string;
                                } & {
                                    fullname?: string;
                                    typeUrl?: string;
                                } & Record<Exclude<keyof I_16["codec"]["interfaces"][number]["interfaceImplementers"][number], keyof _41.InterfaceImplementerDescriptor>, never>)[] & Record<Exclude<keyof I_16["codec"]["interfaces"][number]["interfaceImplementers"], keyof {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I_16["codec"]["interfaces"][number], keyof _41.InterfaceDescriptor>, never>)[] & Record<Exclude<keyof I_16["codec"]["interfaces"], keyof {
                                fullname?: string;
                                interfaceAcceptingMessages?: {
                                    fullname?: string;
                                    fieldDescriptorNames?: string[];
                                }[];
                                interfaceImplementers?: {
                                    fullname?: string;
                                    typeUrl?: string;
                                }[];
                            }[]>, never>;
                        } & Record<Exclude<keyof I_16["codec"], "interfaces">, never>;
                    } & Record<Exclude<keyof I_16, "codec">, never>>(object: I_16): _41.GetCodecDescriptorResponse;
                };
                GetConfigurationDescriptorRequest: {
                    encode(_: _41.GetConfigurationDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetConfigurationDescriptorRequest;
                    fromJSON(_: any): _41.GetConfigurationDescriptorRequest;
                    toJSON(_: _41.GetConfigurationDescriptorRequest): unknown;
                    fromPartial<I_17 extends {} & {} & Record<Exclude<keyof I_17, never>, never>>(_: I_17): _41.GetConfigurationDescriptorRequest;
                };
                GetConfigurationDescriptorResponse: {
                    encode(message: _41.GetConfigurationDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetConfigurationDescriptorResponse;
                    fromJSON(object: any): _41.GetConfigurationDescriptorResponse;
                    toJSON(message: _41.GetConfigurationDescriptorResponse): unknown;
                    fromPartial<I_18 extends {
                        config?: {
                            bech32AccountAddressPrefix?: string;
                        };
                    } & {
                        config?: {
                            bech32AccountAddressPrefix?: string;
                        } & {
                            bech32AccountAddressPrefix?: string;
                        } & Record<Exclude<keyof I_18["config"], "bech32AccountAddressPrefix">, never>;
                    } & Record<Exclude<keyof I_18, "config">, never>>(object: I_18): _41.GetConfigurationDescriptorResponse;
                };
                GetQueryServicesDescriptorRequest: {
                    encode(_: _41.GetQueryServicesDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetQueryServicesDescriptorRequest;
                    fromJSON(_: any): _41.GetQueryServicesDescriptorRequest;
                    toJSON(_: _41.GetQueryServicesDescriptorRequest): unknown;
                    fromPartial<I_19 extends {} & {} & Record<Exclude<keyof I_19, never>, never>>(_: I_19): _41.GetQueryServicesDescriptorRequest;
                };
                GetQueryServicesDescriptorResponse: {
                    encode(message: _41.GetQueryServicesDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetQueryServicesDescriptorResponse;
                    fromJSON(object: any): _41.GetQueryServicesDescriptorResponse;
                    toJSON(message: _41.GetQueryServicesDescriptorResponse): unknown;
                    fromPartial<I_20 extends {
                        queries?: {
                            queryServices?: {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[];
                        };
                    } & {
                        queries?: {
                            queryServices?: {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[];
                        } & {
                            queryServices?: {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[] & ({
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            } & {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[] & ({
                                    name?: string;
                                    fullQueryPath?: string;
                                } & {
                                    name?: string;
                                    fullQueryPath?: string;
                                } & Record<Exclude<keyof I_20["queries"]["queryServices"][number]["methods"][number], keyof _41.QueryMethodDescriptor>, never>)[] & Record<Exclude<keyof I_20["queries"]["queryServices"][number]["methods"], keyof {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I_20["queries"]["queryServices"][number], keyof _41.QueryServiceDescriptor>, never>)[] & Record<Exclude<keyof I_20["queries"]["queryServices"], keyof {
                                fullname?: string;
                                isModule?: boolean;
                                methods?: {
                                    name?: string;
                                    fullQueryPath?: string;
                                }[];
                            }[]>, never>;
                        } & Record<Exclude<keyof I_20["queries"], "queryServices">, never>;
                    } & Record<Exclude<keyof I_20, "queries">, never>>(object: I_20): _41.GetQueryServicesDescriptorResponse;
                };
                GetTxDescriptorRequest: {
                    encode(_: _41.GetTxDescriptorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetTxDescriptorRequest;
                    fromJSON(_: any): _41.GetTxDescriptorRequest;
                    toJSON(_: _41.GetTxDescriptorRequest): unknown;
                    fromPartial<I_21 extends {} & {} & Record<Exclude<keyof I_21, never>, never>>(_: I_21): _41.GetTxDescriptorRequest;
                };
                GetTxDescriptorResponse: {
                    encode(message: _41.GetTxDescriptorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.GetTxDescriptorResponse;
                    fromJSON(object: any): _41.GetTxDescriptorResponse;
                    toJSON(message: _41.GetTxDescriptorResponse): unknown;
                    fromPartial<I_22 extends {
                        tx?: {
                            fullname?: string;
                            msgs?: {
                                msgTypeUrl?: string;
                            }[];
                        };
                    } & {
                        tx?: {
                            fullname?: string;
                            msgs?: {
                                msgTypeUrl?: string;
                            }[];
                        } & {
                            fullname?: string;
                            msgs?: {
                                msgTypeUrl?: string;
                            }[] & ({
                                msgTypeUrl?: string;
                            } & {
                                msgTypeUrl?: string;
                            } & Record<Exclude<keyof I_22["tx"]["msgs"][number], "msgTypeUrl">, never>)[] & Record<Exclude<keyof I_22["tx"]["msgs"], keyof {
                                msgTypeUrl?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_22["tx"], keyof _41.TxDescriptor>, never>;
                    } & Record<Exclude<keyof I_22, "tx">, never>>(object: I_22): _41.GetTxDescriptorResponse;
                };
                QueryServicesDescriptor: {
                    encode(message: _41.QueryServicesDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.QueryServicesDescriptor;
                    fromJSON(object: any): _41.QueryServicesDescriptor;
                    toJSON(message: _41.QueryServicesDescriptor): unknown;
                    fromPartial<I_23 extends {
                        queryServices?: {
                            fullname?: string;
                            isModule?: boolean;
                            methods?: {
                                name?: string;
                                fullQueryPath?: string;
                            }[];
                        }[];
                    } & {
                        queryServices?: {
                            fullname?: string;
                            isModule?: boolean;
                            methods?: {
                                name?: string;
                                fullQueryPath?: string;
                            }[];
                        }[] & ({
                            fullname?: string;
                            isModule?: boolean;
                            methods?: {
                                name?: string;
                                fullQueryPath?: string;
                            }[];
                        } & {
                            fullname?: string;
                            isModule?: boolean;
                            methods?: {
                                name?: string;
                                fullQueryPath?: string;
                            }[] & ({
                                name?: string;
                                fullQueryPath?: string;
                            } & {
                                name?: string;
                                fullQueryPath?: string;
                            } & Record<Exclude<keyof I_23["queryServices"][number]["methods"][number], keyof _41.QueryMethodDescriptor>, never>)[] & Record<Exclude<keyof I_23["queryServices"][number]["methods"], keyof {
                                name?: string;
                                fullQueryPath?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_23["queryServices"][number], keyof _41.QueryServiceDescriptor>, never>)[] & Record<Exclude<keyof I_23["queryServices"], keyof {
                            fullname?: string;
                            isModule?: boolean;
                            methods?: {
                                name?: string;
                                fullQueryPath?: string;
                            }[];
                        }[]>, never>;
                    } & Record<Exclude<keyof I_23, "queryServices">, never>>(object: I_23): _41.QueryServicesDescriptor;
                };
                QueryServiceDescriptor: {
                    encode(message: _41.QueryServiceDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.QueryServiceDescriptor;
                    fromJSON(object: any): _41.QueryServiceDescriptor;
                    toJSON(message: _41.QueryServiceDescriptor): unknown;
                    fromPartial<I_24 extends {
                        fullname?: string;
                        isModule?: boolean;
                        methods?: {
                            name?: string;
                            fullQueryPath?: string;
                        }[];
                    } & {
                        fullname?: string;
                        isModule?: boolean;
                        methods?: {
                            name?: string;
                            fullQueryPath?: string;
                        }[] & ({
                            name?: string;
                            fullQueryPath?: string;
                        } & {
                            name?: string;
                            fullQueryPath?: string;
                        } & Record<Exclude<keyof I_24["methods"][number], keyof _41.QueryMethodDescriptor>, never>)[] & Record<Exclude<keyof I_24["methods"], keyof {
                            name?: string;
                            fullQueryPath?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_24, keyof _41.QueryServiceDescriptor>, never>>(object: I_24): _41.QueryServiceDescriptor;
                };
                QueryMethodDescriptor: {
                    encode(message: _41.QueryMethodDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _41.QueryMethodDescriptor;
                    fromJSON(object: any): _41.QueryMethodDescriptor;
                    toJSON(message: _41.QueryMethodDescriptor): unknown;
                    fromPartial<I_25 extends {
                        name?: string;
                        fullQueryPath?: string;
                    } & {
                        name?: string;
                        fullQueryPath?: string;
                    } & Record<Exclude<keyof I_25, keyof _41.QueryMethodDescriptor>, never>>(object: I_25): _41.QueryMethodDescriptor;
                };
            };
        }
        namespace snapshots {
            const v1beta1: {
                Snapshot: {
                    encode(message: _42.Snapshot, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.Snapshot;
                    fromJSON(object: any): _42.Snapshot;
                    toJSON(message: _42.Snapshot): unknown;
                    fromPartial<I extends {
                        height?: any;
                        format?: number;
                        chunks?: number;
                        hash?: Uint8Array;
                        metadata?: {
                            chunkHashes?: Uint8Array[];
                        };
                    } & {
                        height?: any;
                        format?: number;
                        chunks?: number;
                        hash?: Uint8Array;
                        metadata?: {
                            chunkHashes?: Uint8Array[];
                        } & {
                            chunkHashes?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["metadata"]["chunkHashes"], keyof Uint8Array[]>, never>;
                        } & Record<Exclude<keyof I["metadata"], "chunkHashes">, never>;
                    } & Record<Exclude<keyof I, keyof _42.Snapshot>, never>>(object: I): _42.Snapshot;
                };
                Metadata: {
                    encode(message: _42.Metadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.Metadata;
                    fromJSON(object: any): _42.Metadata;
                    toJSON(message: _42.Metadata): unknown;
                    fromPartial<I_1 extends {
                        chunkHashes?: Uint8Array[];
                    } & {
                        chunkHashes?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_1["chunkHashes"], keyof Uint8Array[]>, never>;
                    } & Record<Exclude<keyof I_1, "chunkHashes">, never>>(object: I_1): _42.Metadata;
                };
                SnapshotItem: {
                    encode(message: _42.SnapshotItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.SnapshotItem;
                    fromJSON(object: any): _42.SnapshotItem;
                    toJSON(message: _42.SnapshotItem): unknown;
                    fromPartial<I_2 extends {
                        store?: {
                            name?: string;
                        };
                        iavl?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                            version?: any;
                            height?: number;
                        };
                        extension?: {
                            name?: string;
                            format?: number;
                        };
                        extensionPayload?: {
                            payload?: Uint8Array;
                        };
                        kv?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        };
                        schema?: {
                            keys?: Uint8Array[];
                        };
                    } & {
                        store?: {
                            name?: string;
                        } & {
                            name?: string;
                        } & Record<Exclude<keyof I_2["store"], "name">, never>;
                        iavl?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                            version?: any;
                            height?: number;
                        } & {
                            key?: Uint8Array;
                            value?: Uint8Array;
                            version?: any;
                            height?: number;
                        } & Record<Exclude<keyof I_2["iavl"], keyof _42.SnapshotIAVLItem>, never>;
                        extension?: {
                            name?: string;
                            format?: number;
                        } & {
                            name?: string;
                            format?: number;
                        } & Record<Exclude<keyof I_2["extension"], keyof _42.SnapshotExtensionMeta>, never>;
                        extensionPayload?: {
                            payload?: Uint8Array;
                        } & {
                            payload?: Uint8Array;
                        } & Record<Exclude<keyof I_2["extensionPayload"], "payload">, never>;
                        kv?: {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        } & {
                            key?: Uint8Array;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_2["kv"], keyof _42.SnapshotKVItem>, never>;
                        schema?: {
                            keys?: Uint8Array[];
                        } & {
                            keys?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_2["schema"]["keys"], keyof Uint8Array[]>, never>;
                        } & Record<Exclude<keyof I_2["schema"], "keys">, never>;
                    } & Record<Exclude<keyof I_2, keyof _42.SnapshotItem>, never>>(object: I_2): _42.SnapshotItem;
                };
                SnapshotStoreItem: {
                    encode(message: _42.SnapshotStoreItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.SnapshotStoreItem;
                    fromJSON(object: any): _42.SnapshotStoreItem;
                    toJSON(message: _42.SnapshotStoreItem): unknown;
                    fromPartial<I_3 extends {
                        name?: string;
                    } & {
                        name?: string;
                    } & Record<Exclude<keyof I_3, "name">, never>>(object: I_3): _42.SnapshotStoreItem;
                };
                SnapshotIAVLItem: {
                    encode(message: _42.SnapshotIAVLItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.SnapshotIAVLItem;
                    fromJSON(object: any): _42.SnapshotIAVLItem;
                    toJSON(message: _42.SnapshotIAVLItem): unknown;
                    fromPartial<I_4 extends {
                        key?: Uint8Array;
                        value?: Uint8Array;
                        version?: any;
                        height?: number;
                    } & {
                        key?: Uint8Array;
                        value?: Uint8Array;
                        version?: any;
                        height?: number;
                    } & Record<Exclude<keyof I_4, keyof _42.SnapshotIAVLItem>, never>>(object: I_4): _42.SnapshotIAVLItem;
                };
                SnapshotExtensionMeta: {
                    encode(message: _42.SnapshotExtensionMeta, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.SnapshotExtensionMeta;
                    fromJSON(object: any): _42.SnapshotExtensionMeta;
                    toJSON(message: _42.SnapshotExtensionMeta): unknown;
                    fromPartial<I_5 extends {
                        name?: string;
                        format?: number;
                    } & {
                        name?: string;
                        format?: number;
                    } & Record<Exclude<keyof I_5, keyof _42.SnapshotExtensionMeta>, never>>(object: I_5): _42.SnapshotExtensionMeta;
                };
                SnapshotExtensionPayload: {
                    encode(message: _42.SnapshotExtensionPayload, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.SnapshotExtensionPayload;
                    fromJSON(object: any): _42.SnapshotExtensionPayload;
                    toJSON(message: _42.SnapshotExtensionPayload): unknown;
                    fromPartial<I_6 extends {
                        payload?: Uint8Array;
                    } & {
                        payload?: Uint8Array;
                    } & Record<Exclude<keyof I_6, "payload">, never>>(object: I_6): _42.SnapshotExtensionPayload;
                };
                SnapshotKVItem: {
                    encode(message: _42.SnapshotKVItem, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.SnapshotKVItem;
                    fromJSON(object: any): _42.SnapshotKVItem;
                    toJSON(message: _42.SnapshotKVItem): unknown;
                    fromPartial<I_7 extends {
                        key?: Uint8Array;
                        value?: Uint8Array;
                    } & {
                        key?: Uint8Array;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_7, keyof _42.SnapshotKVItem>, never>>(object: I_7): _42.SnapshotKVItem;
                };
                SnapshotSchema: {
                    encode(message: _42.SnapshotSchema, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _42.SnapshotSchema;
                    fromJSON(object: any): _42.SnapshotSchema;
                    toJSON(message: _42.SnapshotSchema): unknown;
                    fromPartial<I_8 extends {
                        keys?: Uint8Array[];
                    } & {
                        keys?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_8["keys"], keyof Uint8Array[]>, never>;
                    } & Record<Exclude<keyof I_8, "keys">, never>>(object: I_8): _42.SnapshotSchema;
                };
            };
        }
        namespace store {
            const v1beta1: {
                StoreKVPair: {
                    encode(message: _44.StoreKVPair, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _44.StoreKVPair;
                    fromJSON(object: any): _44.StoreKVPair;
                    toJSON(message: _44.StoreKVPair): unknown;
                    fromPartial<I extends {
                        storeKey?: string;
                        delete?: boolean;
                        key?: Uint8Array;
                        value?: Uint8Array;
                    } & {
                        storeKey?: string;
                        delete?: boolean;
                        key?: Uint8Array;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I, keyof _44.StoreKVPair>, never>>(object: I): _44.StoreKVPair;
                };
                CommitInfo: {
                    encode(message: _43.CommitInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _43.CommitInfo;
                    fromJSON(object: any): _43.CommitInfo;
                    toJSON(message: _43.CommitInfo): unknown;
                    fromPartial<I_1 extends {
                        version?: any;
                        storeInfos?: {
                            name?: string;
                            commitId?: {
                                version?: any;
                                hash?: Uint8Array;
                            };
                        }[];
                    } & {
                        version?: any;
                        storeInfos?: {
                            name?: string;
                            commitId?: {
                                version?: any;
                                hash?: Uint8Array;
                            };
                        }[] & ({
                            name?: string;
                            commitId?: {
                                version?: any;
                                hash?: Uint8Array;
                            };
                        } & {
                            name?: string;
                            commitId?: {
                                version?: any;
                                hash?: Uint8Array;
                            } & {
                                version?: any;
                                hash?: Uint8Array;
                            } & Record<Exclude<keyof I_1["storeInfos"][number]["commitId"], keyof _43.CommitID>, never>;
                        } & Record<Exclude<keyof I_1["storeInfos"][number], keyof _43.StoreInfo>, never>)[] & Record<Exclude<keyof I_1["storeInfos"], keyof {
                            name?: string;
                            commitId?: {
                                version?: any;
                                hash?: Uint8Array;
                            };
                        }[]>, never>;
                    } & Record<Exclude<keyof I_1, keyof _43.CommitInfo>, never>>(object: I_1): _43.CommitInfo;
                };
                StoreInfo: {
                    encode(message: _43.StoreInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _43.StoreInfo;
                    fromJSON(object: any): _43.StoreInfo;
                    toJSON(message: _43.StoreInfo): unknown;
                    fromPartial<I_2 extends {
                        name?: string;
                        commitId?: {
                            version?: any;
                            hash?: Uint8Array;
                        };
                    } & {
                        name?: string;
                        commitId?: {
                            version?: any;
                            hash?: Uint8Array;
                        } & {
                            version?: any;
                            hash?: Uint8Array;
                        } & Record<Exclude<keyof I_2["commitId"], keyof _43.CommitID>, never>;
                    } & Record<Exclude<keyof I_2, keyof _43.StoreInfo>, never>>(object: I_2): _43.StoreInfo;
                };
                CommitID: {
                    encode(message: _43.CommitID, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _43.CommitID;
                    fromJSON(object: any): _43.CommitID;
                    toJSON(message: _43.CommitID): unknown;
                    fromPartial<I_3 extends {
                        version?: any;
                        hash?: Uint8Array;
                    } & {
                        version?: any;
                        hash?: Uint8Array;
                    } & Record<Exclude<keyof I_3, keyof _43.CommitID>, never>>(object: I_3): _43.CommitID;
                };
            };
        }
        namespace tendermint {
            const v1beta1: {
                GetValidatorSetByHeightRequest: {
                    encode(message: _45.GetValidatorSetByHeightRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetValidatorSetByHeightRequest;
                    fromJSON(object: any): _45.GetValidatorSetByHeightRequest;
                    toJSON(message: _45.GetValidatorSetByHeightRequest): unknown;
                    fromPartial<I extends {
                        height?: any;
                        pagination?: {
                            key?: Uint8Array;
                            offset?: any;
                            limit?: any;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    } & {
                        height?: any;
                        pagination?: {
                            key?: Uint8Array;
                            offset?: any;
                            limit?: any;
                            countTotal?: boolean;
                            reverse?: boolean;
                        } & {
                            key?: Uint8Array;
                            offset?: any;
                            limit?: any;
                            countTotal?: boolean;
                            reverse?: boolean;
                        } & Record<Exclude<keyof I["pagination"], keyof _39.PageRequest>, never>;
                    } & Record<Exclude<keyof I, keyof _45.GetValidatorSetByHeightRequest>, never>>(object: I): _45.GetValidatorSetByHeightRequest;
                };
                GetValidatorSetByHeightResponse: {
                    encode(message: _45.GetValidatorSetByHeightResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetValidatorSetByHeightResponse;
                    fromJSON(object: any): _45.GetValidatorSetByHeightResponse;
                    toJSON(message: _45.GetValidatorSetByHeightResponse): unknown;
                    fromPartial<I_1 extends {
                        blockHeight?: any;
                        validators?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: any;
                            proposerPriority?: any;
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: any;
                        };
                    } & {
                        blockHeight?: any;
                        validators?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: any;
                            proposerPriority?: any;
                        }[] & ({
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: any;
                            proposerPriority?: any;
                        } & {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_1["validators"][number]["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                            votingPower?: any;
                            proposerPriority?: any;
                        } & Record<Exclude<keyof I_1["validators"][number], keyof _45.Validator>, never>)[] & Record<Exclude<keyof I_1["validators"], keyof {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: any;
                            proposerPriority?: any;
                        }[]>, never>;
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: any;
                        } & {
                            nextKey?: Uint8Array;
                            total?: any;
                        } & Record<Exclude<keyof I_1["pagination"], keyof _39.PageResponse>, never>;
                    } & Record<Exclude<keyof I_1, keyof _45.GetValidatorSetByHeightResponse>, never>>(object: I_1): _45.GetValidatorSetByHeightResponse;
                };
                GetLatestValidatorSetRequest: {
                    encode(message: _45.GetLatestValidatorSetRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetLatestValidatorSetRequest;
                    fromJSON(object: any): _45.GetLatestValidatorSetRequest;
                    toJSON(message: _45.GetLatestValidatorSetRequest): unknown;
                    fromPartial<I_2 extends {
                        pagination?: {
                            key?: Uint8Array;
                            offset?: any;
                            limit?: any;
                            countTotal?: boolean;
                            reverse?: boolean;
                        };
                    } & {
                        pagination?: {
                            key?: Uint8Array;
                            offset?: any;
                            limit?: any;
                            countTotal?: boolean;
                            reverse?: boolean;
                        } & {
                            key?: Uint8Array;
                            offset?: any;
                            limit?: any;
                            countTotal?: boolean;
                            reverse?: boolean;
                        } & Record<Exclude<keyof I_2["pagination"], keyof _39.PageRequest>, never>;
                    } & Record<Exclude<keyof I_2, "pagination">, never>>(object: I_2): _45.GetLatestValidatorSetRequest;
                };
                GetLatestValidatorSetResponse: {
                    encode(message: _45.GetLatestValidatorSetResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetLatestValidatorSetResponse;
                    fromJSON(object: any): _45.GetLatestValidatorSetResponse;
                    toJSON(message: _45.GetLatestValidatorSetResponse): unknown;
                    fromPartial<I_3 extends {
                        blockHeight?: any;
                        validators?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: any;
                            proposerPriority?: any;
                        }[];
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: any;
                        };
                    } & {
                        blockHeight?: any;
                        validators?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: any;
                            proposerPriority?: any;
                        }[] & ({
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: any;
                            proposerPriority?: any;
                        } & {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_3["validators"][number]["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                            votingPower?: any;
                            proposerPriority?: any;
                        } & Record<Exclude<keyof I_3["validators"][number], keyof _45.Validator>, never>)[] & Record<Exclude<keyof I_3["validators"], keyof {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            votingPower?: any;
                            proposerPriority?: any;
                        }[]>, never>;
                        pagination?: {
                            nextKey?: Uint8Array;
                            total?: any;
                        } & {
                            nextKey?: Uint8Array;
                            total?: any;
                        } & Record<Exclude<keyof I_3["pagination"], keyof _39.PageResponse>, never>;
                    } & Record<Exclude<keyof I_3, keyof _45.GetLatestValidatorSetResponse>, never>>(object: I_3): _45.GetLatestValidatorSetResponse;
                };
                Validator: {
                    encode(message: _45.Validator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.Validator;
                    fromJSON(object: any): _45.Validator;
                    toJSON(message: _45.Validator): unknown;
                    fromPartial<I_4 extends {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        votingPower?: any;
                        proposerPriority?: any;
                    } & {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_4["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                        votingPower?: any;
                        proposerPriority?: any;
                    } & Record<Exclude<keyof I_4, keyof _45.Validator>, never>>(object: I_4): _45.Validator;
                };
                GetBlockByHeightRequest: {
                    encode(message: _45.GetBlockByHeightRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetBlockByHeightRequest;
                    fromJSON(object: any): _45.GetBlockByHeightRequest;
                    toJSON(message: _45.GetBlockByHeightRequest): unknown;
                    fromPartial<I_5 extends {
                        height?: any;
                    } & {
                        height?: any;
                    } & Record<Exclude<keyof I_5, "height">, never>>(object: I_5): _45.GetBlockByHeightRequest;
                };
                GetBlockByHeightResponse: {
                    encode(message: _45.GetBlockByHeightResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetBlockByHeightResponse;
                    fromJSON(object: any): _45.GetBlockByHeightResponse;
                    toJSON(message: _45.GetBlockByHeightResponse): unknown;
                    fromPartial<I_6 extends {
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        block?: {
                            header?: {
                                version?: {
                                    block?: any;
                                    app?: any;
                                };
                                chainId?: string;
                                height?: any;
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            data?: {
                                txs?: Uint8Array[];
                            };
                            evidence?: {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                }[];
                            };
                            lastCommit?: {
                                height?: any;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        };
                    } & {
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        } & {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            } & {
                                total?: number;
                                hash?: Uint8Array;
                            } & Record<Exclude<keyof I_6["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                        } & Record<Exclude<keyof I_6["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                        block?: {
                            header?: {
                                version?: {
                                    block?: any;
                                    app?: any;
                                };
                                chainId?: string;
                                height?: any;
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            data?: {
                                txs?: Uint8Array[];
                            };
                            evidence?: {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                }[];
                            };
                            lastCommit?: {
                                height?: any;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        } & {
                            header?: {
                                version?: {
                                    block?: any;
                                    app?: any;
                                };
                                chainId?: string;
                                height?: any;
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            } & {
                                version?: {
                                    block?: any;
                                    app?: any;
                                } & {
                                    block?: any;
                                    app?: any;
                                } & Record<Exclude<keyof I_6["block"]["header"]["version"], keyof import("../tendermint/version/types").Consensus>, never>;
                                chainId?: string;
                                height?: any;
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                } & {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    } & {
                                        total?: number;
                                        hash?: Uint8Array;
                                    } & Record<Exclude<keyof I_6["block"]["header"]["lastBlockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                } & Record<Exclude<keyof I_6["block"]["header"]["lastBlockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            } & Record<Exclude<keyof I_6["block"]["header"], keyof import("../tendermint/types/types").Header>, never>;
                            data?: {
                                txs?: Uint8Array[];
                            } & {
                                txs?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_6["block"]["data"]["txs"], keyof Uint8Array[]>, never>;
                            } & Record<Exclude<keyof I_6["block"]["data"], "txs">, never>;
                            evidence?: {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                }[];
                            } & {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                }[] & ({
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                } & {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    } & {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        } & {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            } & {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                } & {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteA"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                            } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteA"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteA"], keyof import("../tendermint/types/types").Vote>, never>;
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        } & {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            } & {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                } & {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteB"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                            } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteB"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteB"], keyof import("../tendermint/types/types").Vote>, never>;
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"], keyof import("../tendermint/types/evidence").DuplicateVoteEvidence>, never>;
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    } & {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        } & {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            } & {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                } & {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    } & {
                                                        block?: any;
                                                        app?: any;
                                                    } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"]["version"], keyof import("../tendermint/version/types").Consensus>, never>;
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    } & {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        } & {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"]["lastBlockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                                    } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"]["lastBlockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"], keyof import("../tendermint/types/types").Header>, never>;
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                } & {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    } & {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        } & {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                                    } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[] & ({
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    } & {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["signatures"][number], keyof import("../tendermint/types/types").CommitSig>, never>)[] & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["signatures"], keyof {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[]>, never>;
                                                } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"], keyof import("../tendermint/types/types").Commit>, never>;
                                            } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"], keyof import("../tendermint/types/types").SignedHeader>, never>;
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            } & {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[] & ({
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                } & {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    } & {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["validators"][number]["pubKey"], keyof import("../tendermint/crypto/keys").PublicKey>, never>;
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["validators"][number], keyof import("../tendermint/types/validator").Validator>, never>)[] & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["validators"], keyof {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[]>, never>;
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                } & {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    } & {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["proposer"]["pubKey"], keyof import("../tendermint/crypto/keys").PublicKey>, never>;
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["proposer"], keyof import("../tendermint/types/validator").Validator>, never>;
                                                totalVotingPower?: any;
                                            } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"], keyof import("../tendermint/types/validator").ValidatorSet>, never>;
                                        } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"], keyof import("../tendermint/types/types").LightBlock>, never>;
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[] & ({
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        } & {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            } & {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["byzantineValidators"][number]["pubKey"], keyof import("../tendermint/crypto/keys").PublicKey>, never>;
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["byzantineValidators"][number], keyof import("../tendermint/types/validator").Validator>, never>)[] & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["byzantineValidators"], keyof {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[]>, never>;
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"], keyof import("../tendermint/types/evidence").LightClientAttackEvidence>, never>;
                                } & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"][number], keyof import("../tendermint/types/evidence").Evidence>, never>)[] & Record<Exclude<keyof I_6["block"]["evidence"]["evidence"], keyof {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                }[]>, never>;
                            } & Record<Exclude<keyof I_6["block"]["evidence"], "evidence">, never>;
                            lastCommit?: {
                                height?: any;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            } & {
                                height?: any;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                } & {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    } & {
                                        total?: number;
                                        hash?: Uint8Array;
                                    } & Record<Exclude<keyof I_6["block"]["lastCommit"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                } & Record<Exclude<keyof I_6["block"]["lastCommit"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[] & ({
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                } & {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                } & Record<Exclude<keyof I_6["block"]["lastCommit"]["signatures"][number], keyof import("../tendermint/types/types").CommitSig>, never>)[] & Record<Exclude<keyof I_6["block"]["lastCommit"]["signatures"], keyof {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[]>, never>;
                            } & Record<Exclude<keyof I_6["block"]["lastCommit"], keyof import("../tendermint/types/types").Commit>, never>;
                        } & Record<Exclude<keyof I_6["block"], keyof import("../tendermint/types/block").Block>, never>;
                    } & Record<Exclude<keyof I_6, keyof _45.GetBlockByHeightResponse>, never>>(object: I_6): _45.GetBlockByHeightResponse;
                };
                GetLatestBlockRequest: {
                    encode(_: _45.GetLatestBlockRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetLatestBlockRequest;
                    fromJSON(_: any): _45.GetLatestBlockRequest;
                    toJSON(_: _45.GetLatestBlockRequest): unknown;
                    fromPartial<I_7 extends {} & {} & Record<Exclude<keyof I_7, never>, never>>(_: I_7): _45.GetLatestBlockRequest;
                };
                GetLatestBlockResponse: {
                    encode(message: _45.GetLatestBlockResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetLatestBlockResponse;
                    fromJSON(object: any): _45.GetLatestBlockResponse;
                    toJSON(message: _45.GetLatestBlockResponse): unknown;
                    fromPartial<I_8 extends {
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        block?: {
                            header?: {
                                version?: {
                                    block?: any;
                                    app?: any;
                                };
                                chainId?: string;
                                height?: any;
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            data?: {
                                txs?: Uint8Array[];
                            };
                            evidence?: {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                }[];
                            };
                            lastCommit?: {
                                height?: any;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        };
                    } & {
                        blockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        } & {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            } & {
                                total?: number;
                                hash?: Uint8Array;
                            } & Record<Exclude<keyof I_8["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                        } & Record<Exclude<keyof I_8["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                        block?: {
                            header?: {
                                version?: {
                                    block?: any;
                                    app?: any;
                                };
                                chainId?: string;
                                height?: any;
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            };
                            data?: {
                                txs?: Uint8Array[];
                            };
                            evidence?: {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                }[];
                            };
                            lastCommit?: {
                                height?: any;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            };
                        } & {
                            header?: {
                                version?: {
                                    block?: any;
                                    app?: any;
                                };
                                chainId?: string;
                                height?: any;
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            } & {
                                version?: {
                                    block?: any;
                                    app?: any;
                                } & {
                                    block?: any;
                                    app?: any;
                                } & Record<Exclude<keyof I_8["block"]["header"]["version"], keyof import("../tendermint/version/types").Consensus>, never>;
                                chainId?: string;
                                height?: any;
                                time?: Date;
                                lastBlockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                } & {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    } & {
                                        total?: number;
                                        hash?: Uint8Array;
                                    } & Record<Exclude<keyof I_8["block"]["header"]["lastBlockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                } & Record<Exclude<keyof I_8["block"]["header"]["lastBlockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                lastCommitHash?: Uint8Array;
                                dataHash?: Uint8Array;
                                validatorsHash?: Uint8Array;
                                nextValidatorsHash?: Uint8Array;
                                consensusHash?: Uint8Array;
                                appHash?: Uint8Array;
                                lastResultsHash?: Uint8Array;
                                evidenceHash?: Uint8Array;
                                proposerAddress?: Uint8Array;
                            } & Record<Exclude<keyof I_8["block"]["header"], keyof import("../tendermint/types/types").Header>, never>;
                            data?: {
                                txs?: Uint8Array[];
                            } & {
                                txs?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_8["block"]["data"]["txs"], keyof Uint8Array[]>, never>;
                            } & Record<Exclude<keyof I_8["block"]["data"], "txs">, never>;
                            evidence?: {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                }[];
                            } & {
                                evidence?: {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                }[] & ({
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                } & {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    } & {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        } & {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            } & {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                } & {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteA"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                            } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteA"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteA"], keyof import("../tendermint/types/types").Vote>, never>;
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        } & {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            } & {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                } & {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteB"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                            } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteB"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteB"], keyof import("../tendermint/types/types").Vote>, never>;
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"], keyof import("../tendermint/types/evidence").DuplicateVoteEvidence>, never>;
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    } & {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        } & {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            } & {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                } & {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    } & {
                                                        block?: any;
                                                        app?: any;
                                                    } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"]["version"], keyof import("../tendermint/version/types").Consensus>, never>;
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    } & {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        } & {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"]["lastBlockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                                    } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"]["lastBlockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"], keyof import("../tendermint/types/types").Header>, never>;
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                } & {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    } & {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        } & {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                                    } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[] & ({
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    } & {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["signatures"][number], keyof import("../tendermint/types/types").CommitSig>, never>)[] & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["signatures"], keyof {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[]>, never>;
                                                } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"], keyof import("../tendermint/types/types").Commit>, never>;
                                            } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"], keyof import("../tendermint/types/types").SignedHeader>, never>;
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            } & {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[] & ({
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                } & {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    } & {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["validators"][number]["pubKey"], keyof import("../tendermint/crypto/keys").PublicKey>, never>;
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["validators"][number], keyof import("../tendermint/types/validator").Validator>, never>)[] & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["validators"], keyof {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[]>, never>;
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                } & {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    } & {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["proposer"]["pubKey"], keyof import("../tendermint/crypto/keys").PublicKey>, never>;
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["proposer"], keyof import("../tendermint/types/validator").Validator>, never>;
                                                totalVotingPower?: any;
                                            } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"], keyof import("../tendermint/types/validator").ValidatorSet>, never>;
                                        } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"], keyof import("../tendermint/types/types").LightBlock>, never>;
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[] & ({
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        } & {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            } & {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["byzantineValidators"][number]["pubKey"], keyof import("../tendermint/crypto/keys").PublicKey>, never>;
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["byzantineValidators"][number], keyof import("../tendermint/types/validator").Validator>, never>)[] & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["byzantineValidators"], keyof {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[]>, never>;
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"], keyof import("../tendermint/types/evidence").LightClientAttackEvidence>, never>;
                                } & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"][number], keyof import("../tendermint/types/evidence").Evidence>, never>)[] & Record<Exclude<keyof I_8["block"]["evidence"]["evidence"], keyof {
                                    duplicateVoteEvidence?: {
                                        voteA?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        voteB?: {
                                            type?: import("../tendermint/types/types").SignedMsgType;
                                            height?: any;
                                            round?: number;
                                            blockId?: {
                                                hash?: Uint8Array;
                                                partSetHeader?: {
                                                    total?: number;
                                                    hash?: Uint8Array;
                                                };
                                            };
                                            timestamp?: Date;
                                            validatorAddress?: Uint8Array;
                                            validatorIndex?: number;
                                            signature?: Uint8Array;
                                        };
                                        totalVotingPower?: any;
                                        validatorPower?: any;
                                        timestamp?: Date;
                                    };
                                    lightClientAttackEvidence?: {
                                        conflictingBlock?: {
                                            signedHeader?: {
                                                header?: {
                                                    version?: {
                                                        block?: any;
                                                        app?: any;
                                                    };
                                                    chainId?: string;
                                                    height?: any;
                                                    time?: Date;
                                                    lastBlockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    lastCommitHash?: Uint8Array;
                                                    dataHash?: Uint8Array;
                                                    validatorsHash?: Uint8Array;
                                                    nextValidatorsHash?: Uint8Array;
                                                    consensusHash?: Uint8Array;
                                                    appHash?: Uint8Array;
                                                    lastResultsHash?: Uint8Array;
                                                    evidenceHash?: Uint8Array;
                                                    proposerAddress?: Uint8Array;
                                                };
                                                commit?: {
                                                    height?: any;
                                                    round?: number;
                                                    blockId?: {
                                                        hash?: Uint8Array;
                                                        partSetHeader?: {
                                                            total?: number;
                                                            hash?: Uint8Array;
                                                        };
                                                    };
                                                    signatures?: {
                                                        blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                        validatorAddress?: Uint8Array;
                                                        timestamp?: Date;
                                                        signature?: Uint8Array;
                                                    }[];
                                                };
                                            };
                                            validatorSet?: {
                                                validators?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                }[];
                                                proposer?: {
                                                    address?: Uint8Array;
                                                    pubKey?: {
                                                        ed25519?: Uint8Array;
                                                        secp256k1?: Uint8Array;
                                                    };
                                                    votingPower?: any;
                                                    proposerPriority?: any;
                                                };
                                                totalVotingPower?: any;
                                            };
                                        };
                                        commonHeight?: any;
                                        byzantineValidators?: {
                                            address?: Uint8Array;
                                            pubKey?: {
                                                ed25519?: Uint8Array;
                                                secp256k1?: Uint8Array;
                                            };
                                            votingPower?: any;
                                            proposerPriority?: any;
                                        }[];
                                        totalVotingPower?: any;
                                        timestamp?: Date;
                                    };
                                }[]>, never>;
                            } & Record<Exclude<keyof I_8["block"]["evidence"], "evidence">, never>;
                            lastCommit?: {
                                height?: any;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                };
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[];
                            } & {
                                height?: any;
                                round?: number;
                                blockId?: {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    };
                                } & {
                                    hash?: Uint8Array;
                                    partSetHeader?: {
                                        total?: number;
                                        hash?: Uint8Array;
                                    } & {
                                        total?: number;
                                        hash?: Uint8Array;
                                    } & Record<Exclude<keyof I_8["block"]["lastCommit"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                } & Record<Exclude<keyof I_8["block"]["lastCommit"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                signatures?: {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[] & ({
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                } & {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                } & Record<Exclude<keyof I_8["block"]["lastCommit"]["signatures"][number], keyof import("../tendermint/types/types").CommitSig>, never>)[] & Record<Exclude<keyof I_8["block"]["lastCommit"]["signatures"], keyof {
                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                    validatorAddress?: Uint8Array;
                                    timestamp?: Date;
                                    signature?: Uint8Array;
                                }[]>, never>;
                            } & Record<Exclude<keyof I_8["block"]["lastCommit"], keyof import("../tendermint/types/types").Commit>, never>;
                        } & Record<Exclude<keyof I_8["block"], keyof import("../tendermint/types/block").Block>, never>;
                    } & Record<Exclude<keyof I_8, keyof _45.GetLatestBlockResponse>, never>>(object: I_8): _45.GetLatestBlockResponse;
                };
                GetSyncingRequest: {
                    encode(_: _45.GetSyncingRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetSyncingRequest;
                    fromJSON(_: any): _45.GetSyncingRequest;
                    toJSON(_: _45.GetSyncingRequest): unknown;
                    fromPartial<I_9 extends {} & {} & Record<Exclude<keyof I_9, never>, never>>(_: I_9): _45.GetSyncingRequest;
                };
                GetSyncingResponse: {
                    encode(message: _45.GetSyncingResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetSyncingResponse;
                    fromJSON(object: any): _45.GetSyncingResponse;
                    toJSON(message: _45.GetSyncingResponse): unknown;
                    fromPartial<I_10 extends {
                        syncing?: boolean;
                    } & {
                        syncing?: boolean;
                    } & Record<Exclude<keyof I_10, "syncing">, never>>(object: I_10): _45.GetSyncingResponse;
                };
                GetNodeInfoRequest: {
                    encode(_: _45.GetNodeInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetNodeInfoRequest;
                    fromJSON(_: any): _45.GetNodeInfoRequest;
                    toJSON(_: _45.GetNodeInfoRequest): unknown;
                    fromPartial<I_11 extends {} & {} & Record<Exclude<keyof I_11, never>, never>>(_: I_11): _45.GetNodeInfoRequest;
                };
                GetNodeInfoResponse: {
                    encode(message: _45.GetNodeInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.GetNodeInfoResponse;
                    fromJSON(object: any): _45.GetNodeInfoResponse;
                    toJSON(message: _45.GetNodeInfoResponse): unknown;
                    fromPartial<I_12 extends {
                        nodeInfo?: {
                            protocolVersion?: {
                                p2p?: any;
                                block?: any;
                                app?: any;
                            };
                            nodeId?: string;
                            listenAddr?: string;
                            network?: string;
                            version?: string;
                            channels?: Uint8Array;
                            moniker?: string;
                            other?: {
                                txIndex?: string;
                                rpcAddress?: string;
                            };
                        };
                        applicationVersion?: {
                            name?: string;
                            appName?: string;
                            version?: string;
                            gitCommit?: string;
                            buildTags?: string;
                            goVersion?: string;
                            buildDeps?: {
                                path?: string;
                                version?: string;
                                sum?: string;
                            }[];
                            cosmosSdkVersion?: string;
                        };
                    } & {
                        nodeInfo?: {
                            protocolVersion?: {
                                p2p?: any;
                                block?: any;
                                app?: any;
                            };
                            nodeId?: string;
                            listenAddr?: string;
                            network?: string;
                            version?: string;
                            channels?: Uint8Array;
                            moniker?: string;
                            other?: {
                                txIndex?: string;
                                rpcAddress?: string;
                            };
                        } & {
                            protocolVersion?: {
                                p2p?: any;
                                block?: any;
                                app?: any;
                            } & {
                                p2p?: any;
                                block?: any;
                                app?: any;
                            } & Record<Exclude<keyof I_12["nodeInfo"]["protocolVersion"], keyof import("../tendermint/p2p/types").ProtocolVersion>, never>;
                            nodeId?: string;
                            listenAddr?: string;
                            network?: string;
                            version?: string;
                            channels?: Uint8Array;
                            moniker?: string;
                            other?: {
                                txIndex?: string;
                                rpcAddress?: string;
                            } & {
                                txIndex?: string;
                                rpcAddress?: string;
                            } & Record<Exclude<keyof I_12["nodeInfo"]["other"], keyof import("../tendermint/p2p/types").NodeInfoOther>, never>;
                        } & Record<Exclude<keyof I_12["nodeInfo"], keyof import("../tendermint/p2p/types").NodeInfo>, never>;
                        applicationVersion?: {
                            name?: string;
                            appName?: string;
                            version?: string;
                            gitCommit?: string;
                            buildTags?: string;
                            goVersion?: string;
                            buildDeps?: {
                                path?: string;
                                version?: string;
                                sum?: string;
                            }[];
                            cosmosSdkVersion?: string;
                        } & {
                            name?: string;
                            appName?: string;
                            version?: string;
                            gitCommit?: string;
                            buildTags?: string;
                            goVersion?: string;
                            buildDeps?: {
                                path?: string;
                                version?: string;
                                sum?: string;
                            }[] & ({
                                path?: string;
                                version?: string;
                                sum?: string;
                            } & {
                                path?: string;
                                version?: string;
                                sum?: string;
                            } & Record<Exclude<keyof I_12["applicationVersion"]["buildDeps"][number], keyof _45.Module>, never>)[] & Record<Exclude<keyof I_12["applicationVersion"]["buildDeps"], keyof {
                                path?: string;
                                version?: string;
                                sum?: string;
                            }[]>, never>;
                            cosmosSdkVersion?: string;
                        } & Record<Exclude<keyof I_12["applicationVersion"], keyof _45.VersionInfo>, never>;
                    } & Record<Exclude<keyof I_12, keyof _45.GetNodeInfoResponse>, never>>(object: I_12): _45.GetNodeInfoResponse;
                };
                VersionInfo: {
                    encode(message: _45.VersionInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.VersionInfo;
                    fromJSON(object: any): _45.VersionInfo;
                    toJSON(message: _45.VersionInfo): unknown;
                    fromPartial<I_13 extends {
                        name?: string;
                        appName?: string;
                        version?: string;
                        gitCommit?: string;
                        buildTags?: string;
                        goVersion?: string;
                        buildDeps?: {
                            path?: string;
                            version?: string;
                            sum?: string;
                        }[];
                        cosmosSdkVersion?: string;
                    } & {
                        name?: string;
                        appName?: string;
                        version?: string;
                        gitCommit?: string;
                        buildTags?: string;
                        goVersion?: string;
                        buildDeps?: {
                            path?: string;
                            version?: string;
                            sum?: string;
                        }[] & ({
                            path?: string;
                            version?: string;
                            sum?: string;
                        } & {
                            path?: string;
                            version?: string;
                            sum?: string;
                        } & Record<Exclude<keyof I_13["buildDeps"][number], keyof _45.Module>, never>)[] & Record<Exclude<keyof I_13["buildDeps"], keyof {
                            path?: string;
                            version?: string;
                            sum?: string;
                        }[]>, never>;
                        cosmosSdkVersion?: string;
                    } & Record<Exclude<keyof I_13, keyof _45.VersionInfo>, never>>(object: I_13): _45.VersionInfo;
                };
                Module: {
                    encode(message: _45.Module, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _45.Module;
                    fromJSON(object: any): _45.Module;
                    toJSON(message: _45.Module): unknown;
                    fromPartial<I_14 extends {
                        path?: string;
                        version?: string;
                        sum?: string;
                    } & {
                        path?: string;
                        version?: string;
                        sum?: string;
                    } & Record<Exclude<keyof I_14, keyof _45.Module>, never>>(object: I_14): _45.Module;
                };
            };
        }
        const v1beta1: {
            Coin: {
                encode(message: _46.Coin, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.Coin;
                fromJSON(object: any): _46.Coin;
                toJSON(message: _46.Coin): unknown;
                fromPartial<I extends {
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I, keyof _46.Coin>, never>>(object: I): _46.Coin;
            };
            DecCoin: {
                encode(message: _46.DecCoin, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.DecCoin;
                fromJSON(object: any): _46.DecCoin;
                toJSON(message: _46.DecCoin): unknown;
                fromPartial<I_1 extends {
                    denom?: string;
                    amount?: string;
                } & {
                    denom?: string;
                    amount?: string;
                } & Record<Exclude<keyof I_1, keyof _46.DecCoin>, never>>(object: I_1): _46.DecCoin;
            };
            IntProto: {
                encode(message: _46.IntProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.IntProto;
                fromJSON(object: any): _46.IntProto;
                toJSON(message: _46.IntProto): unknown;
                fromPartial<I_2 extends {
                    int?: string;
                } & {
                    int?: string;
                } & Record<Exclude<keyof I_2, "int">, never>>(object: I_2): _46.IntProto;
            };
            DecProto: {
                encode(message: _46.DecProto, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _46.DecProto;
                fromJSON(object: any): _46.DecProto;
                toJSON(message: _46.DecProto): unknown;
                fromPartial<I_3 extends {
                    dec?: string;
                } & {
                    dec?: string;
                } & Record<Exclude<keyof I_3, "dec">, never>>(object: I_3): _46.DecProto;
            };
        };
    }
    namespace capability {
        const v1beta1: {
            GenesisOwners: {
                encode(message: _48.GenesisOwners, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _48.GenesisOwners;
                fromJSON(object: any): _48.GenesisOwners;
                toJSON(message: _48.GenesisOwners): unknown;
                fromPartial<I extends {
                    index?: any;
                    indexOwners?: {
                        owners?: {
                            module?: string;
                            name?: string;
                        }[];
                    };
                } & {
                    index?: any;
                    indexOwners?: {
                        owners?: {
                            module?: string;
                            name?: string;
                        }[];
                    } & {
                        owners?: {
                            module?: string;
                            name?: string;
                        }[] & ({
                            module?: string;
                            name?: string;
                        } & {
                            module?: string;
                            name?: string;
                        } & Record<Exclude<keyof I["indexOwners"]["owners"][number], keyof _47.Owner>, never>)[] & Record<Exclude<keyof I["indexOwners"]["owners"], keyof {
                            module?: string;
                            name?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["indexOwners"], "owners">, never>;
                } & Record<Exclude<keyof I, keyof _48.GenesisOwners>, never>>(object: I): _48.GenesisOwners;
            };
            GenesisState: {
                encode(message: _48.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _48.GenesisState;
                fromJSON(object: any): _48.GenesisState;
                toJSON(message: _48.GenesisState): unknown;
                fromPartial<I_1 extends {
                    index?: any;
                    owners?: {
                        index?: any;
                        indexOwners?: {
                            owners?: {
                                module?: string;
                                name?: string;
                            }[];
                        };
                    }[];
                } & {
                    index?: any;
                    owners?: {
                        index?: any;
                        indexOwners?: {
                            owners?: {
                                module?: string;
                                name?: string;
                            }[];
                        };
                    }[] & ({
                        index?: any;
                        indexOwners?: {
                            owners?: {
                                module?: string;
                                name?: string;
                            }[];
                        };
                    } & {
                        index?: any;
                        indexOwners?: {
                            owners?: {
                                module?: string;
                                name?: string;
                            }[];
                        } & {
                            owners?: {
                                module?: string;
                                name?: string;
                            }[] & ({
                                module?: string;
                                name?: string;
                            } & {
                                module?: string;
                                name?: string;
                            } & Record<Exclude<keyof I_1["owners"][number]["indexOwners"]["owners"][number], keyof _47.Owner>, never>)[] & Record<Exclude<keyof I_1["owners"][number]["indexOwners"]["owners"], keyof {
                                module?: string;
                                name?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_1["owners"][number]["indexOwners"], "owners">, never>;
                    } & Record<Exclude<keyof I_1["owners"][number], keyof _48.GenesisOwners>, never>)[] & Record<Exclude<keyof I_1["owners"], keyof {
                        index?: any;
                        indexOwners?: {
                            owners?: {
                                module?: string;
                                name?: string;
                            }[];
                        };
                    }[]>, never>;
                } & Record<Exclude<keyof I_1, keyof _48.GenesisState>, never>>(object: I_1): _48.GenesisState;
            };
            Capability: {
                encode(message: _47.Capability, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.Capability;
                fromJSON(object: any): _47.Capability;
                toJSON(message: _47.Capability): unknown;
                fromPartial<I_2 extends {
                    index?: any;
                } & {
                    index?: any;
                } & Record<Exclude<keyof I_2, "index">, never>>(object: I_2): _47.Capability;
            };
            Owner: {
                encode(message: _47.Owner, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.Owner;
                fromJSON(object: any): _47.Owner;
                toJSON(message: _47.Owner): unknown;
                fromPartial<I_3 extends {
                    module?: string;
                    name?: string;
                } & {
                    module?: string;
                    name?: string;
                } & Record<Exclude<keyof I_3, keyof _47.Owner>, never>>(object: I_3): _47.Owner;
            };
            CapabilityOwners: {
                encode(message: _47.CapabilityOwners, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _47.CapabilityOwners;
                fromJSON(object: any): _47.CapabilityOwners;
                toJSON(message: _47.CapabilityOwners): unknown;
                fromPartial<I_4 extends {
                    owners?: {
                        module?: string;
                        name?: string;
                    }[];
                } & {
                    owners?: {
                        module?: string;
                        name?: string;
                    }[] & ({
                        module?: string;
                        name?: string;
                    } & {
                        module?: string;
                        name?: string;
                    } & Record<Exclude<keyof I_4["owners"][number], keyof _47.Owner>, never>)[] & Record<Exclude<keyof I_4["owners"], keyof {
                        module?: string;
                        name?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_4, "owners">, never>>(object: I_4): _47.CapabilityOwners;
            };
        };
    }
    namespace crisis {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    verifyInvariant(value: _50.MsgVerifyInvariant): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    verifyInvariant(value: _50.MsgVerifyInvariant): {
                        typeUrl: string;
                        value: _50.MsgVerifyInvariant;
                    };
                };
                toJSON: {
                    verifyInvariant(value: _50.MsgVerifyInvariant): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    verifyInvariant(value: any): {
                        typeUrl: string;
                        value: _50.MsgVerifyInvariant;
                    };
                };
                fromPartial: {
                    verifyInvariant(value: _50.MsgVerifyInvariant): {
                        typeUrl: string;
                        value: _50.MsgVerifyInvariant;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.crisis.v1beta1.MsgVerifyInvariant": {
                    aminoType: string;
                    toAmino: ({ sender, invariantModuleName, invariantRoute }: _50.MsgVerifyInvariant) => {
                        sender: string;
                        invariant_module_name: string;
                        invariant_route: string;
                    };
                    fromAmino: ({ sender, invariant_module_name, invariant_route }: {
                        sender: string;
                        invariant_module_name: string;
                        invariant_route: string;
                    }) => _50.MsgVerifyInvariant;
                };
            };
            MsgVerifyInvariant: {
                encode(message: _50.MsgVerifyInvariant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _50.MsgVerifyInvariant;
                fromJSON(object: any): _50.MsgVerifyInvariant;
                toJSON(message: _50.MsgVerifyInvariant): unknown;
                fromPartial<I extends {
                    sender?: string;
                    invariantModuleName?: string;
                    invariantRoute?: string;
                } & {
                    sender?: string;
                    invariantModuleName?: string;
                    invariantRoute?: string;
                } & Record<Exclude<keyof I, keyof _50.MsgVerifyInvariant>, never>>(object: I): _50.MsgVerifyInvariant;
            };
            MsgVerifyInvariantResponse: {
                encode(_: _50.MsgVerifyInvariantResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _50.MsgVerifyInvariantResponse;
                fromJSON(_: any): _50.MsgVerifyInvariantResponse;
                toJSON(_: _50.MsgVerifyInvariantResponse): unknown;
                fromPartial<I_1 extends {} & {} & Record<Exclude<keyof I_1, never>, never>>(_: I_1): _50.MsgVerifyInvariantResponse;
            };
            GenesisState: {
                encode(message: _49.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _49.GenesisState;
                fromJSON(object: any): _49.GenesisState;
                toJSON(message: _49.GenesisState): unknown;
                fromPartial<I_2 extends {
                    constantFee?: {
                        denom?: string;
                        amount?: string;
                    };
                } & {
                    constantFee?: {
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_2["constantFee"], keyof _46.Coin>, never>;
                } & Record<Exclude<keyof I_2, "constantFee">, never>>(object: I_2): _49.GenesisState;
            };
        };
    }
    namespace crypto {
        const ed25519: {
            PubKey: {
                encode(message: _51.PubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.PubKey;
                fromJSON(object: any): _51.PubKey;
                toJSON(message: _51.PubKey): unknown;
                fromPartial<I extends {
                    key?: Uint8Array;
                } & {
                    key?: Uint8Array;
                } & Record<Exclude<keyof I, "key">, never>>(object: I): _51.PubKey;
            };
            PrivKey: {
                encode(message: _51.PrivKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _51.PrivKey;
                fromJSON(object: any): _51.PrivKey;
                toJSON(message: _51.PrivKey): unknown;
                fromPartial<I_1 extends {
                    key?: Uint8Array;
                } & {
                    key?: Uint8Array;
                } & Record<Exclude<keyof I_1, "key">, never>>(object: I_1): _51.PrivKey;
            };
        };
        namespace hd {
            const v1: {
                BIP44Params: {
                    encode(message: _52.BIP44Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _52.BIP44Params;
                    fromJSON(object: any): _52.BIP44Params;
                    toJSON(message: _52.BIP44Params): unknown;
                    fromPartial<I extends {
                        purpose?: number;
                        coinType?: number;
                        account?: number;
                        change?: boolean;
                        addressIndex?: number;
                    } & {
                        purpose?: number;
                        coinType?: number;
                        account?: number;
                        change?: boolean;
                        addressIndex?: number;
                    } & Record<Exclude<keyof I, keyof _52.BIP44Params>, never>>(object: I): _52.BIP44Params;
                };
            };
        }
        namespace keyring {
            const v1: {
                Record: {
                    encode(message: _53.Record, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _53.Record;
                    fromJSON(object: any): _53.Record;
                    toJSON(message: _53.Record): unknown;
                    fromPartial<I extends {
                        name?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        local?: {
                            privKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            privKeyType?: string;
                        };
                        ledger?: {
                            path?: {
                                purpose?: number;
                                coinType?: number;
                                account?: number;
                                change?: boolean;
                                addressIndex?: number;
                            };
                        };
                        multi?: {};
                        offline?: {};
                    } & {
                        name?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                        local?: {
                            privKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            privKeyType?: string;
                        } & {
                            privKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I["local"]["privKey"], keyof import("../google/protobuf/any").Any>, never>;
                            privKeyType?: string;
                        } & Record<Exclude<keyof I["local"], keyof _53.Record_Local>, never>;
                        ledger?: {
                            path?: {
                                purpose?: number;
                                coinType?: number;
                                account?: number;
                                change?: boolean;
                                addressIndex?: number;
                            };
                        } & {
                            path?: {
                                purpose?: number;
                                coinType?: number;
                                account?: number;
                                change?: boolean;
                                addressIndex?: number;
                            } & {
                                purpose?: number;
                                coinType?: number;
                                account?: number;
                                change?: boolean;
                                addressIndex?: number;
                            } & Record<Exclude<keyof I["ledger"]["path"], keyof _52.BIP44Params>, never>;
                        } & Record<Exclude<keyof I["ledger"], "path">, never>;
                        multi?: {} & {} & Record<Exclude<keyof I["multi"], never>, never>;
                        offline?: {} & {} & Record<Exclude<keyof I["offline"], never>, never>;
                    } & Record<Exclude<keyof I, keyof _53.Record>, never>>(object: I): _53.Record;
                };
                Record_Local: {
                    encode(message: _53.Record_Local, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _53.Record_Local;
                    fromJSON(object: any): _53.Record_Local;
                    toJSON(message: _53.Record_Local): unknown;
                    fromPartial<I_1 extends {
                        privKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        privKeyType?: string;
                    } & {
                        privKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_1["privKey"], keyof import("../google/protobuf/any").Any>, never>;
                        privKeyType?: string;
                    } & Record<Exclude<keyof I_1, keyof _53.Record_Local>, never>>(object: I_1): _53.Record_Local;
                };
                Record_Ledger: {
                    encode(message: _53.Record_Ledger, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _53.Record_Ledger;
                    fromJSON(object: any): _53.Record_Ledger;
                    toJSON(message: _53.Record_Ledger): unknown;
                    fromPartial<I_2 extends {
                        path?: {
                            purpose?: number;
                            coinType?: number;
                            account?: number;
                            change?: boolean;
                            addressIndex?: number;
                        };
                    } & {
                        path?: {
                            purpose?: number;
                            coinType?: number;
                            account?: number;
                            change?: boolean;
                            addressIndex?: number;
                        } & {
                            purpose?: number;
                            coinType?: number;
                            account?: number;
                            change?: boolean;
                            addressIndex?: number;
                        } & Record<Exclude<keyof I_2["path"], keyof _52.BIP44Params>, never>;
                    } & Record<Exclude<keyof I_2, "path">, never>>(object: I_2): _53.Record_Ledger;
                };
                Record_Multi: {
                    encode(_: _53.Record_Multi, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _53.Record_Multi;
                    fromJSON(_: any): _53.Record_Multi;
                    toJSON(_: _53.Record_Multi): unknown;
                    fromPartial<I_3 extends {} & {} & Record<Exclude<keyof I_3, never>, never>>(_: I_3): _53.Record_Multi;
                };
                Record_Offline: {
                    encode(_: _53.Record_Offline, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _53.Record_Offline;
                    fromJSON(_: any): _53.Record_Offline;
                    toJSON(_: _53.Record_Offline): unknown;
                    fromPartial<I_4 extends {} & {} & Record<Exclude<keyof I_4, never>, never>>(_: I_4): _53.Record_Offline;
                };
            };
        }
        const multisig: {
            LegacyAminoPubKey: {
                encode(message: _54.LegacyAminoPubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _54.LegacyAminoPubKey;
                fromJSON(object: any): _54.LegacyAminoPubKey;
                toJSON(message: _54.LegacyAminoPubKey): unknown;
                fromPartial<I extends {
                    threshold?: number;
                    publicKeys?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                } & {
                    threshold?: number;
                    publicKeys?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["publicKeys"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I["publicKeys"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                } & Record<Exclude<keyof I, keyof _54.LegacyAminoPubKey>, never>>(object: I): _54.LegacyAminoPubKey;
            };
        };
        const secp256k1: {
            PubKey: {
                encode(message: _55.PubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.PubKey;
                fromJSON(object: any): _55.PubKey;
                toJSON(message: _55.PubKey): unknown;
                fromPartial<I extends {
                    key?: Uint8Array;
                } & {
                    key?: Uint8Array;
                } & Record<Exclude<keyof I, "key">, never>>(object: I): _55.PubKey;
            };
            PrivKey: {
                encode(message: _55.PrivKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _55.PrivKey;
                fromJSON(object: any): _55.PrivKey;
                toJSON(message: _55.PrivKey): unknown;
                fromPartial<I_1 extends {
                    key?: Uint8Array;
                } & {
                    key?: Uint8Array;
                } & Record<Exclude<keyof I_1, "key">, never>>(object: I_1): _55.PrivKey;
            };
        };
        const secp256r1: {
            PubKey: {
                encode(message: _56.PubKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _56.PubKey;
                fromJSON(object: any): _56.PubKey;
                toJSON(message: _56.PubKey): unknown;
                fromPartial<I extends {
                    key?: Uint8Array;
                } & {
                    key?: Uint8Array;
                } & Record<Exclude<keyof I, "key">, never>>(object: I): _56.PubKey;
            };
            PrivKey: {
                encode(message: _56.PrivKey, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _56.PrivKey;
                fromJSON(object: any): _56.PrivKey;
                toJSON(message: _56.PrivKey): unknown;
                fromPartial<I_1 extends {
                    secret?: Uint8Array;
                } & {
                    secret?: Uint8Array;
                } & Record<Exclude<keyof I_1, "secret">, never>>(object: I_1): _56.PrivKey;
            };
        };
    }
    namespace distribution {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    setWithdrawAddress(value: _60.MsgSetWithdrawAddress): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    withdrawDelegatorReward(value: _60.MsgWithdrawDelegatorReward): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    withdrawValidatorCommission(value: _60.MsgWithdrawValidatorCommission): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    fundCommunityPool(value: _60.MsgFundCommunityPool): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    setWithdrawAddress(value: _60.MsgSetWithdrawAddress): {
                        typeUrl: string;
                        value: _60.MsgSetWithdrawAddress;
                    };
                    withdrawDelegatorReward(value: _60.MsgWithdrawDelegatorReward): {
                        typeUrl: string;
                        value: _60.MsgWithdrawDelegatorReward;
                    };
                    withdrawValidatorCommission(value: _60.MsgWithdrawValidatorCommission): {
                        typeUrl: string;
                        value: _60.MsgWithdrawValidatorCommission;
                    };
                    fundCommunityPool(value: _60.MsgFundCommunityPool): {
                        typeUrl: string;
                        value: _60.MsgFundCommunityPool;
                    };
                };
                toJSON: {
                    setWithdrawAddress(value: _60.MsgSetWithdrawAddress): {
                        typeUrl: string;
                        value: unknown;
                    };
                    withdrawDelegatorReward(value: _60.MsgWithdrawDelegatorReward): {
                        typeUrl: string;
                        value: unknown;
                    };
                    withdrawValidatorCommission(value: _60.MsgWithdrawValidatorCommission): {
                        typeUrl: string;
                        value: unknown;
                    };
                    fundCommunityPool(value: _60.MsgFundCommunityPool): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    setWithdrawAddress(value: any): {
                        typeUrl: string;
                        value: _60.MsgSetWithdrawAddress;
                    };
                    withdrawDelegatorReward(value: any): {
                        typeUrl: string;
                        value: _60.MsgWithdrawDelegatorReward;
                    };
                    withdrawValidatorCommission(value: any): {
                        typeUrl: string;
                        value: _60.MsgWithdrawValidatorCommission;
                    };
                    fundCommunityPool(value: any): {
                        typeUrl: string;
                        value: _60.MsgFundCommunityPool;
                    };
                };
                fromPartial: {
                    setWithdrawAddress(value: _60.MsgSetWithdrawAddress): {
                        typeUrl: string;
                        value: _60.MsgSetWithdrawAddress;
                    };
                    withdrawDelegatorReward(value: _60.MsgWithdrawDelegatorReward): {
                        typeUrl: string;
                        value: _60.MsgWithdrawDelegatorReward;
                    };
                    withdrawValidatorCommission(value: _60.MsgWithdrawValidatorCommission): {
                        typeUrl: string;
                        value: _60.MsgWithdrawValidatorCommission;
                    };
                    fundCommunityPool(value: _60.MsgFundCommunityPool): {
                        typeUrl: string;
                        value: _60.MsgFundCommunityPool;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.distribution.v1beta1.MsgSetWithdrawAddress": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, withdrawAddress }: _60.MsgSetWithdrawAddress) => {
                        delegator_address: string;
                        withdraw_address: string;
                    };
                    fromAmino: ({ delegator_address, withdraw_address }: {
                        delegator_address: string;
                        withdraw_address: string;
                    }) => _60.MsgSetWithdrawAddress;
                };
                "/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress }: _60.MsgWithdrawDelegatorReward) => {
                        delegator_address: string;
                        validator_address: string;
                    };
                    fromAmino: ({ delegator_address, validator_address }: {
                        delegator_address: string;
                        validator_address: string;
                    }) => _60.MsgWithdrawDelegatorReward;
                };
                "/cosmos.distribution.v1beta1.MsgWithdrawValidatorCommission": {
                    aminoType: string;
                    toAmino: ({ validatorAddress }: _60.MsgWithdrawValidatorCommission) => {
                        validator_address: string;
                    };
                    fromAmino: ({ validator_address }: {
                        validator_address: string;
                    }) => _60.MsgWithdrawValidatorCommission;
                };
                "/cosmos.distribution.v1beta1.MsgFundCommunityPool": {
                    aminoType: string;
                    toAmino: ({ amount, depositor }: _60.MsgFundCommunityPool) => {
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        depositor: string;
                    };
                    fromAmino: ({ amount, depositor }: {
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        depositor: string;
                    }) => _60.MsgFundCommunityPool;
                };
            };
            MsgSetWithdrawAddress: {
                encode(message: _60.MsgSetWithdrawAddress, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgSetWithdrawAddress;
                fromJSON(object: any): _60.MsgSetWithdrawAddress;
                toJSON(message: _60.MsgSetWithdrawAddress): unknown;
                fromPartial<I extends {
                    delegatorAddress?: string;
                    withdrawAddress?: string;
                } & {
                    delegatorAddress?: string;
                    withdrawAddress?: string;
                } & Record<Exclude<keyof I, keyof _60.MsgSetWithdrawAddress>, never>>(object: I): _60.MsgSetWithdrawAddress;
            };
            MsgSetWithdrawAddressResponse: {
                encode(_: _60.MsgSetWithdrawAddressResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgSetWithdrawAddressResponse;
                fromJSON(_: any): _60.MsgSetWithdrawAddressResponse;
                toJSON(_: _60.MsgSetWithdrawAddressResponse): unknown;
                fromPartial<I_1 extends {} & {} & Record<Exclude<keyof I_1, never>, never>>(_: I_1): _60.MsgSetWithdrawAddressResponse;
            };
            MsgWithdrawDelegatorReward: {
                encode(message: _60.MsgWithdrawDelegatorReward, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgWithdrawDelegatorReward;
                fromJSON(object: any): _60.MsgWithdrawDelegatorReward;
                toJSON(message: _60.MsgWithdrawDelegatorReward): unknown;
                fromPartial<I_2 extends {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                } & {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                } & Record<Exclude<keyof I_2, keyof _60.MsgWithdrawDelegatorReward>, never>>(object: I_2): _60.MsgWithdrawDelegatorReward;
            };
            MsgWithdrawDelegatorRewardResponse: {
                encode(message: _60.MsgWithdrawDelegatorRewardResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgWithdrawDelegatorRewardResponse;
                fromJSON(object: any): _60.MsgWithdrawDelegatorRewardResponse;
                toJSON(message: _60.MsgWithdrawDelegatorRewardResponse): unknown;
                fromPartial<I_3 extends {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_3["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_3["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_3, "amount">, never>>(object: I_3): _60.MsgWithdrawDelegatorRewardResponse;
            };
            MsgWithdrawValidatorCommission: {
                encode(message: _60.MsgWithdrawValidatorCommission, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgWithdrawValidatorCommission;
                fromJSON(object: any): _60.MsgWithdrawValidatorCommission;
                toJSON(message: _60.MsgWithdrawValidatorCommission): unknown;
                fromPartial<I_4 extends {
                    validatorAddress?: string;
                } & {
                    validatorAddress?: string;
                } & Record<Exclude<keyof I_4, "validatorAddress">, never>>(object: I_4): _60.MsgWithdrawValidatorCommission;
            };
            MsgWithdrawValidatorCommissionResponse: {
                encode(message: _60.MsgWithdrawValidatorCommissionResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgWithdrawValidatorCommissionResponse;
                fromJSON(object: any): _60.MsgWithdrawValidatorCommissionResponse;
                toJSON(message: _60.MsgWithdrawValidatorCommissionResponse): unknown;
                fromPartial<I_5 extends {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_5["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_5["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_5, "amount">, never>>(object: I_5): _60.MsgWithdrawValidatorCommissionResponse;
            };
            MsgFundCommunityPool: {
                encode(message: _60.MsgFundCommunityPool, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgFundCommunityPool;
                fromJSON(object: any): _60.MsgFundCommunityPool;
                toJSON(message: _60.MsgFundCommunityPool): unknown;
                fromPartial<I_6 extends {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    depositor?: string;
                } & {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_6["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_6["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    depositor?: string;
                } & Record<Exclude<keyof I_6, keyof _60.MsgFundCommunityPool>, never>>(object: I_6): _60.MsgFundCommunityPool;
            };
            MsgFundCommunityPoolResponse: {
                encode(_: _60.MsgFundCommunityPoolResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _60.MsgFundCommunityPoolResponse;
                fromJSON(_: any): _60.MsgFundCommunityPoolResponse;
                toJSON(_: _60.MsgFundCommunityPoolResponse): unknown;
                fromPartial<I_7 extends {} & {} & Record<Exclude<keyof I_7, never>, never>>(_: I_7): _60.MsgFundCommunityPoolResponse;
            };
            QueryParamsRequest: {
                encode(_: _59.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryParamsRequest;
                fromJSON(_: any): _59.QueryParamsRequest;
                toJSON(_: _59.QueryParamsRequest): unknown;
                fromPartial<I_8 extends {} & {} & Record<Exclude<keyof I_8, never>, never>>(_: I_8): _59.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _59.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryParamsResponse;
                fromJSON(object: any): _59.QueryParamsResponse;
                toJSON(message: _59.QueryParamsResponse): unknown;
                fromPartial<I_9 extends {
                    params?: {
                        communityTax?: string;
                        baseProposerReward?: string;
                        bonusProposerReward?: string;
                        withdrawAddrEnabled?: boolean;
                    };
                } & {
                    params?: {
                        communityTax?: string;
                        baseProposerReward?: string;
                        bonusProposerReward?: string;
                        withdrawAddrEnabled?: boolean;
                    } & {
                        communityTax?: string;
                        baseProposerReward?: string;
                        bonusProposerReward?: string;
                        withdrawAddrEnabled?: boolean;
                    } & Record<Exclude<keyof I_9["params"], keyof _57.Params>, never>;
                } & Record<Exclude<keyof I_9, "params">, never>>(object: I_9): _59.QueryParamsResponse;
            };
            QueryValidatorOutstandingRewardsRequest: {
                encode(message: _59.QueryValidatorOutstandingRewardsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryValidatorOutstandingRewardsRequest;
                fromJSON(object: any): _59.QueryValidatorOutstandingRewardsRequest;
                toJSON(message: _59.QueryValidatorOutstandingRewardsRequest): unknown;
                fromPartial<I_10 extends {
                    validatorAddress?: string;
                } & {
                    validatorAddress?: string;
                } & Record<Exclude<keyof I_10, "validatorAddress">, never>>(object: I_10): _59.QueryValidatorOutstandingRewardsRequest;
            };
            QueryValidatorOutstandingRewardsResponse: {
                encode(message: _59.QueryValidatorOutstandingRewardsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryValidatorOutstandingRewardsResponse;
                fromJSON(object: any): _59.QueryValidatorOutstandingRewardsResponse;
                toJSON(message: _59.QueryValidatorOutstandingRewardsResponse): unknown;
                fromPartial<I_11 extends {
                    rewards?: {
                        rewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                } & {
                    rewards?: {
                        rewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        rewards?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_11["rewards"]["rewards"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_11["rewards"]["rewards"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_11["rewards"], "rewards">, never>;
                } & Record<Exclude<keyof I_11, "rewards">, never>>(object: I_11): _59.QueryValidatorOutstandingRewardsResponse;
            };
            QueryValidatorCommissionRequest: {
                encode(message: _59.QueryValidatorCommissionRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryValidatorCommissionRequest;
                fromJSON(object: any): _59.QueryValidatorCommissionRequest;
                toJSON(message: _59.QueryValidatorCommissionRequest): unknown;
                fromPartial<I_12 extends {
                    validatorAddress?: string;
                } & {
                    validatorAddress?: string;
                } & Record<Exclude<keyof I_12, "validatorAddress">, never>>(object: I_12): _59.QueryValidatorCommissionRequest;
            };
            QueryValidatorCommissionResponse: {
                encode(message: _59.QueryValidatorCommissionResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryValidatorCommissionResponse;
                fromJSON(object: any): _59.QueryValidatorCommissionResponse;
                toJSON(message: _59.QueryValidatorCommissionResponse): unknown;
                fromPartial<I_13 extends {
                    commission?: {
                        commission?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                } & {
                    commission?: {
                        commission?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        commission?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_13["commission"]["commission"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_13["commission"]["commission"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_13["commission"], "commission">, never>;
                } & Record<Exclude<keyof I_13, "commission">, never>>(object: I_13): _59.QueryValidatorCommissionResponse;
            };
            QueryValidatorSlashesRequest: {
                encode(message: _59.QueryValidatorSlashesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryValidatorSlashesRequest;
                fromJSON(object: any): _59.QueryValidatorSlashesRequest;
                toJSON(message: _59.QueryValidatorSlashesRequest): unknown;
                fromPartial<I_14 extends {
                    validatorAddress?: string;
                    startingHeight?: any;
                    endingHeight?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    validatorAddress?: string;
                    startingHeight?: any;
                    endingHeight?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_14["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_14, keyof _59.QueryValidatorSlashesRequest>, never>>(object: I_14): _59.QueryValidatorSlashesRequest;
            };
            QueryValidatorSlashesResponse: {
                encode(message: _59.QueryValidatorSlashesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryValidatorSlashesResponse;
                fromJSON(object: any): _59.QueryValidatorSlashesResponse;
                toJSON(message: _59.QueryValidatorSlashesResponse): unknown;
                fromPartial<I_15 extends {
                    slashes?: {
                        validatorPeriod?: any;
                        fraction?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    slashes?: {
                        validatorPeriod?: any;
                        fraction?: string;
                    }[] & ({
                        validatorPeriod?: any;
                        fraction?: string;
                    } & {
                        validatorPeriod?: any;
                        fraction?: string;
                    } & Record<Exclude<keyof I_15["slashes"][number], keyof _57.ValidatorSlashEvent>, never>)[] & Record<Exclude<keyof I_15["slashes"], keyof {
                        validatorPeriod?: any;
                        fraction?: string;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_15["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_15, keyof _59.QueryValidatorSlashesResponse>, never>>(object: I_15): _59.QueryValidatorSlashesResponse;
            };
            QueryDelegationRewardsRequest: {
                encode(message: _59.QueryDelegationRewardsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDelegationRewardsRequest;
                fromJSON(object: any): _59.QueryDelegationRewardsRequest;
                toJSON(message: _59.QueryDelegationRewardsRequest): unknown;
                fromPartial<I_16 extends {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                } & {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                } & Record<Exclude<keyof I_16, keyof _59.QueryDelegationRewardsRequest>, never>>(object: I_16): _59.QueryDelegationRewardsRequest;
            };
            QueryDelegationRewardsResponse: {
                encode(message: _59.QueryDelegationRewardsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDelegationRewardsResponse;
                fromJSON(object: any): _59.QueryDelegationRewardsResponse;
                toJSON(message: _59.QueryDelegationRewardsResponse): unknown;
                fromPartial<I_17 extends {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_17["rewards"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_17["rewards"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_17, "rewards">, never>>(object: I_17): _59.QueryDelegationRewardsResponse;
            };
            QueryDelegationTotalRewardsRequest: {
                encode(message: _59.QueryDelegationTotalRewardsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDelegationTotalRewardsRequest;
                fromJSON(object: any): _59.QueryDelegationTotalRewardsRequest;
                toJSON(message: _59.QueryDelegationTotalRewardsRequest): unknown;
                fromPartial<I_18 extends {
                    delegatorAddress?: string;
                } & {
                    delegatorAddress?: string;
                } & Record<Exclude<keyof I_18, "delegatorAddress">, never>>(object: I_18): _59.QueryDelegationTotalRewardsRequest;
            };
            QueryDelegationTotalRewardsResponse: {
                encode(message: _59.QueryDelegationTotalRewardsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDelegationTotalRewardsResponse;
                fromJSON(object: any): _59.QueryDelegationTotalRewardsResponse;
                toJSON(message: _59.QueryDelegationTotalRewardsResponse): unknown;
                fromPartial<I_19 extends {
                    rewards?: {
                        validatorAddress?: string;
                        reward?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    total?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    rewards?: {
                        validatorAddress?: string;
                        reward?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        validatorAddress?: string;
                        reward?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        validatorAddress?: string;
                        reward?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_19["rewards"][number]["reward"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_19["rewards"][number]["reward"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_19["rewards"][number], keyof _57.DelegationDelegatorReward>, never>)[] & Record<Exclude<keyof I_19["rewards"], keyof {
                        validatorAddress?: string;
                        reward?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                    total?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_19["total"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_19["total"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_19, keyof _59.QueryDelegationTotalRewardsResponse>, never>>(object: I_19): _59.QueryDelegationTotalRewardsResponse;
            };
            QueryDelegatorValidatorsRequest: {
                encode(message: _59.QueryDelegatorValidatorsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDelegatorValidatorsRequest;
                fromJSON(object: any): _59.QueryDelegatorValidatorsRequest;
                toJSON(message: _59.QueryDelegatorValidatorsRequest): unknown;
                fromPartial<I_20 extends {
                    delegatorAddress?: string;
                } & {
                    delegatorAddress?: string;
                } & Record<Exclude<keyof I_20, "delegatorAddress">, never>>(object: I_20): _59.QueryDelegatorValidatorsRequest;
            };
            QueryDelegatorValidatorsResponse: {
                encode(message: _59.QueryDelegatorValidatorsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDelegatorValidatorsResponse;
                fromJSON(object: any): _59.QueryDelegatorValidatorsResponse;
                toJSON(message: _59.QueryDelegatorValidatorsResponse): unknown;
                fromPartial<I_21 extends {
                    validators?: string[];
                } & {
                    validators?: string[] & string[] & Record<Exclude<keyof I_21["validators"], keyof string[]>, never>;
                } & Record<Exclude<keyof I_21, "validators">, never>>(object: I_21): _59.QueryDelegatorValidatorsResponse;
            };
            QueryDelegatorWithdrawAddressRequest: {
                encode(message: _59.QueryDelegatorWithdrawAddressRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDelegatorWithdrawAddressRequest;
                fromJSON(object: any): _59.QueryDelegatorWithdrawAddressRequest;
                toJSON(message: _59.QueryDelegatorWithdrawAddressRequest): unknown;
                fromPartial<I_22 extends {
                    delegatorAddress?: string;
                } & {
                    delegatorAddress?: string;
                } & Record<Exclude<keyof I_22, "delegatorAddress">, never>>(object: I_22): _59.QueryDelegatorWithdrawAddressRequest;
            };
            QueryDelegatorWithdrawAddressResponse: {
                encode(message: _59.QueryDelegatorWithdrawAddressResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryDelegatorWithdrawAddressResponse;
                fromJSON(object: any): _59.QueryDelegatorWithdrawAddressResponse;
                toJSON(message: _59.QueryDelegatorWithdrawAddressResponse): unknown;
                fromPartial<I_23 extends {
                    withdrawAddress?: string;
                } & {
                    withdrawAddress?: string;
                } & Record<Exclude<keyof I_23, "withdrawAddress">, never>>(object: I_23): _59.QueryDelegatorWithdrawAddressResponse;
            };
            QueryCommunityPoolRequest: {
                encode(_: _59.QueryCommunityPoolRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryCommunityPoolRequest;
                fromJSON(_: any): _59.QueryCommunityPoolRequest;
                toJSON(_: _59.QueryCommunityPoolRequest): unknown;
                fromPartial<I_24 extends {} & {} & Record<Exclude<keyof I_24, never>, never>>(_: I_24): _59.QueryCommunityPoolRequest;
            };
            QueryCommunityPoolResponse: {
                encode(message: _59.QueryCommunityPoolResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _59.QueryCommunityPoolResponse;
                fromJSON(object: any): _59.QueryCommunityPoolResponse;
                toJSON(message: _59.QueryCommunityPoolResponse): unknown;
                fromPartial<I_25 extends {
                    pool?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    pool?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_25["pool"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_25["pool"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_25, "pool">, never>>(object: I_25): _59.QueryCommunityPoolResponse;
            };
            DelegatorWithdrawInfo: {
                encode(message: _58.DelegatorWithdrawInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.DelegatorWithdrawInfo;
                fromJSON(object: any): _58.DelegatorWithdrawInfo;
                toJSON(message: _58.DelegatorWithdrawInfo): unknown;
                fromPartial<I_26 extends {
                    delegatorAddress?: string;
                    withdrawAddress?: string;
                } & {
                    delegatorAddress?: string;
                    withdrawAddress?: string;
                } & Record<Exclude<keyof I_26, keyof _58.DelegatorWithdrawInfo>, never>>(object: I_26): _58.DelegatorWithdrawInfo;
            };
            ValidatorOutstandingRewardsRecord: {
                encode(message: _58.ValidatorOutstandingRewardsRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.ValidatorOutstandingRewardsRecord;
                fromJSON(object: any): _58.ValidatorOutstandingRewardsRecord;
                toJSON(message: _58.ValidatorOutstandingRewardsRecord): unknown;
                fromPartial<I_27 extends {
                    validatorAddress?: string;
                    outstandingRewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    validatorAddress?: string;
                    outstandingRewards?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_27["outstandingRewards"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_27["outstandingRewards"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_27, keyof _58.ValidatorOutstandingRewardsRecord>, never>>(object: I_27): _58.ValidatorOutstandingRewardsRecord;
            };
            ValidatorAccumulatedCommissionRecord: {
                encode(message: _58.ValidatorAccumulatedCommissionRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.ValidatorAccumulatedCommissionRecord;
                fromJSON(object: any): _58.ValidatorAccumulatedCommissionRecord;
                toJSON(message: _58.ValidatorAccumulatedCommissionRecord): unknown;
                fromPartial<I_28 extends {
                    validatorAddress?: string;
                    accumulated?: {
                        commission?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                } & {
                    validatorAddress?: string;
                    accumulated?: {
                        commission?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        commission?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_28["accumulated"]["commission"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_28["accumulated"]["commission"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_28["accumulated"], "commission">, never>;
                } & Record<Exclude<keyof I_28, keyof _58.ValidatorAccumulatedCommissionRecord>, never>>(object: I_28): _58.ValidatorAccumulatedCommissionRecord;
            };
            ValidatorHistoricalRewardsRecord: {
                encode(message: _58.ValidatorHistoricalRewardsRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.ValidatorHistoricalRewardsRecord;
                fromJSON(object: any): _58.ValidatorHistoricalRewardsRecord;
                toJSON(message: _58.ValidatorHistoricalRewardsRecord): unknown;
                fromPartial<I_29 extends {
                    validatorAddress?: string;
                    period?: any;
                    rewards?: {
                        cumulativeRewardRatio?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        referenceCount?: number;
                    };
                } & {
                    validatorAddress?: string;
                    period?: any;
                    rewards?: {
                        cumulativeRewardRatio?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        referenceCount?: number;
                    } & {
                        cumulativeRewardRatio?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_29["rewards"]["cumulativeRewardRatio"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_29["rewards"]["cumulativeRewardRatio"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        referenceCount?: number;
                    } & Record<Exclude<keyof I_29["rewards"], keyof _57.ValidatorHistoricalRewards>, never>;
                } & Record<Exclude<keyof I_29, keyof _58.ValidatorHistoricalRewardsRecord>, never>>(object: I_29): _58.ValidatorHistoricalRewardsRecord;
            };
            ValidatorCurrentRewardsRecord: {
                encode(message: _58.ValidatorCurrentRewardsRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.ValidatorCurrentRewardsRecord;
                fromJSON(object: any): _58.ValidatorCurrentRewardsRecord;
                toJSON(message: _58.ValidatorCurrentRewardsRecord): unknown;
                fromPartial<I_30 extends {
                    validatorAddress?: string;
                    rewards?: {
                        rewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        period?: any;
                    };
                } & {
                    validatorAddress?: string;
                    rewards?: {
                        rewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        period?: any;
                    } & {
                        rewards?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_30["rewards"]["rewards"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_30["rewards"]["rewards"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        period?: any;
                    } & Record<Exclude<keyof I_30["rewards"], keyof _57.ValidatorCurrentRewards>, never>;
                } & Record<Exclude<keyof I_30, keyof _58.ValidatorCurrentRewardsRecord>, never>>(object: I_30): _58.ValidatorCurrentRewardsRecord;
            };
            DelegatorStartingInfoRecord: {
                encode(message: _58.DelegatorStartingInfoRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.DelegatorStartingInfoRecord;
                fromJSON(object: any): _58.DelegatorStartingInfoRecord;
                toJSON(message: _58.DelegatorStartingInfoRecord): unknown;
                fromPartial<I_31 extends {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    startingInfo?: {
                        previousPeriod?: any;
                        stake?: string;
                        height?: any;
                    };
                } & {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    startingInfo?: {
                        previousPeriod?: any;
                        stake?: string;
                        height?: any;
                    } & {
                        previousPeriod?: any;
                        stake?: string;
                        height?: any;
                    } & Record<Exclude<keyof I_31["startingInfo"], keyof _57.DelegatorStartingInfo>, never>;
                } & Record<Exclude<keyof I_31, keyof _58.DelegatorStartingInfoRecord>, never>>(object: I_31): _58.DelegatorStartingInfoRecord;
            };
            ValidatorSlashEventRecord: {
                encode(message: _58.ValidatorSlashEventRecord, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.ValidatorSlashEventRecord;
                fromJSON(object: any): _58.ValidatorSlashEventRecord;
                toJSON(message: _58.ValidatorSlashEventRecord): unknown;
                fromPartial<I_32 extends {
                    validatorAddress?: string;
                    height?: any;
                    period?: any;
                    validatorSlashEvent?: {
                        validatorPeriod?: any;
                        fraction?: string;
                    };
                } & {
                    validatorAddress?: string;
                    height?: any;
                    period?: any;
                    validatorSlashEvent?: {
                        validatorPeriod?: any;
                        fraction?: string;
                    } & {
                        validatorPeriod?: any;
                        fraction?: string;
                    } & Record<Exclude<keyof I_32["validatorSlashEvent"], keyof _57.ValidatorSlashEvent>, never>;
                } & Record<Exclude<keyof I_32, keyof _58.ValidatorSlashEventRecord>, never>>(object: I_32): _58.ValidatorSlashEventRecord;
            };
            GenesisState: {
                encode(message: _58.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _58.GenesisState;
                fromJSON(object: any): _58.GenesisState;
                toJSON(message: _58.GenesisState): unknown;
                fromPartial<I_33 extends {
                    params?: {
                        communityTax?: string;
                        baseProposerReward?: string;
                        bonusProposerReward?: string;
                        withdrawAddrEnabled?: boolean;
                    };
                    feePool?: {
                        communityPool?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                    delegatorWithdrawInfos?: {
                        delegatorAddress?: string;
                        withdrawAddress?: string;
                    }[];
                    previousProposer?: string;
                    outstandingRewards?: {
                        validatorAddress?: string;
                        outstandingRewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    validatorAccumulatedCommissions?: {
                        validatorAddress?: string;
                        accumulated?: {
                            commission?: {
                                denom?: string;
                                amount?: string;
                            }[];
                        };
                    }[];
                    validatorHistoricalRewards?: {
                        validatorAddress?: string;
                        period?: any;
                        rewards?: {
                            cumulativeRewardRatio?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            referenceCount?: number;
                        };
                    }[];
                    validatorCurrentRewards?: {
                        validatorAddress?: string;
                        rewards?: {
                            rewards?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            period?: any;
                        };
                    }[];
                    delegatorStartingInfos?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        startingInfo?: {
                            previousPeriod?: any;
                            stake?: string;
                            height?: any;
                        };
                    }[];
                    validatorSlashEvents?: {
                        validatorAddress?: string;
                        height?: any;
                        period?: any;
                        validatorSlashEvent?: {
                            validatorPeriod?: any;
                            fraction?: string;
                        };
                    }[];
                } & {
                    params?: {
                        communityTax?: string;
                        baseProposerReward?: string;
                        bonusProposerReward?: string;
                        withdrawAddrEnabled?: boolean;
                    } & {
                        communityTax?: string;
                        baseProposerReward?: string;
                        bonusProposerReward?: string;
                        withdrawAddrEnabled?: boolean;
                    } & Record<Exclude<keyof I_33["params"], keyof _57.Params>, never>;
                    feePool?: {
                        communityPool?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        communityPool?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_33["feePool"]["communityPool"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_33["feePool"]["communityPool"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_33["feePool"], "communityPool">, never>;
                    delegatorWithdrawInfos?: {
                        delegatorAddress?: string;
                        withdrawAddress?: string;
                    }[] & ({
                        delegatorAddress?: string;
                        withdrawAddress?: string;
                    } & {
                        delegatorAddress?: string;
                        withdrawAddress?: string;
                    } & Record<Exclude<keyof I_33["delegatorWithdrawInfos"][number], keyof _58.DelegatorWithdrawInfo>, never>)[] & Record<Exclude<keyof I_33["delegatorWithdrawInfos"], keyof {
                        delegatorAddress?: string;
                        withdrawAddress?: string;
                    }[]>, never>;
                    previousProposer?: string;
                    outstandingRewards?: {
                        validatorAddress?: string;
                        outstandingRewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        validatorAddress?: string;
                        outstandingRewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        validatorAddress?: string;
                        outstandingRewards?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_33["outstandingRewards"][number]["outstandingRewards"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_33["outstandingRewards"][number]["outstandingRewards"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_33["outstandingRewards"][number], keyof _58.ValidatorOutstandingRewardsRecord>, never>)[] & Record<Exclude<keyof I_33["outstandingRewards"], keyof {
                        validatorAddress?: string;
                        outstandingRewards?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                    validatorAccumulatedCommissions?: {
                        validatorAddress?: string;
                        accumulated?: {
                            commission?: {
                                denom?: string;
                                amount?: string;
                            }[];
                        };
                    }[] & ({
                        validatorAddress?: string;
                        accumulated?: {
                            commission?: {
                                denom?: string;
                                amount?: string;
                            }[];
                        };
                    } & {
                        validatorAddress?: string;
                        accumulated?: {
                            commission?: {
                                denom?: string;
                                amount?: string;
                            }[];
                        } & {
                            commission?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I_33["validatorAccumulatedCommissions"][number]["accumulated"]["commission"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_33["validatorAccumulatedCommissions"][number]["accumulated"]["commission"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_33["validatorAccumulatedCommissions"][number]["accumulated"], "commission">, never>;
                    } & Record<Exclude<keyof I_33["validatorAccumulatedCommissions"][number], keyof _58.ValidatorAccumulatedCommissionRecord>, never>)[] & Record<Exclude<keyof I_33["validatorAccumulatedCommissions"], keyof {
                        validatorAddress?: string;
                        accumulated?: {
                            commission?: {
                                denom?: string;
                                amount?: string;
                            }[];
                        };
                    }[]>, never>;
                    validatorHistoricalRewards?: {
                        validatorAddress?: string;
                        period?: any;
                        rewards?: {
                            cumulativeRewardRatio?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            referenceCount?: number;
                        };
                    }[] & ({
                        validatorAddress?: string;
                        period?: any;
                        rewards?: {
                            cumulativeRewardRatio?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            referenceCount?: number;
                        };
                    } & {
                        validatorAddress?: string;
                        period?: any;
                        rewards?: {
                            cumulativeRewardRatio?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            referenceCount?: number;
                        } & {
                            cumulativeRewardRatio?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I_33["validatorHistoricalRewards"][number]["rewards"]["cumulativeRewardRatio"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_33["validatorHistoricalRewards"][number]["rewards"]["cumulativeRewardRatio"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            referenceCount?: number;
                        } & Record<Exclude<keyof I_33["validatorHistoricalRewards"][number]["rewards"], keyof _57.ValidatorHistoricalRewards>, never>;
                    } & Record<Exclude<keyof I_33["validatorHistoricalRewards"][number], keyof _58.ValidatorHistoricalRewardsRecord>, never>)[] & Record<Exclude<keyof I_33["validatorHistoricalRewards"], keyof {
                        validatorAddress?: string;
                        period?: any;
                        rewards?: {
                            cumulativeRewardRatio?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            referenceCount?: number;
                        };
                    }[]>, never>;
                    validatorCurrentRewards?: {
                        validatorAddress?: string;
                        rewards?: {
                            rewards?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            period?: any;
                        };
                    }[] & ({
                        validatorAddress?: string;
                        rewards?: {
                            rewards?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            period?: any;
                        };
                    } & {
                        validatorAddress?: string;
                        rewards?: {
                            rewards?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            period?: any;
                        } & {
                            rewards?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I_33["validatorCurrentRewards"][number]["rewards"]["rewards"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_33["validatorCurrentRewards"][number]["rewards"]["rewards"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            period?: any;
                        } & Record<Exclude<keyof I_33["validatorCurrentRewards"][number]["rewards"], keyof _57.ValidatorCurrentRewards>, never>;
                    } & Record<Exclude<keyof I_33["validatorCurrentRewards"][number], keyof _58.ValidatorCurrentRewardsRecord>, never>)[] & Record<Exclude<keyof I_33["validatorCurrentRewards"], keyof {
                        validatorAddress?: string;
                        rewards?: {
                            rewards?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            period?: any;
                        };
                    }[]>, never>;
                    delegatorStartingInfos?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        startingInfo?: {
                            previousPeriod?: any;
                            stake?: string;
                            height?: any;
                        };
                    }[] & ({
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        startingInfo?: {
                            previousPeriod?: any;
                            stake?: string;
                            height?: any;
                        };
                    } & {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        startingInfo?: {
                            previousPeriod?: any;
                            stake?: string;
                            height?: any;
                        } & {
                            previousPeriod?: any;
                            stake?: string;
                            height?: any;
                        } & Record<Exclude<keyof I_33["delegatorStartingInfos"][number]["startingInfo"], keyof _57.DelegatorStartingInfo>, never>;
                    } & Record<Exclude<keyof I_33["delegatorStartingInfos"][number], keyof _58.DelegatorStartingInfoRecord>, never>)[] & Record<Exclude<keyof I_33["delegatorStartingInfos"], keyof {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        startingInfo?: {
                            previousPeriod?: any;
                            stake?: string;
                            height?: any;
                        };
                    }[]>, never>;
                    validatorSlashEvents?: {
                        validatorAddress?: string;
                        height?: any;
                        period?: any;
                        validatorSlashEvent?: {
                            validatorPeriod?: any;
                            fraction?: string;
                        };
                    }[] & ({
                        validatorAddress?: string;
                        height?: any;
                        period?: any;
                        validatorSlashEvent?: {
                            validatorPeriod?: any;
                            fraction?: string;
                        };
                    } & {
                        validatorAddress?: string;
                        height?: any;
                        period?: any;
                        validatorSlashEvent?: {
                            validatorPeriod?: any;
                            fraction?: string;
                        } & {
                            validatorPeriod?: any;
                            fraction?: string;
                        } & Record<Exclude<keyof I_33["validatorSlashEvents"][number]["validatorSlashEvent"], keyof _57.ValidatorSlashEvent>, never>;
                    } & Record<Exclude<keyof I_33["validatorSlashEvents"][number], keyof _58.ValidatorSlashEventRecord>, never>)[] & Record<Exclude<keyof I_33["validatorSlashEvents"], keyof {
                        validatorAddress?: string;
                        height?: any;
                        period?: any;
                        validatorSlashEvent?: {
                            validatorPeriod?: any;
                            fraction?: string;
                        };
                    }[]>, never>;
                } & Record<Exclude<keyof I_33, keyof _58.GenesisState>, never>>(object: I_33): _58.GenesisState;
            };
            Params: {
                encode(message: _57.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.Params;
                fromJSON(object: any): _57.Params;
                toJSON(message: _57.Params): unknown;
                fromPartial<I_34 extends {
                    communityTax?: string;
                    baseProposerReward?: string;
                    bonusProposerReward?: string;
                    withdrawAddrEnabled?: boolean;
                } & {
                    communityTax?: string;
                    baseProposerReward?: string;
                    bonusProposerReward?: string;
                    withdrawAddrEnabled?: boolean;
                } & Record<Exclude<keyof I_34, keyof _57.Params>, never>>(object: I_34): _57.Params;
            };
            ValidatorHistoricalRewards: {
                encode(message: _57.ValidatorHistoricalRewards, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.ValidatorHistoricalRewards;
                fromJSON(object: any): _57.ValidatorHistoricalRewards;
                toJSON(message: _57.ValidatorHistoricalRewards): unknown;
                fromPartial<I_35 extends {
                    cumulativeRewardRatio?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    referenceCount?: number;
                } & {
                    cumulativeRewardRatio?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_35["cumulativeRewardRatio"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_35["cumulativeRewardRatio"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    referenceCount?: number;
                } & Record<Exclude<keyof I_35, keyof _57.ValidatorHistoricalRewards>, never>>(object: I_35): _57.ValidatorHistoricalRewards;
            };
            ValidatorCurrentRewards: {
                encode(message: _57.ValidatorCurrentRewards, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.ValidatorCurrentRewards;
                fromJSON(object: any): _57.ValidatorCurrentRewards;
                toJSON(message: _57.ValidatorCurrentRewards): unknown;
                fromPartial<I_36 extends {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    period?: any;
                } & {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_36["rewards"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_36["rewards"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    period?: any;
                } & Record<Exclude<keyof I_36, keyof _57.ValidatorCurrentRewards>, never>>(object: I_36): _57.ValidatorCurrentRewards;
            };
            ValidatorAccumulatedCommission: {
                encode(message: _57.ValidatorAccumulatedCommission, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.ValidatorAccumulatedCommission;
                fromJSON(object: any): _57.ValidatorAccumulatedCommission;
                toJSON(message: _57.ValidatorAccumulatedCommission): unknown;
                fromPartial<I_37 extends {
                    commission?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    commission?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_37["commission"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_37["commission"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_37, "commission">, never>>(object: I_37): _57.ValidatorAccumulatedCommission;
            };
            ValidatorOutstandingRewards: {
                encode(message: _57.ValidatorOutstandingRewards, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.ValidatorOutstandingRewards;
                fromJSON(object: any): _57.ValidatorOutstandingRewards;
                toJSON(message: _57.ValidatorOutstandingRewards): unknown;
                fromPartial<I_38 extends {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    rewards?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_38["rewards"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_38["rewards"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_38, "rewards">, never>>(object: I_38): _57.ValidatorOutstandingRewards;
            };
            ValidatorSlashEvent: {
                encode(message: _57.ValidatorSlashEvent, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.ValidatorSlashEvent;
                fromJSON(object: any): _57.ValidatorSlashEvent;
                toJSON(message: _57.ValidatorSlashEvent): unknown;
                fromPartial<I_39 extends {
                    validatorPeriod?: any;
                    fraction?: string;
                } & {
                    validatorPeriod?: any;
                    fraction?: string;
                } & Record<Exclude<keyof I_39, keyof _57.ValidatorSlashEvent>, never>>(object: I_39): _57.ValidatorSlashEvent;
            };
            ValidatorSlashEvents: {
                encode(message: _57.ValidatorSlashEvents, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.ValidatorSlashEvents;
                fromJSON(object: any): _57.ValidatorSlashEvents;
                toJSON(message: _57.ValidatorSlashEvents): unknown;
                fromPartial<I_40 extends {
                    validatorSlashEvents?: {
                        validatorPeriod?: any;
                        fraction?: string;
                    }[];
                } & {
                    validatorSlashEvents?: {
                        validatorPeriod?: any;
                        fraction?: string;
                    }[] & ({
                        validatorPeriod?: any;
                        fraction?: string;
                    } & {
                        validatorPeriod?: any;
                        fraction?: string;
                    } & Record<Exclude<keyof I_40["validatorSlashEvents"][number], keyof _57.ValidatorSlashEvent>, never>)[] & Record<Exclude<keyof I_40["validatorSlashEvents"], keyof {
                        validatorPeriod?: any;
                        fraction?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_40, "validatorSlashEvents">, never>>(object: I_40): _57.ValidatorSlashEvents;
            };
            FeePool: {
                encode(message: _57.FeePool, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.FeePool;
                fromJSON(object: any): _57.FeePool;
                toJSON(message: _57.FeePool): unknown;
                fromPartial<I_41 extends {
                    communityPool?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    communityPool?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_41["communityPool"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_41["communityPool"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_41, "communityPool">, never>>(object: I_41): _57.FeePool;
            };
            CommunityPoolSpendProposal: {
                encode(message: _57.CommunityPoolSpendProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.CommunityPoolSpendProposal;
                fromJSON(object: any): _57.CommunityPoolSpendProposal;
                toJSON(message: _57.CommunityPoolSpendProposal): unknown;
                fromPartial<I_42 extends {
                    title?: string;
                    description?: string;
                    recipient?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    title?: string;
                    description?: string;
                    recipient?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_42["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_42["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_42, keyof _57.CommunityPoolSpendProposal>, never>>(object: I_42): _57.CommunityPoolSpendProposal;
            };
            DelegatorStartingInfo: {
                encode(message: _57.DelegatorStartingInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.DelegatorStartingInfo;
                fromJSON(object: any): _57.DelegatorStartingInfo;
                toJSON(message: _57.DelegatorStartingInfo): unknown;
                fromPartial<I_43 extends {
                    previousPeriod?: any;
                    stake?: string;
                    height?: any;
                } & {
                    previousPeriod?: any;
                    stake?: string;
                    height?: any;
                } & Record<Exclude<keyof I_43, keyof _57.DelegatorStartingInfo>, never>>(object: I_43): _57.DelegatorStartingInfo;
            };
            DelegationDelegatorReward: {
                encode(message: _57.DelegationDelegatorReward, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.DelegationDelegatorReward;
                fromJSON(object: any): _57.DelegationDelegatorReward;
                toJSON(message: _57.DelegationDelegatorReward): unknown;
                fromPartial<I_44 extends {
                    validatorAddress?: string;
                    reward?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    validatorAddress?: string;
                    reward?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_44["reward"][number], keyof _46.DecCoin>, never>)[] & Record<Exclude<keyof I_44["reward"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_44, keyof _57.DelegationDelegatorReward>, never>>(object: I_44): _57.DelegationDelegatorReward;
            };
            CommunityPoolSpendProposalWithDeposit: {
                encode(message: _57.CommunityPoolSpendProposalWithDeposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _57.CommunityPoolSpendProposalWithDeposit;
                fromJSON(object: any): _57.CommunityPoolSpendProposalWithDeposit;
                toJSON(message: _57.CommunityPoolSpendProposalWithDeposit): unknown;
                fromPartial<I_45 extends {
                    title?: string;
                    description?: string;
                    recipient?: string;
                    amount?: string;
                    deposit?: string;
                } & {
                    title?: string;
                    description?: string;
                    recipient?: string;
                    amount?: string;
                    deposit?: string;
                } & Record<Exclude<keyof I_45, keyof _57.CommunityPoolSpendProposalWithDeposit>, never>>(object: I_45): _57.CommunityPoolSpendProposalWithDeposit;
            };
        };
    }
    namespace evidence {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    submitEvidence(value: _64.MsgSubmitEvidence): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    submitEvidence(value: _64.MsgSubmitEvidence): {
                        typeUrl: string;
                        value: _64.MsgSubmitEvidence;
                    };
                };
                toJSON: {
                    submitEvidence(value: _64.MsgSubmitEvidence): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    submitEvidence(value: any): {
                        typeUrl: string;
                        value: _64.MsgSubmitEvidence;
                    };
                };
                fromPartial: {
                    submitEvidence(value: _64.MsgSubmitEvidence): {
                        typeUrl: string;
                        value: _64.MsgSubmitEvidence;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.evidence.v1beta1.MsgSubmitEvidence": {
                    aminoType: string;
                    toAmino: ({ submitter, evidence }: _64.MsgSubmitEvidence) => {
                        submitter: string;
                        evidence: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ submitter, evidence }: {
                        submitter: string;
                        evidence: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _64.MsgSubmitEvidence;
                };
            };
            MsgSubmitEvidence: {
                encode(message: _64.MsgSubmitEvidence, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _64.MsgSubmitEvidence;
                fromJSON(object: any): _64.MsgSubmitEvidence;
                toJSON(message: _64.MsgSubmitEvidence): unknown;
                fromPartial<I extends {
                    submitter?: string;
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    submitter?: string;
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["evidence"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I, keyof _64.MsgSubmitEvidence>, never>>(object: I): _64.MsgSubmitEvidence;
            };
            MsgSubmitEvidenceResponse: {
                encode(message: _64.MsgSubmitEvidenceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _64.MsgSubmitEvidenceResponse;
                fromJSON(object: any): _64.MsgSubmitEvidenceResponse;
                toJSON(message: _64.MsgSubmitEvidenceResponse): unknown;
                fromPartial<I_1 extends {
                    hash?: Uint8Array;
                } & {
                    hash?: Uint8Array;
                } & Record<Exclude<keyof I_1, "hash">, never>>(object: I_1): _64.MsgSubmitEvidenceResponse;
            };
            QueryEvidenceRequest: {
                encode(message: _63.QueryEvidenceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.QueryEvidenceRequest;
                fromJSON(object: any): _63.QueryEvidenceRequest;
                toJSON(message: _63.QueryEvidenceRequest): unknown;
                fromPartial<I_2 extends {
                    evidenceHash?: Uint8Array;
                } & {
                    evidenceHash?: Uint8Array;
                } & Record<Exclude<keyof I_2, "evidenceHash">, never>>(object: I_2): _63.QueryEvidenceRequest;
            };
            QueryEvidenceResponse: {
                encode(message: _63.QueryEvidenceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.QueryEvidenceResponse;
                fromJSON(object: any): _63.QueryEvidenceResponse;
                toJSON(message: _63.QueryEvidenceResponse): unknown;
                fromPartial<I_3 extends {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_3["evidence"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I_3, "evidence">, never>>(object: I_3): _63.QueryEvidenceResponse;
            };
            QueryAllEvidenceRequest: {
                encode(message: _63.QueryAllEvidenceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.QueryAllEvidenceRequest;
                fromJSON(object: any): _63.QueryAllEvidenceRequest;
                toJSON(message: _63.QueryAllEvidenceRequest): unknown;
                fromPartial<I_4 extends {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_4["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_4, "pagination">, never>>(object: I_4): _63.QueryAllEvidenceRequest;
            };
            QueryAllEvidenceResponse: {
                encode(message: _63.QueryAllEvidenceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _63.QueryAllEvidenceResponse;
                fromJSON(object: any): _63.QueryAllEvidenceResponse;
                toJSON(message: _63.QueryAllEvidenceResponse): unknown;
                fromPartial<I_5 extends {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_5["evidence"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_5["evidence"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_5["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_5, keyof _63.QueryAllEvidenceResponse>, never>>(object: I_5): _63.QueryAllEvidenceResponse;
            };
            GenesisState: {
                encode(message: _62.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _62.GenesisState;
                fromJSON(object: any): _62.GenesisState;
                toJSON(message: _62.GenesisState): unknown;
                fromPartial<I_6 extends {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                } & {
                    evidence?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_6["evidence"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_6["evidence"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                } & Record<Exclude<keyof I_6, "evidence">, never>>(object: I_6): _62.GenesisState;
            };
            Equivocation: {
                encode(message: _61.Equivocation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _61.Equivocation;
                fromJSON(object: any): _61.Equivocation;
                toJSON(message: _61.Equivocation): unknown;
                fromPartial<I_7 extends {
                    height?: any;
                    time?: Date;
                    power?: any;
                    consensusAddress?: string;
                } & {
                    height?: any;
                    time?: Date;
                    power?: any;
                    consensusAddress?: string;
                } & Record<Exclude<keyof I_7, keyof _61.Equivocation>, never>>(object: I_7): _61.Equivocation;
            };
        };
    }
    namespace feegrant {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    grantAllowance(value: _68.MsgGrantAllowance): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    revokeAllowance(value: _68.MsgRevokeAllowance): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    grantAllowance(value: _68.MsgGrantAllowance): {
                        typeUrl: string;
                        value: _68.MsgGrantAllowance;
                    };
                    revokeAllowance(value: _68.MsgRevokeAllowance): {
                        typeUrl: string;
                        value: _68.MsgRevokeAllowance;
                    };
                };
                toJSON: {
                    grantAllowance(value: _68.MsgGrantAllowance): {
                        typeUrl: string;
                        value: unknown;
                    };
                    revokeAllowance(value: _68.MsgRevokeAllowance): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    grantAllowance(value: any): {
                        typeUrl: string;
                        value: _68.MsgGrantAllowance;
                    };
                    revokeAllowance(value: any): {
                        typeUrl: string;
                        value: _68.MsgRevokeAllowance;
                    };
                };
                fromPartial: {
                    grantAllowance(value: _68.MsgGrantAllowance): {
                        typeUrl: string;
                        value: _68.MsgGrantAllowance;
                    };
                    revokeAllowance(value: _68.MsgRevokeAllowance): {
                        typeUrl: string;
                        value: _68.MsgRevokeAllowance;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.feegrant.v1beta1.MsgGrantAllowance": {
                    aminoType: string;
                    toAmino: ({ granter, grantee, allowance }: _68.MsgGrantAllowance) => {
                        granter: string;
                        grantee: string;
                        allowance: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ granter, grantee, allowance }: {
                        granter: string;
                        grantee: string;
                        allowance: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _68.MsgGrantAllowance;
                };
                "/cosmos.feegrant.v1beta1.MsgRevokeAllowance": {
                    aminoType: string;
                    toAmino: ({ granter, grantee }: _68.MsgRevokeAllowance) => {
                        granter: string;
                        grantee: string;
                    };
                    fromAmino: ({ granter, grantee }: {
                        granter: string;
                        grantee: string;
                    }) => _68.MsgRevokeAllowance;
                };
            };
            MsgGrantAllowance: {
                encode(message: _68.MsgGrantAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _68.MsgGrantAllowance;
                fromJSON(object: any): _68.MsgGrantAllowance;
                toJSON(message: _68.MsgGrantAllowance): unknown;
                fromPartial<I extends {
                    granter?: string;
                    grantee?: string;
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    granter?: string;
                    grantee?: string;
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["allowance"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I, keyof _68.MsgGrantAllowance>, never>>(object: I): _68.MsgGrantAllowance;
            };
            MsgGrantAllowanceResponse: {
                encode(_: _68.MsgGrantAllowanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _68.MsgGrantAllowanceResponse;
                fromJSON(_: any): _68.MsgGrantAllowanceResponse;
                toJSON(_: _68.MsgGrantAllowanceResponse): unknown;
                fromPartial<I_1 extends {} & {} & Record<Exclude<keyof I_1, never>, never>>(_: I_1): _68.MsgGrantAllowanceResponse;
            };
            MsgRevokeAllowance: {
                encode(message: _68.MsgRevokeAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _68.MsgRevokeAllowance;
                fromJSON(object: any): _68.MsgRevokeAllowance;
                toJSON(message: _68.MsgRevokeAllowance): unknown;
                fromPartial<I_2 extends {
                    granter?: string;
                    grantee?: string;
                } & {
                    granter?: string;
                    grantee?: string;
                } & Record<Exclude<keyof I_2, keyof _68.MsgRevokeAllowance>, never>>(object: I_2): _68.MsgRevokeAllowance;
            };
            MsgRevokeAllowanceResponse: {
                encode(_: _68.MsgRevokeAllowanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _68.MsgRevokeAllowanceResponse;
                fromJSON(_: any): _68.MsgRevokeAllowanceResponse;
                toJSON(_: _68.MsgRevokeAllowanceResponse): unknown;
                fromPartial<I_3 extends {} & {} & Record<Exclude<keyof I_3, never>, never>>(_: I_3): _68.MsgRevokeAllowanceResponse;
            };
            QueryAllowanceRequest: {
                encode(message: _67.QueryAllowanceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QueryAllowanceRequest;
                fromJSON(object: any): _67.QueryAllowanceRequest;
                toJSON(message: _67.QueryAllowanceRequest): unknown;
                fromPartial<I_4 extends {
                    granter?: string;
                    grantee?: string;
                } & {
                    granter?: string;
                    grantee?: string;
                } & Record<Exclude<keyof I_4, keyof _67.QueryAllowanceRequest>, never>>(object: I_4): _67.QueryAllowanceRequest;
            };
            QueryAllowanceResponse: {
                encode(message: _67.QueryAllowanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QueryAllowanceResponse;
                fromJSON(object: any): _67.QueryAllowanceResponse;
                toJSON(message: _67.QueryAllowanceResponse): unknown;
                fromPartial<I_5 extends {
                    allowance?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                } & {
                    allowance?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_5["allowance"]["allowance"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_5["allowance"], keyof _65.Grant>, never>;
                } & Record<Exclude<keyof I_5, "allowance">, never>>(object: I_5): _67.QueryAllowanceResponse;
            };
            QueryAllowancesRequest: {
                encode(message: _67.QueryAllowancesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QueryAllowancesRequest;
                fromJSON(object: any): _67.QueryAllowancesRequest;
                toJSON(message: _67.QueryAllowancesRequest): unknown;
                fromPartial<I_6 extends {
                    grantee?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    grantee?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_6["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_6, keyof _67.QueryAllowancesRequest>, never>>(object: I_6): _67.QueryAllowancesRequest;
            };
            QueryAllowancesResponse: {
                encode(message: _67.QueryAllowancesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QueryAllowancesResponse;
                fromJSON(object: any): _67.QueryAllowancesResponse;
                toJSON(message: _67.QueryAllowancesResponse): unknown;
                fromPartial<I_7 extends {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[] & ({
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_7["allowances"][number]["allowance"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_7["allowances"][number], keyof _65.Grant>, never>)[] & Record<Exclude<keyof I_7["allowances"], keyof {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_7["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_7, keyof _67.QueryAllowancesResponse>, never>>(object: I_7): _67.QueryAllowancesResponse;
            };
            QueryAllowancesByGranterRequest: {
                encode(message: _67.QueryAllowancesByGranterRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QueryAllowancesByGranterRequest;
                fromJSON(object: any): _67.QueryAllowancesByGranterRequest;
                toJSON(message: _67.QueryAllowancesByGranterRequest): unknown;
                fromPartial<I_8 extends {
                    granter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    granter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_8["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_8, keyof _67.QueryAllowancesByGranterRequest>, never>>(object: I_8): _67.QueryAllowancesByGranterRequest;
            };
            QueryAllowancesByGranterResponse: {
                encode(message: _67.QueryAllowancesByGranterResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _67.QueryAllowancesByGranterResponse;
                fromJSON(object: any): _67.QueryAllowancesByGranterResponse;
                toJSON(message: _67.QueryAllowancesByGranterResponse): unknown;
                fromPartial<I_9 extends {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[] & ({
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_9["allowances"][number]["allowance"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_9["allowances"][number], keyof _65.Grant>, never>)[] & Record<Exclude<keyof I_9["allowances"], keyof {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_9["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_9, keyof _67.QueryAllowancesByGranterResponse>, never>>(object: I_9): _67.QueryAllowancesByGranterResponse;
            };
            GenesisState: {
                encode(message: _66.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _66.GenesisState;
                fromJSON(object: any): _66.GenesisState;
                toJSON(message: _66.GenesisState): unknown;
                fromPartial<I_10 extends {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                } & {
                    allowances?: {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[] & ({
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_10["allowances"][number]["allowance"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_10["allowances"][number], keyof _65.Grant>, never>)[] & Record<Exclude<keyof I_10["allowances"], keyof {
                        granter?: string;
                        grantee?: string;
                        allowance?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[]>, never>;
                } & Record<Exclude<keyof I_10, "allowances">, never>>(object: I_10): _66.GenesisState;
            };
            BasicAllowance: {
                encode(message: _65.BasicAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _65.BasicAllowance;
                fromJSON(object: any): _65.BasicAllowance;
                toJSON(message: _65.BasicAllowance): unknown;
                fromPartial<I_11 extends {
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    expiration?: Date;
                } & {
                    spendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_11["spendLimit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_11["spendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    expiration?: Date;
                } & Record<Exclude<keyof I_11, keyof _65.BasicAllowance>, never>>(object: I_11): _65.BasicAllowance;
            };
            PeriodicAllowance: {
                encode(message: _65.PeriodicAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _65.PeriodicAllowance;
                fromJSON(object: any): _65.PeriodicAllowance;
                toJSON(message: _65.PeriodicAllowance): unknown;
                fromPartial<I_12 extends {
                    basic?: {
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: Date;
                    };
                    period?: string;
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    periodReset?: Date;
                } & {
                    basic?: {
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        expiration?: Date;
                    } & {
                        spendLimit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_12["basic"]["spendLimit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_12["basic"]["spendLimit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        expiration?: Date;
                    } & Record<Exclude<keyof I_12["basic"], keyof _65.BasicAllowance>, never>;
                    period?: string;
                    periodSpendLimit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_12["periodSpendLimit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_12["periodSpendLimit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    periodCanSpend?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_12["periodCanSpend"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_12["periodCanSpend"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    periodReset?: Date;
                } & Record<Exclude<keyof I_12, keyof _65.PeriodicAllowance>, never>>(object: I_12): _65.PeriodicAllowance;
            };
            AllowedMsgAllowance: {
                encode(message: _65.AllowedMsgAllowance, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _65.AllowedMsgAllowance;
                fromJSON(object: any): _65.AllowedMsgAllowance;
                toJSON(message: _65.AllowedMsgAllowance): unknown;
                fromPartial<I_13 extends {
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    allowedMessages?: string[];
                } & {
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_13["allowance"], keyof import("../google/protobuf/any").Any>, never>;
                    allowedMessages?: string[] & string[] & Record<Exclude<keyof I_13["allowedMessages"], keyof string[]>, never>;
                } & Record<Exclude<keyof I_13, keyof _65.AllowedMsgAllowance>, never>>(object: I_13): _65.AllowedMsgAllowance;
            };
            Grant: {
                encode(message: _65.Grant, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _65.Grant;
                fromJSON(object: any): _65.Grant;
                toJSON(message: _65.Grant): unknown;
                fromPartial<I_14 extends {
                    granter?: string;
                    grantee?: string;
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    granter?: string;
                    grantee?: string;
                    allowance?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_14["allowance"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I_14, keyof _65.Grant>, never>>(object: I_14): _65.Grant;
            };
        };
    }
    namespace genutil {
        const v1beta1: {
            GenesisState: {
                encode(message: _69.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _69.GenesisState;
                fromJSON(object: any): _69.GenesisState;
                toJSON(message: _69.GenesisState): unknown;
                fromPartial<I extends {
                    genTxs?: Uint8Array[];
                } & {
                    genTxs?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["genTxs"], keyof Uint8Array[]>, never>;
                } & Record<Exclude<keyof I, "genTxs">, never>>(object: I): _69.GenesisState;
            };
        };
    }
    namespace gov {
        const v1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    submitProposal(value: _73.MsgSubmitProposal): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    execLegacyContent(value: _73.MsgExecLegacyContent): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    vote(value: _73.MsgVote): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    voteWeighted(value: _73.MsgVoteWeighted): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    deposit(value: _73.MsgDeposit): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    submitProposal(value: _73.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _73.MsgSubmitProposal;
                    };
                    execLegacyContent(value: _73.MsgExecLegacyContent): {
                        typeUrl: string;
                        value: _73.MsgExecLegacyContent;
                    };
                    vote(value: _73.MsgVote): {
                        typeUrl: string;
                        value: _73.MsgVote;
                    };
                    voteWeighted(value: _73.MsgVoteWeighted): {
                        typeUrl: string;
                        value: _73.MsgVoteWeighted;
                    };
                    deposit(value: _73.MsgDeposit): {
                        typeUrl: string;
                        value: _73.MsgDeposit;
                    };
                };
                toJSON: {
                    submitProposal(value: _73.MsgSubmitProposal): {
                        typeUrl: string;
                        value: unknown;
                    };
                    execLegacyContent(value: _73.MsgExecLegacyContent): {
                        typeUrl: string;
                        value: unknown;
                    };
                    vote(value: _73.MsgVote): {
                        typeUrl: string;
                        value: unknown;
                    };
                    voteWeighted(value: _73.MsgVoteWeighted): {
                        typeUrl: string;
                        value: unknown;
                    };
                    deposit(value: _73.MsgDeposit): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    submitProposal(value: any): {
                        typeUrl: string;
                        value: _73.MsgSubmitProposal;
                    };
                    execLegacyContent(value: any): {
                        typeUrl: string;
                        value: _73.MsgExecLegacyContent;
                    };
                    vote(value: any): {
                        typeUrl: string;
                        value: _73.MsgVote;
                    };
                    voteWeighted(value: any): {
                        typeUrl: string;
                        value: _73.MsgVoteWeighted;
                    };
                    deposit(value: any): {
                        typeUrl: string;
                        value: _73.MsgDeposit;
                    };
                };
                fromPartial: {
                    submitProposal(value: _73.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _73.MsgSubmitProposal;
                    };
                    execLegacyContent(value: _73.MsgExecLegacyContent): {
                        typeUrl: string;
                        value: _73.MsgExecLegacyContent;
                    };
                    vote(value: _73.MsgVote): {
                        typeUrl: string;
                        value: _73.MsgVote;
                    };
                    voteWeighted(value: _73.MsgVoteWeighted): {
                        typeUrl: string;
                        value: _73.MsgVoteWeighted;
                    };
                    deposit(value: _73.MsgDeposit): {
                        typeUrl: string;
                        value: _73.MsgDeposit;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.gov.v1.MsgSubmitProposal": {
                    aminoType: string;
                    toAmino: ({ messages, initialDeposit, proposer, metadata }: _73.MsgSubmitProposal) => {
                        messages: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                        initial_deposit: {
                            denom: string;
                            amount: string;
                        }[];
                        proposer: string;
                        metadata: string;
                    };
                    fromAmino: ({ messages, initial_deposit, proposer, metadata }: {
                        messages: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                        initial_deposit: {
                            denom: string;
                            amount: string;
                        }[];
                        proposer: string;
                        metadata: string;
                    }) => _73.MsgSubmitProposal;
                };
                "/cosmos.gov.v1.MsgExecLegacyContent": {
                    aminoType: string;
                    toAmino: ({ content, authority }: _73.MsgExecLegacyContent) => {
                        content: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        authority: string;
                    };
                    fromAmino: ({ content, authority }: {
                        content: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        authority: string;
                    }) => _73.MsgExecLegacyContent;
                };
                "/cosmos.gov.v1.MsgVote": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, option, metadata }: _73.MsgVote) => {
                        proposal_id: string;
                        voter: string;
                        option: number;
                        metadata: string;
                    };
                    fromAmino: ({ proposal_id, voter, option, metadata }: {
                        proposal_id: string;
                        voter: string;
                        option: number;
                        metadata: string;
                    }) => _73.MsgVote;
                };
                "/cosmos.gov.v1.MsgVoteWeighted": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, options, metadata }: _73.MsgVoteWeighted) => {
                        proposal_id: string;
                        voter: string;
                        options: {
                            option: number;
                            weight: string;
                        }[];
                        metadata: string;
                    };
                    fromAmino: ({ proposal_id, voter, options, metadata }: {
                        proposal_id: string;
                        voter: string;
                        options: {
                            option: number;
                            weight: string;
                        }[];
                        metadata: string;
                    }) => _73.MsgVoteWeighted;
                };
                "/cosmos.gov.v1.MsgDeposit": {
                    aminoType: string;
                    toAmino: ({ proposalId, depositor, amount }: _73.MsgDeposit) => {
                        proposal_id: string;
                        depositor: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    };
                    fromAmino: ({ proposal_id, depositor, amount }: {
                        proposal_id: string;
                        depositor: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    }) => _73.MsgDeposit;
                };
            };
            MsgSubmitProposal: {
                encode(message: _73.MsgSubmitProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.MsgSubmitProposal;
                fromJSON(object: any): _73.MsgSubmitProposal;
                toJSON(message: _73.MsgSubmitProposal): unknown;
                fromPartial<I extends {
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    initialDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    proposer?: string;
                    metadata?: string;
                } & {
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I["messages"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                    initialDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["initialDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I["initialDeposit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    proposer?: string;
                    metadata?: string;
                } & Record<Exclude<keyof I, keyof _73.MsgSubmitProposal>, never>>(object: I): _73.MsgSubmitProposal;
            };
            MsgSubmitProposalResponse: {
                encode(message: _73.MsgSubmitProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.MsgSubmitProposalResponse;
                fromJSON(object: any): _73.MsgSubmitProposalResponse;
                toJSON(message: _73.MsgSubmitProposalResponse): unknown;
                fromPartial<I_1 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_1, "proposalId">, never>>(object: I_1): _73.MsgSubmitProposalResponse;
            };
            MsgExecLegacyContent: {
                encode(message: _73.MsgExecLegacyContent, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.MsgExecLegacyContent;
                fromJSON(object: any): _73.MsgExecLegacyContent;
                toJSON(message: _73.MsgExecLegacyContent): unknown;
                fromPartial<I_2 extends {
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    authority?: string;
                } & {
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_2["content"], keyof import("../google/protobuf/any").Any>, never>;
                    authority?: string;
                } & Record<Exclude<keyof I_2, keyof _73.MsgExecLegacyContent>, never>>(object: I_2): _73.MsgExecLegacyContent;
            };
            MsgExecLegacyContentResponse: {
                encode(_: _73.MsgExecLegacyContentResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.MsgExecLegacyContentResponse;
                fromJSON(_: any): _73.MsgExecLegacyContentResponse;
                toJSON(_: _73.MsgExecLegacyContentResponse): unknown;
                fromPartial<I_3 extends {} & {} & Record<Exclude<keyof I_3, never>, never>>(_: I_3): _73.MsgExecLegacyContentResponse;
            };
            MsgVote: {
                encode(message: _73.MsgVote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.MsgVote;
                fromJSON(object: any): _73.MsgVote;
                toJSON(message: _73.MsgVote): unknown;
                fromPartial<I_4 extends {
                    proposalId?: any;
                    voter?: string;
                    option?: _71.VoteOption;
                    metadata?: string;
                } & {
                    proposalId?: any;
                    voter?: string;
                    option?: _71.VoteOption;
                    metadata?: string;
                } & Record<Exclude<keyof I_4, keyof _73.MsgVote>, never>>(object: I_4): _73.MsgVote;
            };
            MsgVoteResponse: {
                encode(_: _73.MsgVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.MsgVoteResponse;
                fromJSON(_: any): _73.MsgVoteResponse;
                toJSON(_: _73.MsgVoteResponse): unknown;
                fromPartial<I_5 extends {} & {} & Record<Exclude<keyof I_5, never>, never>>(_: I_5): _73.MsgVoteResponse;
            };
            MsgVoteWeighted: {
                encode(message: _73.MsgVoteWeighted, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.MsgVoteWeighted;
                fromJSON(object: any): _73.MsgVoteWeighted;
                toJSON(message: _73.MsgVoteWeighted): unknown;
                fromPartial<I_6 extends {
                    proposalId?: any;
                    voter?: string;
                    options?: {
                        option?: _71.VoteOption;
                        weight?: string;
                    }[];
                    metadata?: string;
                } & {
                    proposalId?: any;
                    voter?: string;
                    options?: {
                        option?: _71.VoteOption;
                        weight?: string;
                    }[] & ({
                        option?: _71.VoteOption;
                        weight?: string;
                    } & {
                        option?: _71.VoteOption;
                        weight?: string;
                    } & Record<Exclude<keyof I_6["options"][number], keyof _71.WeightedVoteOption>, never>)[] & Record<Exclude<keyof I_6["options"], keyof {
                        option?: _71.VoteOption;
                        weight?: string;
                    }[]>, never>;
                    metadata?: string;
                } & Record<Exclude<keyof I_6, keyof _73.MsgVoteWeighted>, never>>(object: I_6): _73.MsgVoteWeighted;
            };
            MsgVoteWeightedResponse: {
                encode(_: _73.MsgVoteWeightedResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.MsgVoteWeightedResponse;
                fromJSON(_: any): _73.MsgVoteWeightedResponse;
                toJSON(_: _73.MsgVoteWeightedResponse): unknown;
                fromPartial<I_7 extends {} & {} & Record<Exclude<keyof I_7, never>, never>>(_: I_7): _73.MsgVoteWeightedResponse;
            };
            MsgDeposit: {
                encode(message: _73.MsgDeposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.MsgDeposit;
                fromJSON(object: any): _73.MsgDeposit;
                toJSON(message: _73.MsgDeposit): unknown;
                fromPartial<I_8 extends {
                    proposalId?: any;
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    proposalId?: any;
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_8["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_8["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_8, keyof _73.MsgDeposit>, never>>(object: I_8): _73.MsgDeposit;
            };
            MsgDepositResponse: {
                encode(_: _73.MsgDepositResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _73.MsgDepositResponse;
                fromJSON(_: any): _73.MsgDepositResponse;
                toJSON(_: _73.MsgDepositResponse): unknown;
                fromPartial<I_9 extends {} & {} & Record<Exclude<keyof I_9, never>, never>>(_: I_9): _73.MsgDepositResponse;
            };
            QueryProposalRequest: {
                encode(message: _72.QueryProposalRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryProposalRequest;
                fromJSON(object: any): _72.QueryProposalRequest;
                toJSON(message: _72.QueryProposalRequest): unknown;
                fromPartial<I_10 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_10, "proposalId">, never>>(object: I_10): _72.QueryProposalRequest;
            };
            QueryProposalResponse: {
                encode(message: _72.QueryProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryProposalResponse;
                fromJSON(object: any): _72.QueryProposalResponse;
                toJSON(message: _72.QueryProposalResponse): unknown;
                fromPartial<I_11 extends {
                    proposal?: {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    };
                } & {
                    proposal?: {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    } & {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_11["proposal"]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_11["proposal"]["messages"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & Record<Exclude<keyof I_11["proposal"]["finalTallyResult"], keyof _71.TallyResult>, never>;
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_11["proposal"]["totalDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_11["proposal"]["totalDeposit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    } & Record<Exclude<keyof I_11["proposal"], keyof _71.Proposal>, never>;
                } & Record<Exclude<keyof I_11, "proposal">, never>>(object: I_11): _72.QueryProposalResponse;
            };
            QueryProposalsRequest: {
                encode(message: _72.QueryProposalsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryProposalsRequest;
                fromJSON(object: any): _72.QueryProposalsRequest;
                toJSON(message: _72.QueryProposalsRequest): unknown;
                fromPartial<I_12 extends {
                    proposalStatus?: _71.ProposalStatus;
                    voter?: string;
                    depositor?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    proposalStatus?: _71.ProposalStatus;
                    voter?: string;
                    depositor?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_12["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_12, keyof _72.QueryProposalsRequest>, never>>(object: I_12): _72.QueryProposalsRequest;
            };
            QueryProposalsResponse: {
                encode(message: _72.QueryProposalsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryProposalsResponse;
                fromJSON(object: any): _72.QueryProposalsResponse;
                toJSON(message: _72.QueryProposalsResponse): unknown;
                fromPartial<I_13 extends {
                    proposals?: {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    proposals?: {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    }[] & ({
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    } & {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_13["proposals"][number]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_13["proposals"][number]["messages"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & Record<Exclude<keyof I_13["proposals"][number]["finalTallyResult"], keyof _71.TallyResult>, never>;
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_13["proposals"][number]["totalDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_13["proposals"][number]["totalDeposit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    } & Record<Exclude<keyof I_13["proposals"][number], keyof _71.Proposal>, never>)[] & Record<Exclude<keyof I_13["proposals"], keyof {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_13["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_13, keyof _72.QueryProposalsResponse>, never>>(object: I_13): _72.QueryProposalsResponse;
            };
            QueryVoteRequest: {
                encode(message: _72.QueryVoteRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryVoteRequest;
                fromJSON(object: any): _72.QueryVoteRequest;
                toJSON(message: _72.QueryVoteRequest): unknown;
                fromPartial<I_14 extends {
                    proposalId?: any;
                    voter?: string;
                } & {
                    proposalId?: any;
                    voter?: string;
                } & Record<Exclude<keyof I_14, keyof _72.QueryVoteRequest>, never>>(object: I_14): _72.QueryVoteRequest;
            };
            QueryVoteResponse: {
                encode(message: _72.QueryVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryVoteResponse;
                fromJSON(object: any): _72.QueryVoteResponse;
                toJSON(message: _72.QueryVoteResponse): unknown;
                fromPartial<I_15 extends {
                    vote?: {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    };
                } & {
                    vote?: {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    } & {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[] & ({
                            option?: _71.VoteOption;
                            weight?: string;
                        } & {
                            option?: _71.VoteOption;
                            weight?: string;
                        } & Record<Exclude<keyof I_15["vote"]["options"][number], keyof _71.WeightedVoteOption>, never>)[] & Record<Exclude<keyof I_15["vote"]["options"], keyof {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[]>, never>;
                        metadata?: string;
                    } & Record<Exclude<keyof I_15["vote"], keyof _71.Vote>, never>;
                } & Record<Exclude<keyof I_15, "vote">, never>>(object: I_15): _72.QueryVoteResponse;
            };
            QueryVotesRequest: {
                encode(message: _72.QueryVotesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryVotesRequest;
                fromJSON(object: any): _72.QueryVotesRequest;
                toJSON(message: _72.QueryVotesRequest): unknown;
                fromPartial<I_16 extends {
                    proposalId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    proposalId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_16["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_16, keyof _72.QueryVotesRequest>, never>>(object: I_16): _72.QueryVotesRequest;
            };
            QueryVotesResponse: {
                encode(message: _72.QueryVotesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryVotesResponse;
                fromJSON(object: any): _72.QueryVotesResponse;
                toJSON(message: _72.QueryVotesResponse): unknown;
                fromPartial<I_17 extends {
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    }[] & ({
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    } & {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[] & ({
                            option?: _71.VoteOption;
                            weight?: string;
                        } & {
                            option?: _71.VoteOption;
                            weight?: string;
                        } & Record<Exclude<keyof I_17["votes"][number]["options"][number], keyof _71.WeightedVoteOption>, never>)[] & Record<Exclude<keyof I_17["votes"][number]["options"], keyof {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[]>, never>;
                        metadata?: string;
                    } & Record<Exclude<keyof I_17["votes"][number], keyof _71.Vote>, never>)[] & Record<Exclude<keyof I_17["votes"], keyof {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_17["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_17, keyof _72.QueryVotesResponse>, never>>(object: I_17): _72.QueryVotesResponse;
            };
            QueryParamsRequest: {
                encode(message: _72.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryParamsRequest;
                fromJSON(object: any): _72.QueryParamsRequest;
                toJSON(message: _72.QueryParamsRequest): unknown;
                fromPartial<I_18 extends {
                    paramsType?: string;
                } & {
                    paramsType?: string;
                } & Record<Exclude<keyof I_18, "paramsType">, never>>(object: I_18): _72.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _72.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryParamsResponse;
                fromJSON(object: any): _72.QueryParamsResponse;
                toJSON(message: _72.QueryParamsResponse): unknown;
                fromPartial<I_19 extends {
                    votingParams?: {
                        votingPeriod?: string;
                    };
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: string;
                    };
                    tallyParams?: {
                        quorum?: string;
                        threshold?: string;
                        vetoThreshold?: string;
                    };
                } & {
                    votingParams?: {
                        votingPeriod?: string;
                    } & {
                        votingPeriod?: string;
                    } & Record<Exclude<keyof I_19["votingParams"], "votingPeriod">, never>;
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: string;
                    } & {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_19["depositParams"]["minDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_19["depositParams"]["minDeposit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        maxDepositPeriod?: string;
                    } & Record<Exclude<keyof I_19["depositParams"], keyof _71.DepositParams>, never>;
                    tallyParams?: {
                        quorum?: string;
                        threshold?: string;
                        vetoThreshold?: string;
                    } & {
                        quorum?: string;
                        threshold?: string;
                        vetoThreshold?: string;
                    } & Record<Exclude<keyof I_19["tallyParams"], keyof _71.TallyParams>, never>;
                } & Record<Exclude<keyof I_19, keyof _72.QueryParamsResponse>, never>>(object: I_19): _72.QueryParamsResponse;
            };
            QueryDepositRequest: {
                encode(message: _72.QueryDepositRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryDepositRequest;
                fromJSON(object: any): _72.QueryDepositRequest;
                toJSON(message: _72.QueryDepositRequest): unknown;
                fromPartial<I_20 extends {
                    proposalId?: any;
                    depositor?: string;
                } & {
                    proposalId?: any;
                    depositor?: string;
                } & Record<Exclude<keyof I_20, keyof _72.QueryDepositRequest>, never>>(object: I_20): _72.QueryDepositRequest;
            };
            QueryDepositResponse: {
                encode(message: _72.QueryDepositResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryDepositResponse;
                fromJSON(object: any): _72.QueryDepositResponse;
                toJSON(message: _72.QueryDepositResponse): unknown;
                fromPartial<I_21 extends {
                    deposit?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                } & {
                    deposit?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_21["deposit"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_21["deposit"]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_21["deposit"], keyof _71.Deposit>, never>;
                } & Record<Exclude<keyof I_21, "deposit">, never>>(object: I_21): _72.QueryDepositResponse;
            };
            QueryDepositsRequest: {
                encode(message: _72.QueryDepositsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryDepositsRequest;
                fromJSON(object: any): _72.QueryDepositsRequest;
                toJSON(message: _72.QueryDepositsRequest): unknown;
                fromPartial<I_22 extends {
                    proposalId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    proposalId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_22["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_22, keyof _72.QueryDepositsRequest>, never>>(object: I_22): _72.QueryDepositsRequest;
            };
            QueryDepositsResponse: {
                encode(message: _72.QueryDepositsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryDepositsResponse;
                fromJSON(object: any): _72.QueryDepositsResponse;
                toJSON(message: _72.QueryDepositsResponse): unknown;
                fromPartial<I_23 extends {
                    deposits?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    deposits?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_23["deposits"][number]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_23["deposits"][number]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_23["deposits"][number], keyof _71.Deposit>, never>)[] & Record<Exclude<keyof I_23["deposits"], keyof {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_23["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_23, keyof _72.QueryDepositsResponse>, never>>(object: I_23): _72.QueryDepositsResponse;
            };
            QueryTallyResultRequest: {
                encode(message: _72.QueryTallyResultRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryTallyResultRequest;
                fromJSON(object: any): _72.QueryTallyResultRequest;
                toJSON(message: _72.QueryTallyResultRequest): unknown;
                fromPartial<I_24 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_24, "proposalId">, never>>(object: I_24): _72.QueryTallyResultRequest;
            };
            QueryTallyResultResponse: {
                encode(message: _72.QueryTallyResultResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _72.QueryTallyResultResponse;
                fromJSON(object: any): _72.QueryTallyResultResponse;
                toJSON(message: _72.QueryTallyResultResponse): unknown;
                fromPartial<I_25 extends {
                    tally?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    };
                } & {
                    tally?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    } & {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    } & Record<Exclude<keyof I_25["tally"], keyof _71.TallyResult>, never>;
                } & Record<Exclude<keyof I_25, "tally">, never>>(object: I_25): _72.QueryTallyResultResponse;
            };
            voteOptionFromJSON(object: any): _71.VoteOption;
            voteOptionToJSON(object: _71.VoteOption): string;
            proposalStatusFromJSON(object: any): _71.ProposalStatus;
            proposalStatusToJSON(object: _71.ProposalStatus): string;
            VoteOption: typeof _71.VoteOption;
            ProposalStatus: typeof _71.ProposalStatus;
            WeightedVoteOption: {
                encode(message: _71.WeightedVoteOption, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.WeightedVoteOption;
                fromJSON(object: any): _71.WeightedVoteOption;
                toJSON(message: _71.WeightedVoteOption): unknown;
                fromPartial<I_26 extends {
                    option?: _71.VoteOption;
                    weight?: string;
                } & {
                    option?: _71.VoteOption;
                    weight?: string;
                } & Record<Exclude<keyof I_26, keyof _71.WeightedVoteOption>, never>>(object: I_26): _71.WeightedVoteOption;
            };
            Deposit: {
                encode(message: _71.Deposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.Deposit;
                fromJSON(object: any): _71.Deposit;
                toJSON(message: _71.Deposit): unknown;
                fromPartial<I_27 extends {
                    proposalId?: any;
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    proposalId?: any;
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_27["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_27["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_27, keyof _71.Deposit>, never>>(object: I_27): _71.Deposit;
            };
            Proposal: {
                encode(message: _71.Proposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.Proposal;
                fromJSON(object: any): _71.Proposal;
                toJSON(message: _71.Proposal): unknown;
                fromPartial<I_28 extends {
                    id?: any;
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    status?: _71.ProposalStatus;
                    finalTallyResult?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    };
                    submitTime?: Date;
                    depositEndTime?: Date;
                    totalDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    votingStartTime?: Date;
                    votingEndTime?: Date;
                    metadata?: string;
                } & {
                    id?: any;
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_28["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_28["messages"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                    status?: _71.ProposalStatus;
                    finalTallyResult?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    } & {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    } & Record<Exclude<keyof I_28["finalTallyResult"], keyof _71.TallyResult>, never>;
                    submitTime?: Date;
                    depositEndTime?: Date;
                    totalDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_28["totalDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_28["totalDeposit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    votingStartTime?: Date;
                    votingEndTime?: Date;
                    metadata?: string;
                } & Record<Exclude<keyof I_28, keyof _71.Proposal>, never>>(object: I_28): _71.Proposal;
            };
            TallyResult: {
                encode(message: _71.TallyResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.TallyResult;
                fromJSON(object: any): _71.TallyResult;
                toJSON(message: _71.TallyResult): unknown;
                fromPartial<I_29 extends {
                    yesCount?: string;
                    abstainCount?: string;
                    noCount?: string;
                    noWithVetoCount?: string;
                } & {
                    yesCount?: string;
                    abstainCount?: string;
                    noCount?: string;
                    noWithVetoCount?: string;
                } & Record<Exclude<keyof I_29, keyof _71.TallyResult>, never>>(object: I_29): _71.TallyResult;
            };
            Vote: {
                encode(message: _71.Vote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.Vote;
                fromJSON(object: any): _71.Vote;
                toJSON(message: _71.Vote): unknown;
                fromPartial<I_30 extends {
                    proposalId?: any;
                    voter?: string;
                    options?: {
                        option?: _71.VoteOption;
                        weight?: string;
                    }[];
                    metadata?: string;
                } & {
                    proposalId?: any;
                    voter?: string;
                    options?: {
                        option?: _71.VoteOption;
                        weight?: string;
                    }[] & ({
                        option?: _71.VoteOption;
                        weight?: string;
                    } & {
                        option?: _71.VoteOption;
                        weight?: string;
                    } & Record<Exclude<keyof I_30["options"][number], keyof _71.WeightedVoteOption>, never>)[] & Record<Exclude<keyof I_30["options"], keyof {
                        option?: _71.VoteOption;
                        weight?: string;
                    }[]>, never>;
                    metadata?: string;
                } & Record<Exclude<keyof I_30, keyof _71.Vote>, never>>(object: I_30): _71.Vote;
            };
            DepositParams: {
                encode(message: _71.DepositParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.DepositParams;
                fromJSON(object: any): _71.DepositParams;
                toJSON(message: _71.DepositParams): unknown;
                fromPartial<I_31 extends {
                    minDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    maxDepositPeriod?: string;
                } & {
                    minDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_31["minDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_31["minDeposit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    maxDepositPeriod?: string;
                } & Record<Exclude<keyof I_31, keyof _71.DepositParams>, never>>(object: I_31): _71.DepositParams;
            };
            VotingParams: {
                encode(message: _71.VotingParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.VotingParams;
                fromJSON(object: any): _71.VotingParams;
                toJSON(message: _71.VotingParams): unknown;
                fromPartial<I_32 extends {
                    votingPeriod?: string;
                } & {
                    votingPeriod?: string;
                } & Record<Exclude<keyof I_32, "votingPeriod">, never>>(object: I_32): _71.VotingParams;
            };
            TallyParams: {
                encode(message: _71.TallyParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _71.TallyParams;
                fromJSON(object: any): _71.TallyParams;
                toJSON(message: _71.TallyParams): unknown;
                fromPartial<I_33 extends {
                    quorum?: string;
                    threshold?: string;
                    vetoThreshold?: string;
                } & {
                    quorum?: string;
                    threshold?: string;
                    vetoThreshold?: string;
                } & Record<Exclude<keyof I_33, keyof _71.TallyParams>, never>>(object: I_33): _71.TallyParams;
            };
            GenesisState: {
                encode(message: _70.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _70.GenesisState;
                fromJSON(object: any): _70.GenesisState;
                toJSON(message: _70.GenesisState): unknown;
                fromPartial<I_34 extends {
                    startingProposalId?: any;
                    deposits?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    }[];
                    proposals?: {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    }[];
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: string;
                    };
                    votingParams?: {
                        votingPeriod?: string;
                    };
                    tallyParams?: {
                        quorum?: string;
                        threshold?: string;
                        vetoThreshold?: string;
                    };
                } & {
                    startingProposalId?: any;
                    deposits?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_34["deposits"][number]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_34["deposits"][number]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_34["deposits"][number], keyof _71.Deposit>, never>)[] & Record<Exclude<keyof I_34["deposits"], keyof {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    }[] & ({
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    } & {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[] & ({
                            option?: _71.VoteOption;
                            weight?: string;
                        } & {
                            option?: _71.VoteOption;
                            weight?: string;
                        } & Record<Exclude<keyof I_34["votes"][number]["options"][number], keyof _71.WeightedVoteOption>, never>)[] & Record<Exclude<keyof I_34["votes"][number]["options"], keyof {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[]>, never>;
                        metadata?: string;
                    } & Record<Exclude<keyof I_34["votes"][number], keyof _71.Vote>, never>)[] & Record<Exclude<keyof I_34["votes"], keyof {
                        proposalId?: any;
                        voter?: string;
                        options?: {
                            option?: _71.VoteOption;
                            weight?: string;
                        }[];
                        metadata?: string;
                    }[]>, never>;
                    proposals?: {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    }[] & ({
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    } & {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_34["proposals"][number]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_34["proposals"][number]["messages"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & Record<Exclude<keyof I_34["proposals"][number]["finalTallyResult"], keyof _71.TallyResult>, never>;
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_34["proposals"][number]["totalDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_34["proposals"][number]["totalDeposit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    } & Record<Exclude<keyof I_34["proposals"][number], keyof _71.Proposal>, never>)[] & Record<Exclude<keyof I_34["proposals"], keyof {
                        id?: any;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        status?: _71.ProposalStatus;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                        metadata?: string;
                    }[]>, never>;
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: string;
                    } & {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_34["depositParams"]["minDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_34["depositParams"]["minDeposit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        maxDepositPeriod?: string;
                    } & Record<Exclude<keyof I_34["depositParams"], keyof _71.DepositParams>, never>;
                    votingParams?: {
                        votingPeriod?: string;
                    } & {
                        votingPeriod?: string;
                    } & Record<Exclude<keyof I_34["votingParams"], "votingPeriod">, never>;
                    tallyParams?: {
                        quorum?: string;
                        threshold?: string;
                        vetoThreshold?: string;
                    } & {
                        quorum?: string;
                        threshold?: string;
                        vetoThreshold?: string;
                    } & Record<Exclude<keyof I_34["tallyParams"], keyof _71.TallyParams>, never>;
                } & Record<Exclude<keyof I_34, keyof _70.GenesisState>, never>>(object: I_34): _70.GenesisState;
            };
        };
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    submitProposal(value: _77.MsgSubmitProposal): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    vote(value: _77.MsgVote): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    voteWeighted(value: _77.MsgVoteWeighted): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    deposit(value: _77.MsgDeposit): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    submitProposal(value: _77.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _77.MsgSubmitProposal;
                    };
                    vote(value: _77.MsgVote): {
                        typeUrl: string;
                        value: _77.MsgVote;
                    };
                    voteWeighted(value: _77.MsgVoteWeighted): {
                        typeUrl: string;
                        value: _77.MsgVoteWeighted;
                    };
                    deposit(value: _77.MsgDeposit): {
                        typeUrl: string;
                        value: _77.MsgDeposit;
                    };
                };
                toJSON: {
                    submitProposal(value: _77.MsgSubmitProposal): {
                        typeUrl: string;
                        value: unknown;
                    };
                    vote(value: _77.MsgVote): {
                        typeUrl: string;
                        value: unknown;
                    };
                    voteWeighted(value: _77.MsgVoteWeighted): {
                        typeUrl: string;
                        value: unknown;
                    };
                    deposit(value: _77.MsgDeposit): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    submitProposal(value: any): {
                        typeUrl: string;
                        value: _77.MsgSubmitProposal;
                    };
                    vote(value: any): {
                        typeUrl: string;
                        value: _77.MsgVote;
                    };
                    voteWeighted(value: any): {
                        typeUrl: string;
                        value: _77.MsgVoteWeighted;
                    };
                    deposit(value: any): {
                        typeUrl: string;
                        value: _77.MsgDeposit;
                    };
                };
                fromPartial: {
                    submitProposal(value: _77.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _77.MsgSubmitProposal;
                    };
                    vote(value: _77.MsgVote): {
                        typeUrl: string;
                        value: _77.MsgVote;
                    };
                    voteWeighted(value: _77.MsgVoteWeighted): {
                        typeUrl: string;
                        value: _77.MsgVoteWeighted;
                    };
                    deposit(value: _77.MsgDeposit): {
                        typeUrl: string;
                        value: _77.MsgDeposit;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.gov.v1beta1.MsgSubmitProposal": {
                    aminoType: string;
                    toAmino: ({ content, initialDeposit, proposer }: _77.MsgSubmitProposal) => {
                        content: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        initial_deposit: {
                            denom: string;
                            amount: string;
                        }[];
                        proposer: string;
                    };
                    fromAmino: ({ content, initial_deposit, proposer }: {
                        content: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        initial_deposit: {
                            denom: string;
                            amount: string;
                        }[];
                        proposer: string;
                    }) => _77.MsgSubmitProposal;
                };
                "/cosmos.gov.v1beta1.MsgVote": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, option }: _77.MsgVote) => {
                        proposal_id: string;
                        voter: string;
                        option: number;
                    };
                    fromAmino: ({ proposal_id, voter, option }: {
                        proposal_id: string;
                        voter: string;
                        option: number;
                    }) => _77.MsgVote;
                };
                "/cosmos.gov.v1beta1.MsgVoteWeighted": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, options }: _77.MsgVoteWeighted) => {
                        proposal_id: string;
                        voter: string;
                        options: {
                            option: number;
                            weight: string;
                        }[];
                    };
                    fromAmino: ({ proposal_id, voter, options }: {
                        proposal_id: string;
                        voter: string;
                        options: {
                            option: number;
                            weight: string;
                        }[];
                    }) => _77.MsgVoteWeighted;
                };
                "/cosmos.gov.v1beta1.MsgDeposit": {
                    aminoType: string;
                    toAmino: ({ proposalId, depositor, amount }: _77.MsgDeposit) => {
                        proposal_id: string;
                        depositor: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    };
                    fromAmino: ({ proposal_id, depositor, amount }: {
                        proposal_id: string;
                        depositor: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    }) => _77.MsgDeposit;
                };
            };
            MsgSubmitProposal: {
                encode(message: _77.MsgSubmitProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _77.MsgSubmitProposal;
                fromJSON(object: any): _77.MsgSubmitProposal;
                toJSON(message: _77.MsgSubmitProposal): unknown;
                fromPartial<I extends {
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    initialDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    proposer?: string;
                } & {
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["content"], keyof import("../google/protobuf/any").Any>, never>;
                    initialDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["initialDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I["initialDeposit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    proposer?: string;
                } & Record<Exclude<keyof I, keyof _77.MsgSubmitProposal>, never>>(object: I): _77.MsgSubmitProposal;
            };
            MsgSubmitProposalResponse: {
                encode(message: _77.MsgSubmitProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _77.MsgSubmitProposalResponse;
                fromJSON(object: any): _77.MsgSubmitProposalResponse;
                toJSON(message: _77.MsgSubmitProposalResponse): unknown;
                fromPartial<I_1 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_1, "proposalId">, never>>(object: I_1): _77.MsgSubmitProposalResponse;
            };
            MsgVote: {
                encode(message: _77.MsgVote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _77.MsgVote;
                fromJSON(object: any): _77.MsgVote;
                toJSON(message: _77.MsgVote): unknown;
                fromPartial<I_2 extends {
                    proposalId?: any;
                    voter?: string;
                    option?: _75.VoteOption;
                } & {
                    proposalId?: any;
                    voter?: string;
                    option?: _75.VoteOption;
                } & Record<Exclude<keyof I_2, keyof _77.MsgVote>, never>>(object: I_2): _77.MsgVote;
            };
            MsgVoteResponse: {
                encode(_: _77.MsgVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _77.MsgVoteResponse;
                fromJSON(_: any): _77.MsgVoteResponse;
                toJSON(_: _77.MsgVoteResponse): unknown;
                fromPartial<I_3 extends {} & {} & Record<Exclude<keyof I_3, never>, never>>(_: I_3): _77.MsgVoteResponse;
            };
            MsgVoteWeighted: {
                encode(message: _77.MsgVoteWeighted, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _77.MsgVoteWeighted;
                fromJSON(object: any): _77.MsgVoteWeighted;
                toJSON(message: _77.MsgVoteWeighted): unknown;
                fromPartial<I_4 extends {
                    proposalId?: any;
                    voter?: string;
                    options?: {
                        option?: _75.VoteOption;
                        weight?: string;
                    }[];
                } & {
                    proposalId?: any;
                    voter?: string;
                    options?: {
                        option?: _75.VoteOption;
                        weight?: string;
                    }[] & ({
                        option?: _75.VoteOption;
                        weight?: string;
                    } & {
                        option?: _75.VoteOption;
                        weight?: string;
                    } & Record<Exclude<keyof I_4["options"][number], keyof _75.WeightedVoteOption>, never>)[] & Record<Exclude<keyof I_4["options"], keyof {
                        option?: _75.VoteOption;
                        weight?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_4, keyof _77.MsgVoteWeighted>, never>>(object: I_4): _77.MsgVoteWeighted;
            };
            MsgVoteWeightedResponse: {
                encode(_: _77.MsgVoteWeightedResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _77.MsgVoteWeightedResponse;
                fromJSON(_: any): _77.MsgVoteWeightedResponse;
                toJSON(_: _77.MsgVoteWeightedResponse): unknown;
                fromPartial<I_5 extends {} & {} & Record<Exclude<keyof I_5, never>, never>>(_: I_5): _77.MsgVoteWeightedResponse;
            };
            MsgDeposit: {
                encode(message: _77.MsgDeposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _77.MsgDeposit;
                fromJSON(object: any): _77.MsgDeposit;
                toJSON(message: _77.MsgDeposit): unknown;
                fromPartial<I_6 extends {
                    proposalId?: any;
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    proposalId?: any;
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_6["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_6["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_6, keyof _77.MsgDeposit>, never>>(object: I_6): _77.MsgDeposit;
            };
            MsgDepositResponse: {
                encode(_: _77.MsgDepositResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _77.MsgDepositResponse;
                fromJSON(_: any): _77.MsgDepositResponse;
                toJSON(_: _77.MsgDepositResponse): unknown;
                fromPartial<I_7 extends {} & {} & Record<Exclude<keyof I_7, never>, never>>(_: I_7): _77.MsgDepositResponse;
            };
            QueryProposalRequest: {
                encode(message: _76.QueryProposalRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryProposalRequest;
                fromJSON(object: any): _76.QueryProposalRequest;
                toJSON(message: _76.QueryProposalRequest): unknown;
                fromPartial<I_8 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_8, "proposalId">, never>>(object: I_8): _76.QueryProposalRequest;
            };
            QueryProposalResponse: {
                encode(message: _76.QueryProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryProposalResponse;
                fromJSON(object: any): _76.QueryProposalResponse;
                toJSON(message: _76.QueryProposalResponse): unknown;
                fromPartial<I_9 extends {
                    proposal?: {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    };
                } & {
                    proposal?: {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    } & {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_9["proposal"]["content"], keyof import("../google/protobuf/any").Any>, never>;
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        } & {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        } & Record<Exclude<keyof I_9["proposal"]["finalTallyResult"], keyof _75.TallyResult>, never>;
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_9["proposal"]["totalDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_9["proposal"]["totalDeposit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    } & Record<Exclude<keyof I_9["proposal"], keyof _75.Proposal>, never>;
                } & Record<Exclude<keyof I_9, "proposal">, never>>(object: I_9): _76.QueryProposalResponse;
            };
            QueryProposalsRequest: {
                encode(message: _76.QueryProposalsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryProposalsRequest;
                fromJSON(object: any): _76.QueryProposalsRequest;
                toJSON(message: _76.QueryProposalsRequest): unknown;
                fromPartial<I_10 extends {
                    proposalStatus?: _75.ProposalStatus;
                    voter?: string;
                    depositor?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    proposalStatus?: _75.ProposalStatus;
                    voter?: string;
                    depositor?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_10["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_10, keyof _76.QueryProposalsRequest>, never>>(object: I_10): _76.QueryProposalsRequest;
            };
            QueryProposalsResponse: {
                encode(message: _76.QueryProposalsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryProposalsResponse;
                fromJSON(object: any): _76.QueryProposalsResponse;
                toJSON(message: _76.QueryProposalsResponse): unknown;
                fromPartial<I_11 extends {
                    proposals?: {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    proposals?: {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    }[] & ({
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    } & {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_11["proposals"][number]["content"], keyof import("../google/protobuf/any").Any>, never>;
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        } & {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        } & Record<Exclude<keyof I_11["proposals"][number]["finalTallyResult"], keyof _75.TallyResult>, never>;
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_11["proposals"][number]["totalDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_11["proposals"][number]["totalDeposit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    } & Record<Exclude<keyof I_11["proposals"][number], keyof _75.Proposal>, never>)[] & Record<Exclude<keyof I_11["proposals"], keyof {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_11["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_11, keyof _76.QueryProposalsResponse>, never>>(object: I_11): _76.QueryProposalsResponse;
            };
            QueryVoteRequest: {
                encode(message: _76.QueryVoteRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryVoteRequest;
                fromJSON(object: any): _76.QueryVoteRequest;
                toJSON(message: _76.QueryVoteRequest): unknown;
                fromPartial<I_12 extends {
                    proposalId?: any;
                    voter?: string;
                } & {
                    proposalId?: any;
                    voter?: string;
                } & Record<Exclude<keyof I_12, keyof _76.QueryVoteRequest>, never>>(object: I_12): _76.QueryVoteRequest;
            };
            QueryVoteResponse: {
                encode(message: _76.QueryVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryVoteResponse;
                fromJSON(object: any): _76.QueryVoteResponse;
                toJSON(message: _76.QueryVoteResponse): unknown;
                fromPartial<I_13 extends {
                    vote?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[];
                    };
                } & {
                    vote?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[];
                    } & {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[] & ({
                            option?: _75.VoteOption;
                            weight?: string;
                        } & {
                            option?: _75.VoteOption;
                            weight?: string;
                        } & Record<Exclude<keyof I_13["vote"]["options"][number], keyof _75.WeightedVoteOption>, never>)[] & Record<Exclude<keyof I_13["vote"]["options"], keyof {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_13["vote"], keyof _75.Vote>, never>;
                } & Record<Exclude<keyof I_13, "vote">, never>>(object: I_13): _76.QueryVoteResponse;
            };
            QueryVotesRequest: {
                encode(message: _76.QueryVotesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryVotesRequest;
                fromJSON(object: any): _76.QueryVotesRequest;
                toJSON(message: _76.QueryVotesRequest): unknown;
                fromPartial<I_14 extends {
                    proposalId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    proposalId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_14["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_14, keyof _76.QueryVotesRequest>, never>>(object: I_14): _76.QueryVotesRequest;
            };
            QueryVotesResponse: {
                encode(message: _76.QueryVotesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryVotesResponse;
                fromJSON(object: any): _76.QueryVotesResponse;
                toJSON(message: _76.QueryVotesResponse): unknown;
                fromPartial<I_15 extends {
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[];
                    }[] & ({
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[];
                    } & {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[] & ({
                            option?: _75.VoteOption;
                            weight?: string;
                        } & {
                            option?: _75.VoteOption;
                            weight?: string;
                        } & Record<Exclude<keyof I_15["votes"][number]["options"][number], keyof _75.WeightedVoteOption>, never>)[] & Record<Exclude<keyof I_15["votes"][number]["options"], keyof {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_15["votes"][number], keyof _75.Vote>, never>)[] & Record<Exclude<keyof I_15["votes"], keyof {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[];
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_15["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_15, keyof _76.QueryVotesResponse>, never>>(object: I_15): _76.QueryVotesResponse;
            };
            QueryParamsRequest: {
                encode(message: _76.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryParamsRequest;
                fromJSON(object: any): _76.QueryParamsRequest;
                toJSON(message: _76.QueryParamsRequest): unknown;
                fromPartial<I_16 extends {
                    paramsType?: string;
                } & {
                    paramsType?: string;
                } & Record<Exclude<keyof I_16, "paramsType">, never>>(object: I_16): _76.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _76.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryParamsResponse;
                fromJSON(object: any): _76.QueryParamsResponse;
                toJSON(message: _76.QueryParamsResponse): unknown;
                fromPartial<I_17 extends {
                    votingParams?: {
                        votingPeriod?: string;
                    };
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: string;
                    };
                    tallyParams?: {
                        quorum?: Uint8Array;
                        threshold?: Uint8Array;
                        vetoThreshold?: Uint8Array;
                    };
                } & {
                    votingParams?: {
                        votingPeriod?: string;
                    } & {
                        votingPeriod?: string;
                    } & Record<Exclude<keyof I_17["votingParams"], "votingPeriod">, never>;
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: string;
                    } & {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_17["depositParams"]["minDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_17["depositParams"]["minDeposit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        maxDepositPeriod?: string;
                    } & Record<Exclude<keyof I_17["depositParams"], keyof _75.DepositParams>, never>;
                    tallyParams?: {
                        quorum?: Uint8Array;
                        threshold?: Uint8Array;
                        vetoThreshold?: Uint8Array;
                    } & {
                        quorum?: Uint8Array;
                        threshold?: Uint8Array;
                        vetoThreshold?: Uint8Array;
                    } & Record<Exclude<keyof I_17["tallyParams"], keyof _75.TallyParams>, never>;
                } & Record<Exclude<keyof I_17, keyof _76.QueryParamsResponse>, never>>(object: I_17): _76.QueryParamsResponse;
            };
            QueryDepositRequest: {
                encode(message: _76.QueryDepositRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryDepositRequest;
                fromJSON(object: any): _76.QueryDepositRequest;
                toJSON(message: _76.QueryDepositRequest): unknown;
                fromPartial<I_18 extends {
                    proposalId?: any;
                    depositor?: string;
                } & {
                    proposalId?: any;
                    depositor?: string;
                } & Record<Exclude<keyof I_18, keyof _76.QueryDepositRequest>, never>>(object: I_18): _76.QueryDepositRequest;
            };
            QueryDepositResponse: {
                encode(message: _76.QueryDepositResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryDepositResponse;
                fromJSON(object: any): _76.QueryDepositResponse;
                toJSON(message: _76.QueryDepositResponse): unknown;
                fromPartial<I_19 extends {
                    deposit?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    };
                } & {
                    deposit?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_19["deposit"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_19["deposit"]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_19["deposit"], keyof _75.Deposit>, never>;
                } & Record<Exclude<keyof I_19, "deposit">, never>>(object: I_19): _76.QueryDepositResponse;
            };
            QueryDepositsRequest: {
                encode(message: _76.QueryDepositsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryDepositsRequest;
                fromJSON(object: any): _76.QueryDepositsRequest;
                toJSON(message: _76.QueryDepositsRequest): unknown;
                fromPartial<I_20 extends {
                    proposalId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    proposalId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_20["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_20, keyof _76.QueryDepositsRequest>, never>>(object: I_20): _76.QueryDepositsRequest;
            };
            QueryDepositsResponse: {
                encode(message: _76.QueryDepositsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryDepositsResponse;
                fromJSON(object: any): _76.QueryDepositsResponse;
                toJSON(message: _76.QueryDepositsResponse): unknown;
                fromPartial<I_21 extends {
                    deposits?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    deposits?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_21["deposits"][number]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_21["deposits"][number]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_21["deposits"][number], keyof _75.Deposit>, never>)[] & Record<Exclude<keyof I_21["deposits"], keyof {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_21["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_21, keyof _76.QueryDepositsResponse>, never>>(object: I_21): _76.QueryDepositsResponse;
            };
            QueryTallyResultRequest: {
                encode(message: _76.QueryTallyResultRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryTallyResultRequest;
                fromJSON(object: any): _76.QueryTallyResultRequest;
                toJSON(message: _76.QueryTallyResultRequest): unknown;
                fromPartial<I_22 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_22, "proposalId">, never>>(object: I_22): _76.QueryTallyResultRequest;
            };
            QueryTallyResultResponse: {
                encode(message: _76.QueryTallyResultResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _76.QueryTallyResultResponse;
                fromJSON(object: any): _76.QueryTallyResultResponse;
                toJSON(message: _76.QueryTallyResultResponse): unknown;
                fromPartial<I_23 extends {
                    tally?: {
                        yes?: string;
                        abstain?: string;
                        no?: string;
                        noWithVeto?: string;
                    };
                } & {
                    tally?: {
                        yes?: string;
                        abstain?: string;
                        no?: string;
                        noWithVeto?: string;
                    } & {
                        yes?: string;
                        abstain?: string;
                        no?: string;
                        noWithVeto?: string;
                    } & Record<Exclude<keyof I_23["tally"], keyof _75.TallyResult>, never>;
                } & Record<Exclude<keyof I_23, "tally">, never>>(object: I_23): _76.QueryTallyResultResponse;
            };
            voteOptionFromJSON(object: any): _75.VoteOption;
            voteOptionToJSON(object: _75.VoteOption): string;
            proposalStatusFromJSON(object: any): _75.ProposalStatus;
            proposalStatusToJSON(object: _75.ProposalStatus): string;
            VoteOption: typeof _75.VoteOption;
            ProposalStatus: typeof _75.ProposalStatus;
            WeightedVoteOption: {
                encode(message: _75.WeightedVoteOption, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.WeightedVoteOption;
                fromJSON(object: any): _75.WeightedVoteOption;
                toJSON(message: _75.WeightedVoteOption): unknown;
                fromPartial<I_24 extends {
                    option?: _75.VoteOption;
                    weight?: string;
                } & {
                    option?: _75.VoteOption;
                    weight?: string;
                } & Record<Exclude<keyof I_24, keyof _75.WeightedVoteOption>, never>>(object: I_24): _75.WeightedVoteOption;
            };
            TextProposal: {
                encode(message: _75.TextProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.TextProposal;
                fromJSON(object: any): _75.TextProposal;
                toJSON(message: _75.TextProposal): unknown;
                fromPartial<I_25 extends {
                    title?: string;
                    description?: string;
                } & {
                    title?: string;
                    description?: string;
                } & Record<Exclude<keyof I_25, keyof _75.TextProposal>, never>>(object: I_25): _75.TextProposal;
            };
            Deposit: {
                encode(message: _75.Deposit, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.Deposit;
                fromJSON(object: any): _75.Deposit;
                toJSON(message: _75.Deposit): unknown;
                fromPartial<I_26 extends {
                    proposalId?: any;
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    proposalId?: any;
                    depositor?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_26["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_26["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_26, keyof _75.Deposit>, never>>(object: I_26): _75.Deposit;
            };
            Proposal: {
                encode(message: _75.Proposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.Proposal;
                fromJSON(object: any): _75.Proposal;
                toJSON(message: _75.Proposal): unknown;
                fromPartial<I_27 extends {
                    proposalId?: any;
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    status?: _75.ProposalStatus;
                    finalTallyResult?: {
                        yes?: string;
                        abstain?: string;
                        no?: string;
                        noWithVeto?: string;
                    };
                    submitTime?: Date;
                    depositEndTime?: Date;
                    totalDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    votingStartTime?: Date;
                    votingEndTime?: Date;
                } & {
                    proposalId?: any;
                    content?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_27["content"], keyof import("../google/protobuf/any").Any>, never>;
                    status?: _75.ProposalStatus;
                    finalTallyResult?: {
                        yes?: string;
                        abstain?: string;
                        no?: string;
                        noWithVeto?: string;
                    } & {
                        yes?: string;
                        abstain?: string;
                        no?: string;
                        noWithVeto?: string;
                    } & Record<Exclude<keyof I_27["finalTallyResult"], keyof _75.TallyResult>, never>;
                    submitTime?: Date;
                    depositEndTime?: Date;
                    totalDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_27["totalDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_27["totalDeposit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    votingStartTime?: Date;
                    votingEndTime?: Date;
                } & Record<Exclude<keyof I_27, keyof _75.Proposal>, never>>(object: I_27): _75.Proposal;
            };
            TallyResult: {
                encode(message: _75.TallyResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.TallyResult;
                fromJSON(object: any): _75.TallyResult;
                toJSON(message: _75.TallyResult): unknown;
                fromPartial<I_28 extends {
                    yes?: string;
                    abstain?: string;
                    no?: string;
                    noWithVeto?: string;
                } & {
                    yes?: string;
                    abstain?: string;
                    no?: string;
                    noWithVeto?: string;
                } & Record<Exclude<keyof I_28, keyof _75.TallyResult>, never>>(object: I_28): _75.TallyResult;
            };
            Vote: {
                encode(message: _75.Vote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.Vote;
                fromJSON(object: any): _75.Vote;
                toJSON(message: _75.Vote): unknown;
                fromPartial<I_29 extends {
                    proposalId?: any;
                    voter?: string;
                    option?: _75.VoteOption;
                    options?: {
                        option?: _75.VoteOption;
                        weight?: string;
                    }[];
                } & {
                    proposalId?: any;
                    voter?: string;
                    option?: _75.VoteOption;
                    options?: {
                        option?: _75.VoteOption;
                        weight?: string;
                    }[] & ({
                        option?: _75.VoteOption;
                        weight?: string;
                    } & {
                        option?: _75.VoteOption;
                        weight?: string;
                    } & Record<Exclude<keyof I_29["options"][number], keyof _75.WeightedVoteOption>, never>)[] & Record<Exclude<keyof I_29["options"], keyof {
                        option?: _75.VoteOption;
                        weight?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_29, keyof _75.Vote>, never>>(object: I_29): _75.Vote;
            };
            DepositParams: {
                encode(message: _75.DepositParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.DepositParams;
                fromJSON(object: any): _75.DepositParams;
                toJSON(message: _75.DepositParams): unknown;
                fromPartial<I_30 extends {
                    minDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    maxDepositPeriod?: string;
                } & {
                    minDeposit?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_30["minDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_30["minDeposit"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    maxDepositPeriod?: string;
                } & Record<Exclude<keyof I_30, keyof _75.DepositParams>, never>>(object: I_30): _75.DepositParams;
            };
            VotingParams: {
                encode(message: _75.VotingParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.VotingParams;
                fromJSON(object: any): _75.VotingParams;
                toJSON(message: _75.VotingParams): unknown;
                fromPartial<I_31 extends {
                    votingPeriod?: string;
                } & {
                    votingPeriod?: string;
                } & Record<Exclude<keyof I_31, "votingPeriod">, never>>(object: I_31): _75.VotingParams;
            };
            TallyParams: {
                encode(message: _75.TallyParams, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _75.TallyParams;
                fromJSON(object: any): _75.TallyParams;
                toJSON(message: _75.TallyParams): unknown;
                fromPartial<I_32 extends {
                    quorum?: Uint8Array;
                    threshold?: Uint8Array;
                    vetoThreshold?: Uint8Array;
                } & {
                    quorum?: Uint8Array;
                    threshold?: Uint8Array;
                    vetoThreshold?: Uint8Array;
                } & Record<Exclude<keyof I_32, keyof _75.TallyParams>, never>>(object: I_32): _75.TallyParams;
            };
            GenesisState: {
                encode(message: _74.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _74.GenesisState;
                fromJSON(object: any): _74.GenesisState;
                toJSON(message: _74.GenesisState): unknown;
                fromPartial<I_33 extends {
                    startingProposalId?: any;
                    deposits?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[];
                    }[];
                    proposals?: {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    }[];
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: string;
                    };
                    votingParams?: {
                        votingPeriod?: string;
                    };
                    tallyParams?: {
                        quorum?: Uint8Array;
                        threshold?: Uint8Array;
                        vetoThreshold?: Uint8Array;
                    };
                } & {
                    startingProposalId?: any;
                    deposits?: {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_33["deposits"][number]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_33["deposits"][number]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_33["deposits"][number], keyof _75.Deposit>, never>)[] & Record<Exclude<keyof I_33["deposits"], keyof {
                        proposalId?: any;
                        depositor?: string;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[];
                    }[] & ({
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[];
                    } & {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[] & ({
                            option?: _75.VoteOption;
                            weight?: string;
                        } & {
                            option?: _75.VoteOption;
                            weight?: string;
                        } & Record<Exclude<keyof I_33["votes"][number]["options"][number], keyof _75.WeightedVoteOption>, never>)[] & Record<Exclude<keyof I_33["votes"][number]["options"], keyof {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_33["votes"][number], keyof _75.Vote>, never>)[] & Record<Exclude<keyof I_33["votes"], keyof {
                        proposalId?: any;
                        voter?: string;
                        option?: _75.VoteOption;
                        options?: {
                            option?: _75.VoteOption;
                            weight?: string;
                        }[];
                    }[]>, never>;
                    proposals?: {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    }[] & ({
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    } & {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_33["proposals"][number]["content"], keyof import("../google/protobuf/any").Any>, never>;
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        } & {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        } & Record<Exclude<keyof I_33["proposals"][number]["finalTallyResult"], keyof _75.TallyResult>, never>;
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_33["proposals"][number]["totalDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_33["proposals"][number]["totalDeposit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    } & Record<Exclude<keyof I_33["proposals"][number], keyof _75.Proposal>, never>)[] & Record<Exclude<keyof I_33["proposals"], keyof {
                        proposalId?: any;
                        content?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        status?: _75.ProposalStatus;
                        finalTallyResult?: {
                            yes?: string;
                            abstain?: string;
                            no?: string;
                            noWithVeto?: string;
                        };
                        submitTime?: Date;
                        depositEndTime?: Date;
                        totalDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        votingStartTime?: Date;
                        votingEndTime?: Date;
                    }[]>, never>;
                    depositParams?: {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        maxDepositPeriod?: string;
                    } & {
                        minDeposit?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_33["depositParams"]["minDeposit"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_33["depositParams"]["minDeposit"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        maxDepositPeriod?: string;
                    } & Record<Exclude<keyof I_33["depositParams"], keyof _75.DepositParams>, never>;
                    votingParams?: {
                        votingPeriod?: string;
                    } & {
                        votingPeriod?: string;
                    } & Record<Exclude<keyof I_33["votingParams"], "votingPeriod">, never>;
                    tallyParams?: {
                        quorum?: Uint8Array;
                        threshold?: Uint8Array;
                        vetoThreshold?: Uint8Array;
                    } & {
                        quorum?: Uint8Array;
                        threshold?: Uint8Array;
                        vetoThreshold?: Uint8Array;
                    } & Record<Exclude<keyof I_33["tallyParams"], keyof _75.TallyParams>, never>;
                } & Record<Exclude<keyof I_33, keyof _74.GenesisState>, never>>(object: I_33): _74.GenesisState;
            };
        };
    }
    namespace group {
        const v1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    createGroup(value: _81.MsgCreateGroup): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    updateGroupMembers(value: _81.MsgUpdateGroupMembers): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    updateGroupAdmin(value: _81.MsgUpdateGroupAdmin): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    updateGroupMetadata(value: _81.MsgUpdateGroupMetadata): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    createGroupPolicy(value: _81.MsgCreateGroupPolicy): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    createGroupWithPolicy(value: _81.MsgCreateGroupWithPolicy): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    updateGroupPolicyAdmin(value: _81.MsgUpdateGroupPolicyAdmin): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    updateGroupPolicyDecisionPolicy(value: _81.MsgUpdateGroupPolicyDecisionPolicy): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    updateGroupPolicyMetadata(value: _81.MsgUpdateGroupPolicyMetadata): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    submitProposal(value: _81.MsgSubmitProposal): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    withdrawProposal(value: _81.MsgWithdrawProposal): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    vote(value: _81.MsgVote): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    exec(value: _81.MsgExec): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    leaveGroup(value: _81.MsgLeaveGroup): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    createGroup(value: _81.MsgCreateGroup): {
                        typeUrl: string;
                        value: _81.MsgCreateGroup;
                    };
                    updateGroupMembers(value: _81.MsgUpdateGroupMembers): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupMembers;
                    };
                    updateGroupAdmin(value: _81.MsgUpdateGroupAdmin): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupAdmin;
                    };
                    updateGroupMetadata(value: _81.MsgUpdateGroupMetadata): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupMetadata;
                    };
                    createGroupPolicy(value: _81.MsgCreateGroupPolicy): {
                        typeUrl: string;
                        value: _81.MsgCreateGroupPolicy;
                    };
                    createGroupWithPolicy(value: _81.MsgCreateGroupWithPolicy): {
                        typeUrl: string;
                        value: _81.MsgCreateGroupWithPolicy;
                    };
                    updateGroupPolicyAdmin(value: _81.MsgUpdateGroupPolicyAdmin): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupPolicyAdmin;
                    };
                    updateGroupPolicyDecisionPolicy(value: _81.MsgUpdateGroupPolicyDecisionPolicy): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupPolicyDecisionPolicy;
                    };
                    updateGroupPolicyMetadata(value: _81.MsgUpdateGroupPolicyMetadata): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupPolicyMetadata;
                    };
                    submitProposal(value: _81.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _81.MsgSubmitProposal;
                    };
                    withdrawProposal(value: _81.MsgWithdrawProposal): {
                        typeUrl: string;
                        value: _81.MsgWithdrawProposal;
                    };
                    vote(value: _81.MsgVote): {
                        typeUrl: string;
                        value: _81.MsgVote;
                    };
                    exec(value: _81.MsgExec): {
                        typeUrl: string;
                        value: _81.MsgExec;
                    };
                    leaveGroup(value: _81.MsgLeaveGroup): {
                        typeUrl: string;
                        value: _81.MsgLeaveGroup;
                    };
                };
                toJSON: {
                    createGroup(value: _81.MsgCreateGroup): {
                        typeUrl: string;
                        value: unknown;
                    };
                    updateGroupMembers(value: _81.MsgUpdateGroupMembers): {
                        typeUrl: string;
                        value: unknown;
                    };
                    updateGroupAdmin(value: _81.MsgUpdateGroupAdmin): {
                        typeUrl: string;
                        value: unknown;
                    };
                    updateGroupMetadata(value: _81.MsgUpdateGroupMetadata): {
                        typeUrl: string;
                        value: unknown;
                    };
                    createGroupPolicy(value: _81.MsgCreateGroupPolicy): {
                        typeUrl: string;
                        value: unknown;
                    };
                    createGroupWithPolicy(value: _81.MsgCreateGroupWithPolicy): {
                        typeUrl: string;
                        value: unknown;
                    };
                    updateGroupPolicyAdmin(value: _81.MsgUpdateGroupPolicyAdmin): {
                        typeUrl: string;
                        value: unknown;
                    };
                    updateGroupPolicyDecisionPolicy(value: _81.MsgUpdateGroupPolicyDecisionPolicy): {
                        typeUrl: string;
                        value: unknown;
                    };
                    updateGroupPolicyMetadata(value: _81.MsgUpdateGroupPolicyMetadata): {
                        typeUrl: string;
                        value: unknown;
                    };
                    submitProposal(value: _81.MsgSubmitProposal): {
                        typeUrl: string;
                        value: unknown;
                    };
                    withdrawProposal(value: _81.MsgWithdrawProposal): {
                        typeUrl: string;
                        value: unknown;
                    };
                    vote(value: _81.MsgVote): {
                        typeUrl: string;
                        value: unknown;
                    };
                    exec(value: _81.MsgExec): {
                        typeUrl: string;
                        value: unknown;
                    };
                    leaveGroup(value: _81.MsgLeaveGroup): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    createGroup(value: any): {
                        typeUrl: string;
                        value: _81.MsgCreateGroup;
                    };
                    updateGroupMembers(value: any): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupMembers;
                    };
                    updateGroupAdmin(value: any): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupAdmin;
                    };
                    updateGroupMetadata(value: any): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupMetadata;
                    };
                    createGroupPolicy(value: any): {
                        typeUrl: string;
                        value: _81.MsgCreateGroupPolicy;
                    };
                    createGroupWithPolicy(value: any): {
                        typeUrl: string;
                        value: _81.MsgCreateGroupWithPolicy;
                    };
                    updateGroupPolicyAdmin(value: any): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupPolicyAdmin;
                    };
                    updateGroupPolicyDecisionPolicy(value: any): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupPolicyDecisionPolicy;
                    };
                    updateGroupPolicyMetadata(value: any): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupPolicyMetadata;
                    };
                    submitProposal(value: any): {
                        typeUrl: string;
                        value: _81.MsgSubmitProposal;
                    };
                    withdrawProposal(value: any): {
                        typeUrl: string;
                        value: _81.MsgWithdrawProposal;
                    };
                    vote(value: any): {
                        typeUrl: string;
                        value: _81.MsgVote;
                    };
                    exec(value: any): {
                        typeUrl: string;
                        value: _81.MsgExec;
                    };
                    leaveGroup(value: any): {
                        typeUrl: string;
                        value: _81.MsgLeaveGroup;
                    };
                };
                fromPartial: {
                    createGroup(value: _81.MsgCreateGroup): {
                        typeUrl: string;
                        value: _81.MsgCreateGroup;
                    };
                    updateGroupMembers(value: _81.MsgUpdateGroupMembers): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupMembers;
                    };
                    updateGroupAdmin(value: _81.MsgUpdateGroupAdmin): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupAdmin;
                    };
                    updateGroupMetadata(value: _81.MsgUpdateGroupMetadata): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupMetadata;
                    };
                    createGroupPolicy(value: _81.MsgCreateGroupPolicy): {
                        typeUrl: string;
                        value: _81.MsgCreateGroupPolicy;
                    };
                    createGroupWithPolicy(value: _81.MsgCreateGroupWithPolicy): {
                        typeUrl: string;
                        value: _81.MsgCreateGroupWithPolicy;
                    };
                    updateGroupPolicyAdmin(value: _81.MsgUpdateGroupPolicyAdmin): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupPolicyAdmin;
                    };
                    updateGroupPolicyDecisionPolicy(value: _81.MsgUpdateGroupPolicyDecisionPolicy): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupPolicyDecisionPolicy;
                    };
                    updateGroupPolicyMetadata(value: _81.MsgUpdateGroupPolicyMetadata): {
                        typeUrl: string;
                        value: _81.MsgUpdateGroupPolicyMetadata;
                    };
                    submitProposal(value: _81.MsgSubmitProposal): {
                        typeUrl: string;
                        value: _81.MsgSubmitProposal;
                    };
                    withdrawProposal(value: _81.MsgWithdrawProposal): {
                        typeUrl: string;
                        value: _81.MsgWithdrawProposal;
                    };
                    vote(value: _81.MsgVote): {
                        typeUrl: string;
                        value: _81.MsgVote;
                    };
                    exec(value: _81.MsgExec): {
                        typeUrl: string;
                        value: _81.MsgExec;
                    };
                    leaveGroup(value: _81.MsgLeaveGroup): {
                        typeUrl: string;
                        value: _81.MsgLeaveGroup;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.group.v1.MsgCreateGroup": {
                    aminoType: string;
                    toAmino: ({ admin, members, metadata }: _81.MsgCreateGroup) => {
                        admin: string;
                        members: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                        metadata: string;
                    };
                    fromAmino: ({ admin, members, metadata }: {
                        admin: string;
                        members: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                        metadata: string;
                    }) => _81.MsgCreateGroup;
                };
                "/cosmos.group.v1.MsgUpdateGroupMembers": {
                    aminoType: string;
                    toAmino: ({ admin, groupId, memberUpdates }: _81.MsgUpdateGroupMembers) => {
                        admin: string;
                        group_id: string;
                        member_updates: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                    };
                    fromAmino: ({ admin, group_id, member_updates }: {
                        admin: string;
                        group_id: string;
                        member_updates: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                    }) => _81.MsgUpdateGroupMembers;
                };
                "/cosmos.group.v1.MsgUpdateGroupAdmin": {
                    aminoType: string;
                    toAmino: ({ admin, groupId, newAdmin }: _81.MsgUpdateGroupAdmin) => {
                        admin: string;
                        group_id: string;
                        new_admin: string;
                    };
                    fromAmino: ({ admin, group_id, new_admin }: {
                        admin: string;
                        group_id: string;
                        new_admin: string;
                    }) => _81.MsgUpdateGroupAdmin;
                };
                "/cosmos.group.v1.MsgUpdateGroupMetadata": {
                    aminoType: string;
                    toAmino: ({ admin, groupId, metadata }: _81.MsgUpdateGroupMetadata) => {
                        admin: string;
                        group_id: string;
                        metadata: string;
                    };
                    fromAmino: ({ admin, group_id, metadata }: {
                        admin: string;
                        group_id: string;
                        metadata: string;
                    }) => _81.MsgUpdateGroupMetadata;
                };
                "/cosmos.group.v1.MsgCreateGroupPolicy": {
                    aminoType: string;
                    toAmino: ({ admin, groupId, metadata, decisionPolicy }: _81.MsgCreateGroupPolicy) => {
                        admin: string;
                        group_id: string;
                        metadata: string;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ admin, group_id, metadata, decision_policy }: {
                        admin: string;
                        group_id: string;
                        metadata: string;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _81.MsgCreateGroupPolicy;
                };
                "/cosmos.group.v1.MsgCreateGroupWithPolicy": {
                    aminoType: string;
                    toAmino: ({ admin, members, groupMetadata, groupPolicyMetadata, groupPolicyAsAdmin, decisionPolicy }: _81.MsgCreateGroupWithPolicy) => {
                        admin: string;
                        members: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                        group_metadata: string;
                        group_policy_metadata: string;
                        group_policy_as_admin: boolean;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ admin, members, group_metadata, group_policy_metadata, group_policy_as_admin, decision_policy }: {
                        admin: string;
                        members: {
                            address: string;
                            weight: string;
                            metadata: string;
                            added_at: {
                                seconds: string;
                                nanos: number;
                            };
                        }[];
                        group_metadata: string;
                        group_policy_metadata: string;
                        group_policy_as_admin: boolean;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _81.MsgCreateGroupWithPolicy;
                };
                "/cosmos.group.v1.MsgUpdateGroupPolicyAdmin": {
                    aminoType: string;
                    toAmino: ({ admin, address, newAdmin }: _81.MsgUpdateGroupPolicyAdmin) => {
                        admin: string;
                        address: string;
                        new_admin: string;
                    };
                    fromAmino: ({ admin, address, new_admin }: {
                        admin: string;
                        address: string;
                        new_admin: string;
                    }) => _81.MsgUpdateGroupPolicyAdmin;
                };
                "/cosmos.group.v1.MsgUpdateGroupPolicyDecisionPolicy": {
                    aminoType: string;
                    toAmino: ({ admin, address, decisionPolicy }: _81.MsgUpdateGroupPolicyDecisionPolicy) => {
                        admin: string;
                        address: string;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    };
                    fromAmino: ({ admin, address, decision_policy }: {
                        admin: string;
                        address: string;
                        decision_policy: {
                            type_url: string;
                            value: Uint8Array;
                        };
                    }) => _81.MsgUpdateGroupPolicyDecisionPolicy;
                };
                "/cosmos.group.v1.MsgUpdateGroupPolicyMetadata": {
                    aminoType: string;
                    toAmino: ({ admin, address, metadata }: _81.MsgUpdateGroupPolicyMetadata) => {
                        admin: string;
                        address: string;
                        metadata: string;
                    };
                    fromAmino: ({ admin, address, metadata }: {
                        admin: string;
                        address: string;
                        metadata: string;
                    }) => _81.MsgUpdateGroupPolicyMetadata;
                };
                "/cosmos.group.v1.MsgSubmitProposal": {
                    aminoType: string;
                    toAmino: ({ address, proposers, metadata, messages, exec }: _81.MsgSubmitProposal) => {
                        address: string;
                        proposers: string[];
                        metadata: string;
                        messages: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                        exec: number;
                    };
                    fromAmino: ({ address, proposers, metadata, messages, exec }: {
                        address: string;
                        proposers: string[];
                        metadata: string;
                        messages: {
                            type_url: string;
                            value: Uint8Array;
                        }[];
                        exec: number;
                    }) => _81.MsgSubmitProposal;
                };
                "/cosmos.group.v1.MsgWithdrawProposal": {
                    aminoType: string;
                    toAmino: ({ proposalId, address }: _81.MsgWithdrawProposal) => {
                        proposal_id: string;
                        address: string;
                    };
                    fromAmino: ({ proposal_id, address }: {
                        proposal_id: string;
                        address: string;
                    }) => _81.MsgWithdrawProposal;
                };
                "/cosmos.group.v1.MsgVote": {
                    aminoType: string;
                    toAmino: ({ proposalId, voter, option, metadata, exec }: _81.MsgVote) => {
                        proposal_id: string;
                        voter: string;
                        option: number;
                        metadata: string;
                        exec: number;
                    };
                    fromAmino: ({ proposal_id, voter, option, metadata, exec }: {
                        proposal_id: string;
                        voter: string;
                        option: number;
                        metadata: string;
                        exec: number;
                    }) => _81.MsgVote;
                };
                "/cosmos.group.v1.MsgExec": {
                    aminoType: string;
                    toAmino: ({ proposalId, signer }: _81.MsgExec) => {
                        proposal_id: string;
                        signer: string;
                    };
                    fromAmino: ({ proposal_id, signer }: {
                        proposal_id: string;
                        signer: string;
                    }) => _81.MsgExec;
                };
                "/cosmos.group.v1.MsgLeaveGroup": {
                    aminoType: string;
                    toAmino: ({ address, groupId }: _81.MsgLeaveGroup) => {
                        address: string;
                        group_id: string;
                    };
                    fromAmino: ({ address, group_id }: {
                        address: string;
                        group_id: string;
                    }) => _81.MsgLeaveGroup;
                };
            };
            voteOptionFromJSON(object: any): _82.VoteOption;
            voteOptionToJSON(object: _82.VoteOption): string;
            proposalStatusFromJSON(object: any): _82.ProposalStatus;
            proposalStatusToJSON(object: _82.ProposalStatus): string;
            proposalResultFromJSON(object: any): _82.ProposalResult;
            proposalResultToJSON(object: _82.ProposalResult): string;
            proposalExecutorResultFromJSON(object: any): _82.ProposalExecutorResult;
            proposalExecutorResultToJSON(object: _82.ProposalExecutorResult): string;
            VoteOption: typeof _82.VoteOption;
            ProposalStatus: typeof _82.ProposalStatus;
            ProposalResult: typeof _82.ProposalResult;
            ProposalExecutorResult: typeof _82.ProposalExecutorResult;
            Member: {
                encode(message: _82.Member, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.Member;
                fromJSON(object: any): _82.Member;
                toJSON(message: _82.Member): unknown;
                fromPartial<I extends {
                    address?: string;
                    weight?: string;
                    metadata?: string;
                    addedAt?: Date;
                } & {
                    address?: string;
                    weight?: string;
                    metadata?: string;
                    addedAt?: Date;
                } & Record<Exclude<keyof I, keyof _82.Member>, never>>(object: I): _82.Member;
            };
            Members: {
                encode(message: _82.Members, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.Members;
                fromJSON(object: any): _82.Members;
                toJSON(message: _82.Members): unknown;
                fromPartial<I_1 extends {
                    members?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[];
                } & {
                    members?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[] & ({
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    } & {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    } & Record<Exclude<keyof I_1["members"][number], keyof _82.Member>, never>)[] & Record<Exclude<keyof I_1["members"], keyof {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[]>, never>;
                } & Record<Exclude<keyof I_1, "members">, never>>(object: I_1): _82.Members;
            };
            ThresholdDecisionPolicy: {
                encode(message: _82.ThresholdDecisionPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.ThresholdDecisionPolicy;
                fromJSON(object: any): _82.ThresholdDecisionPolicy;
                toJSON(message: _82.ThresholdDecisionPolicy): unknown;
                fromPartial<I_2 extends {
                    threshold?: string;
                    windows?: {
                        votingPeriod?: string;
                        minExecutionPeriod?: string;
                    };
                } & {
                    threshold?: string;
                    windows?: {
                        votingPeriod?: string;
                        minExecutionPeriod?: string;
                    } & {
                        votingPeriod?: string;
                        minExecutionPeriod?: string;
                    } & Record<Exclude<keyof I_2["windows"], keyof _82.DecisionPolicyWindows>, never>;
                } & Record<Exclude<keyof I_2, keyof _82.ThresholdDecisionPolicy>, never>>(object: I_2): _82.ThresholdDecisionPolicy;
            };
            PercentageDecisionPolicy: {
                encode(message: _82.PercentageDecisionPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.PercentageDecisionPolicy;
                fromJSON(object: any): _82.PercentageDecisionPolicy;
                toJSON(message: _82.PercentageDecisionPolicy): unknown;
                fromPartial<I_3 extends {
                    percentage?: string;
                    windows?: {
                        votingPeriod?: string;
                        minExecutionPeriod?: string;
                    };
                } & {
                    percentage?: string;
                    windows?: {
                        votingPeriod?: string;
                        minExecutionPeriod?: string;
                    } & {
                        votingPeriod?: string;
                        minExecutionPeriod?: string;
                    } & Record<Exclude<keyof I_3["windows"], keyof _82.DecisionPolicyWindows>, never>;
                } & Record<Exclude<keyof I_3, keyof _82.PercentageDecisionPolicy>, never>>(object: I_3): _82.PercentageDecisionPolicy;
            };
            DecisionPolicyWindows: {
                encode(message: _82.DecisionPolicyWindows, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.DecisionPolicyWindows;
                fromJSON(object: any): _82.DecisionPolicyWindows;
                toJSON(message: _82.DecisionPolicyWindows): unknown;
                fromPartial<I_4 extends {
                    votingPeriod?: string;
                    minExecutionPeriod?: string;
                } & {
                    votingPeriod?: string;
                    minExecutionPeriod?: string;
                } & Record<Exclude<keyof I_4, keyof _82.DecisionPolicyWindows>, never>>(object: I_4): _82.DecisionPolicyWindows;
            };
            GroupInfo: {
                encode(message: _82.GroupInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.GroupInfo;
                fromJSON(object: any): _82.GroupInfo;
                toJSON(message: _82.GroupInfo): unknown;
                fromPartial<I_5 extends {
                    id?: any;
                    admin?: string;
                    metadata?: string;
                    version?: any;
                    totalWeight?: string;
                    createdAt?: Date;
                } & {
                    id?: any;
                    admin?: string;
                    metadata?: string;
                    version?: any;
                    totalWeight?: string;
                    createdAt?: Date;
                } & Record<Exclude<keyof I_5, keyof _82.GroupInfo>, never>>(object: I_5): _82.GroupInfo;
            };
            GroupMember: {
                encode(message: _82.GroupMember, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.GroupMember;
                fromJSON(object: any): _82.GroupMember;
                toJSON(message: _82.GroupMember): unknown;
                fromPartial<I_6 extends {
                    groupId?: any;
                    member?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    };
                } & {
                    groupId?: any;
                    member?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    } & {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    } & Record<Exclude<keyof I_6["member"], keyof _82.Member>, never>;
                } & Record<Exclude<keyof I_6, keyof _82.GroupMember>, never>>(object: I_6): _82.GroupMember;
            };
            GroupPolicyInfo: {
                encode(message: _82.GroupPolicyInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.GroupPolicyInfo;
                fromJSON(object: any): _82.GroupPolicyInfo;
                toJSON(message: _82.GroupPolicyInfo): unknown;
                fromPartial<I_7 extends {
                    address?: string;
                    groupId?: any;
                    admin?: string;
                    metadata?: string;
                    version?: any;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    createdAt?: Date;
                } & {
                    address?: string;
                    groupId?: any;
                    admin?: string;
                    metadata?: string;
                    version?: any;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_7["decisionPolicy"], keyof import("../google/protobuf/any").Any>, never>;
                    createdAt?: Date;
                } & Record<Exclude<keyof I_7, keyof _82.GroupPolicyInfo>, never>>(object: I_7): _82.GroupPolicyInfo;
            };
            Proposal: {
                encode(message: _82.Proposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.Proposal;
                fromJSON(object: any): _82.Proposal;
                toJSON(message: _82.Proposal): unknown;
                fromPartial<I_8 extends {
                    id?: any;
                    address?: string;
                    metadata?: string;
                    proposers?: string[];
                    submitTime?: Date;
                    groupVersion?: any;
                    groupPolicyVersion?: any;
                    status?: _82.ProposalStatus;
                    result?: _82.ProposalResult;
                    finalTallyResult?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    };
                    votingPeriodEnd?: Date;
                    executorResult?: _82.ProposalExecutorResult;
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                } & {
                    id?: any;
                    address?: string;
                    metadata?: string;
                    proposers?: string[] & string[] & Record<Exclude<keyof I_8["proposers"], keyof string[]>, never>;
                    submitTime?: Date;
                    groupVersion?: any;
                    groupPolicyVersion?: any;
                    status?: _82.ProposalStatus;
                    result?: _82.ProposalResult;
                    finalTallyResult?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    } & {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    } & Record<Exclude<keyof I_8["finalTallyResult"], keyof _82.TallyResult>, never>;
                    votingPeriodEnd?: Date;
                    executorResult?: _82.ProposalExecutorResult;
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_8["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_8["messages"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                } & Record<Exclude<keyof I_8, keyof _82.Proposal>, never>>(object: I_8): _82.Proposal;
            };
            TallyResult: {
                encode(message: _82.TallyResult, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.TallyResult;
                fromJSON(object: any): _82.TallyResult;
                toJSON(message: _82.TallyResult): unknown;
                fromPartial<I_9 extends {
                    yesCount?: string;
                    abstainCount?: string;
                    noCount?: string;
                    noWithVetoCount?: string;
                } & {
                    yesCount?: string;
                    abstainCount?: string;
                    noCount?: string;
                    noWithVetoCount?: string;
                } & Record<Exclude<keyof I_9, keyof _82.TallyResult>, never>>(object: I_9): _82.TallyResult;
            };
            Vote: {
                encode(message: _82.Vote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _82.Vote;
                fromJSON(object: any): _82.Vote;
                toJSON(message: _82.Vote): unknown;
                fromPartial<I_10 extends {
                    proposalId?: any;
                    voter?: string;
                    option?: _82.VoteOption;
                    metadata?: string;
                    submitTime?: Date;
                } & {
                    proposalId?: any;
                    voter?: string;
                    option?: _82.VoteOption;
                    metadata?: string;
                    submitTime?: Date;
                } & Record<Exclude<keyof I_10, keyof _82.Vote>, never>>(object: I_10): _82.Vote;
            };
            execFromJSON(object: any): _81.Exec;
            execToJSON(object: _81.Exec): string;
            Exec: typeof _81.Exec;
            MsgCreateGroup: {
                encode(message: _81.MsgCreateGroup, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgCreateGroup;
                fromJSON(object: any): _81.MsgCreateGroup;
                toJSON(message: _81.MsgCreateGroup): unknown;
                fromPartial<I_11 extends {
                    admin?: string;
                    members?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[];
                    metadata?: string;
                } & {
                    admin?: string;
                    members?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[] & ({
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    } & {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    } & Record<Exclude<keyof I_11["members"][number], keyof _82.Member>, never>)[] & Record<Exclude<keyof I_11["members"], keyof {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[]>, never>;
                    metadata?: string;
                } & Record<Exclude<keyof I_11, keyof _81.MsgCreateGroup>, never>>(object: I_11): _81.MsgCreateGroup;
            };
            MsgCreateGroupResponse: {
                encode(message: _81.MsgCreateGroupResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgCreateGroupResponse;
                fromJSON(object: any): _81.MsgCreateGroupResponse;
                toJSON(message: _81.MsgCreateGroupResponse): unknown;
                fromPartial<I_12 extends {
                    groupId?: any;
                } & {
                    groupId?: any;
                } & Record<Exclude<keyof I_12, "groupId">, never>>(object: I_12): _81.MsgCreateGroupResponse;
            };
            MsgUpdateGroupMembers: {
                encode(message: _81.MsgUpdateGroupMembers, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupMembers;
                fromJSON(object: any): _81.MsgUpdateGroupMembers;
                toJSON(message: _81.MsgUpdateGroupMembers): unknown;
                fromPartial<I_13 extends {
                    admin?: string;
                    groupId?: any;
                    memberUpdates?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[];
                } & {
                    admin?: string;
                    groupId?: any;
                    memberUpdates?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[] & ({
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    } & {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    } & Record<Exclude<keyof I_13["memberUpdates"][number], keyof _82.Member>, never>)[] & Record<Exclude<keyof I_13["memberUpdates"], keyof {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[]>, never>;
                } & Record<Exclude<keyof I_13, keyof _81.MsgUpdateGroupMembers>, never>>(object: I_13): _81.MsgUpdateGroupMembers;
            };
            MsgUpdateGroupMembersResponse: {
                encode(_: _81.MsgUpdateGroupMembersResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupMembersResponse;
                fromJSON(_: any): _81.MsgUpdateGroupMembersResponse;
                toJSON(_: _81.MsgUpdateGroupMembersResponse): unknown;
                fromPartial<I_14 extends {} & {} & Record<Exclude<keyof I_14, never>, never>>(_: I_14): _81.MsgUpdateGroupMembersResponse;
            };
            MsgUpdateGroupAdmin: {
                encode(message: _81.MsgUpdateGroupAdmin, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupAdmin;
                fromJSON(object: any): _81.MsgUpdateGroupAdmin;
                toJSON(message: _81.MsgUpdateGroupAdmin): unknown;
                fromPartial<I_15 extends {
                    admin?: string;
                    groupId?: any;
                    newAdmin?: string;
                } & {
                    admin?: string;
                    groupId?: any;
                    newAdmin?: string;
                } & Record<Exclude<keyof I_15, keyof _81.MsgUpdateGroupAdmin>, never>>(object: I_15): _81.MsgUpdateGroupAdmin;
            };
            MsgUpdateGroupAdminResponse: {
                encode(_: _81.MsgUpdateGroupAdminResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupAdminResponse;
                fromJSON(_: any): _81.MsgUpdateGroupAdminResponse;
                toJSON(_: _81.MsgUpdateGroupAdminResponse): unknown;
                fromPartial<I_16 extends {} & {} & Record<Exclude<keyof I_16, never>, never>>(_: I_16): _81.MsgUpdateGroupAdminResponse;
            };
            MsgUpdateGroupMetadata: {
                encode(message: _81.MsgUpdateGroupMetadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupMetadata;
                fromJSON(object: any): _81.MsgUpdateGroupMetadata;
                toJSON(message: _81.MsgUpdateGroupMetadata): unknown;
                fromPartial<I_17 extends {
                    admin?: string;
                    groupId?: any;
                    metadata?: string;
                } & {
                    admin?: string;
                    groupId?: any;
                    metadata?: string;
                } & Record<Exclude<keyof I_17, keyof _81.MsgUpdateGroupMetadata>, never>>(object: I_17): _81.MsgUpdateGroupMetadata;
            };
            MsgUpdateGroupMetadataResponse: {
                encode(_: _81.MsgUpdateGroupMetadataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupMetadataResponse;
                fromJSON(_: any): _81.MsgUpdateGroupMetadataResponse;
                toJSON(_: _81.MsgUpdateGroupMetadataResponse): unknown;
                fromPartial<I_18 extends {} & {} & Record<Exclude<keyof I_18, never>, never>>(_: I_18): _81.MsgUpdateGroupMetadataResponse;
            };
            MsgCreateGroupPolicy: {
                encode(message: _81.MsgCreateGroupPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgCreateGroupPolicy;
                fromJSON(object: any): _81.MsgCreateGroupPolicy;
                toJSON(message: _81.MsgCreateGroupPolicy): unknown;
                fromPartial<I_19 extends {
                    admin?: string;
                    groupId?: any;
                    metadata?: string;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    admin?: string;
                    groupId?: any;
                    metadata?: string;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_19["decisionPolicy"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I_19, keyof _81.MsgCreateGroupPolicy>, never>>(object: I_19): _81.MsgCreateGroupPolicy;
            };
            MsgCreateGroupPolicyResponse: {
                encode(message: _81.MsgCreateGroupPolicyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgCreateGroupPolicyResponse;
                fromJSON(object: any): _81.MsgCreateGroupPolicyResponse;
                toJSON(message: _81.MsgCreateGroupPolicyResponse): unknown;
                fromPartial<I_20 extends {
                    address?: string;
                } & {
                    address?: string;
                } & Record<Exclude<keyof I_20, "address">, never>>(object: I_20): _81.MsgCreateGroupPolicyResponse;
            };
            MsgUpdateGroupPolicyAdmin: {
                encode(message: _81.MsgUpdateGroupPolicyAdmin, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupPolicyAdmin;
                fromJSON(object: any): _81.MsgUpdateGroupPolicyAdmin;
                toJSON(message: _81.MsgUpdateGroupPolicyAdmin): unknown;
                fromPartial<I_21 extends {
                    admin?: string;
                    address?: string;
                    newAdmin?: string;
                } & {
                    admin?: string;
                    address?: string;
                    newAdmin?: string;
                } & Record<Exclude<keyof I_21, keyof _81.MsgUpdateGroupPolicyAdmin>, never>>(object: I_21): _81.MsgUpdateGroupPolicyAdmin;
            };
            MsgCreateGroupWithPolicy: {
                encode(message: _81.MsgCreateGroupWithPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgCreateGroupWithPolicy;
                fromJSON(object: any): _81.MsgCreateGroupWithPolicy;
                toJSON(message: _81.MsgCreateGroupWithPolicy): unknown;
                fromPartial<I_22 extends {
                    admin?: string;
                    members?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[];
                    groupMetadata?: string;
                    groupPolicyMetadata?: string;
                    groupPolicyAsAdmin?: boolean;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    admin?: string;
                    members?: {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[] & ({
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    } & {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    } & Record<Exclude<keyof I_22["members"][number], keyof _82.Member>, never>)[] & Record<Exclude<keyof I_22["members"], keyof {
                        address?: string;
                        weight?: string;
                        metadata?: string;
                        addedAt?: Date;
                    }[]>, never>;
                    groupMetadata?: string;
                    groupPolicyMetadata?: string;
                    groupPolicyAsAdmin?: boolean;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_22["decisionPolicy"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I_22, keyof _81.MsgCreateGroupWithPolicy>, never>>(object: I_22): _81.MsgCreateGroupWithPolicy;
            };
            MsgCreateGroupWithPolicyResponse: {
                encode(message: _81.MsgCreateGroupWithPolicyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgCreateGroupWithPolicyResponse;
                fromJSON(object: any): _81.MsgCreateGroupWithPolicyResponse;
                toJSON(message: _81.MsgCreateGroupWithPolicyResponse): unknown;
                fromPartial<I_23 extends {
                    groupId?: any;
                    groupPolicyAddress?: string;
                } & {
                    groupId?: any;
                    groupPolicyAddress?: string;
                } & Record<Exclude<keyof I_23, keyof _81.MsgCreateGroupWithPolicyResponse>, never>>(object: I_23): _81.MsgCreateGroupWithPolicyResponse;
            };
            MsgUpdateGroupPolicyAdminResponse: {
                encode(_: _81.MsgUpdateGroupPolicyAdminResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupPolicyAdminResponse;
                fromJSON(_: any): _81.MsgUpdateGroupPolicyAdminResponse;
                toJSON(_: _81.MsgUpdateGroupPolicyAdminResponse): unknown;
                fromPartial<I_24 extends {} & {} & Record<Exclude<keyof I_24, never>, never>>(_: I_24): _81.MsgUpdateGroupPolicyAdminResponse;
            };
            MsgUpdateGroupPolicyDecisionPolicy: {
                encode(message: _81.MsgUpdateGroupPolicyDecisionPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupPolicyDecisionPolicy;
                fromJSON(object: any): _81.MsgUpdateGroupPolicyDecisionPolicy;
                toJSON(message: _81.MsgUpdateGroupPolicyDecisionPolicy): unknown;
                fromPartial<I_25 extends {
                    admin?: string;
                    address?: string;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    admin?: string;
                    address?: string;
                    decisionPolicy?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_25["decisionPolicy"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I_25, keyof _81.MsgUpdateGroupPolicyDecisionPolicy>, never>>(object: I_25): _81.MsgUpdateGroupPolicyDecisionPolicy;
            };
            MsgUpdateGroupPolicyDecisionPolicyResponse: {
                encode(_: _81.MsgUpdateGroupPolicyDecisionPolicyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupPolicyDecisionPolicyResponse;
                fromJSON(_: any): _81.MsgUpdateGroupPolicyDecisionPolicyResponse;
                toJSON(_: _81.MsgUpdateGroupPolicyDecisionPolicyResponse): unknown;
                fromPartial<I_26 extends {} & {} & Record<Exclude<keyof I_26, never>, never>>(_: I_26): _81.MsgUpdateGroupPolicyDecisionPolicyResponse;
            };
            MsgUpdateGroupPolicyMetadata: {
                encode(message: _81.MsgUpdateGroupPolicyMetadata, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupPolicyMetadata;
                fromJSON(object: any): _81.MsgUpdateGroupPolicyMetadata;
                toJSON(message: _81.MsgUpdateGroupPolicyMetadata): unknown;
                fromPartial<I_27 extends {
                    admin?: string;
                    address?: string;
                    metadata?: string;
                } & {
                    admin?: string;
                    address?: string;
                    metadata?: string;
                } & Record<Exclude<keyof I_27, keyof _81.MsgUpdateGroupPolicyMetadata>, never>>(object: I_27): _81.MsgUpdateGroupPolicyMetadata;
            };
            MsgUpdateGroupPolicyMetadataResponse: {
                encode(_: _81.MsgUpdateGroupPolicyMetadataResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgUpdateGroupPolicyMetadataResponse;
                fromJSON(_: any): _81.MsgUpdateGroupPolicyMetadataResponse;
                toJSON(_: _81.MsgUpdateGroupPolicyMetadataResponse): unknown;
                fromPartial<I_28 extends {} & {} & Record<Exclude<keyof I_28, never>, never>>(_: I_28): _81.MsgUpdateGroupPolicyMetadataResponse;
            };
            MsgSubmitProposal: {
                encode(message: _81.MsgSubmitProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgSubmitProposal;
                fromJSON(object: any): _81.MsgSubmitProposal;
                toJSON(message: _81.MsgSubmitProposal): unknown;
                fromPartial<I_29 extends {
                    address?: string;
                    proposers?: string[];
                    metadata?: string;
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    exec?: _81.Exec;
                } & {
                    address?: string;
                    proposers?: string[] & string[] & Record<Exclude<keyof I_29["proposers"], keyof string[]>, never>;
                    metadata?: string;
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_29["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_29["messages"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                    exec?: _81.Exec;
                } & Record<Exclude<keyof I_29, keyof _81.MsgSubmitProposal>, never>>(object: I_29): _81.MsgSubmitProposal;
            };
            MsgSubmitProposalResponse: {
                encode(message: _81.MsgSubmitProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgSubmitProposalResponse;
                fromJSON(object: any): _81.MsgSubmitProposalResponse;
                toJSON(message: _81.MsgSubmitProposalResponse): unknown;
                fromPartial<I_30 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_30, "proposalId">, never>>(object: I_30): _81.MsgSubmitProposalResponse;
            };
            MsgWithdrawProposal: {
                encode(message: _81.MsgWithdrawProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgWithdrawProposal;
                fromJSON(object: any): _81.MsgWithdrawProposal;
                toJSON(message: _81.MsgWithdrawProposal): unknown;
                fromPartial<I_31 extends {
                    proposalId?: any;
                    address?: string;
                } & {
                    proposalId?: any;
                    address?: string;
                } & Record<Exclude<keyof I_31, keyof _81.MsgWithdrawProposal>, never>>(object: I_31): _81.MsgWithdrawProposal;
            };
            MsgWithdrawProposalResponse: {
                encode(_: _81.MsgWithdrawProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgWithdrawProposalResponse;
                fromJSON(_: any): _81.MsgWithdrawProposalResponse;
                toJSON(_: _81.MsgWithdrawProposalResponse): unknown;
                fromPartial<I_32 extends {} & {} & Record<Exclude<keyof I_32, never>, never>>(_: I_32): _81.MsgWithdrawProposalResponse;
            };
            MsgVote: {
                encode(message: _81.MsgVote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgVote;
                fromJSON(object: any): _81.MsgVote;
                toJSON(message: _81.MsgVote): unknown;
                fromPartial<I_33 extends {
                    proposalId?: any;
                    voter?: string;
                    option?: _82.VoteOption;
                    metadata?: string;
                    exec?: _81.Exec;
                } & {
                    proposalId?: any;
                    voter?: string;
                    option?: _82.VoteOption;
                    metadata?: string;
                    exec?: _81.Exec;
                } & Record<Exclude<keyof I_33, keyof _81.MsgVote>, never>>(object: I_33): _81.MsgVote;
            };
            MsgVoteResponse: {
                encode(_: _81.MsgVoteResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgVoteResponse;
                fromJSON(_: any): _81.MsgVoteResponse;
                toJSON(_: _81.MsgVoteResponse): unknown;
                fromPartial<I_34 extends {} & {} & Record<Exclude<keyof I_34, never>, never>>(_: I_34): _81.MsgVoteResponse;
            };
            MsgExec: {
                encode(message: _81.MsgExec, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgExec;
                fromJSON(object: any): _81.MsgExec;
                toJSON(message: _81.MsgExec): unknown;
                fromPartial<I_35 extends {
                    proposalId?: any;
                    signer?: string;
                } & {
                    proposalId?: any;
                    signer?: string;
                } & Record<Exclude<keyof I_35, keyof _81.MsgExec>, never>>(object: I_35): _81.MsgExec;
            };
            MsgExecResponse: {
                encode(_: _81.MsgExecResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgExecResponse;
                fromJSON(_: any): _81.MsgExecResponse;
                toJSON(_: _81.MsgExecResponse): unknown;
                fromPartial<I_36 extends {} & {} & Record<Exclude<keyof I_36, never>, never>>(_: I_36): _81.MsgExecResponse;
            };
            MsgLeaveGroup: {
                encode(message: _81.MsgLeaveGroup, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgLeaveGroup;
                fromJSON(object: any): _81.MsgLeaveGroup;
                toJSON(message: _81.MsgLeaveGroup): unknown;
                fromPartial<I_37 extends {
                    address?: string;
                    groupId?: any;
                } & {
                    address?: string;
                    groupId?: any;
                } & Record<Exclude<keyof I_37, keyof _81.MsgLeaveGroup>, never>>(object: I_37): _81.MsgLeaveGroup;
            };
            MsgLeaveGroupResponse: {
                encode(_: _81.MsgLeaveGroupResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _81.MsgLeaveGroupResponse;
                fromJSON(_: any): _81.MsgLeaveGroupResponse;
                toJSON(_: _81.MsgLeaveGroupResponse): unknown;
                fromPartial<I_38 extends {} & {} & Record<Exclude<keyof I_38, never>, never>>(_: I_38): _81.MsgLeaveGroupResponse;
            };
            QueryGroupInfoRequest: {
                encode(message: _80.QueryGroupInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupInfoRequest;
                fromJSON(object: any): _80.QueryGroupInfoRequest;
                toJSON(message: _80.QueryGroupInfoRequest): unknown;
                fromPartial<I_39 extends {
                    groupId?: any;
                } & {
                    groupId?: any;
                } & Record<Exclude<keyof I_39, "groupId">, never>>(object: I_39): _80.QueryGroupInfoRequest;
            };
            QueryGroupInfoResponse: {
                encode(message: _80.QueryGroupInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupInfoResponse;
                fromJSON(object: any): _80.QueryGroupInfoResponse;
                toJSON(message: _80.QueryGroupInfoResponse): unknown;
                fromPartial<I_40 extends {
                    info?: {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    };
                } & {
                    info?: {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    } & {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    } & Record<Exclude<keyof I_40["info"], keyof _82.GroupInfo>, never>;
                } & Record<Exclude<keyof I_40, "info">, never>>(object: I_40): _80.QueryGroupInfoResponse;
            };
            QueryGroupPolicyInfoRequest: {
                encode(message: _80.QueryGroupPolicyInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupPolicyInfoRequest;
                fromJSON(object: any): _80.QueryGroupPolicyInfoRequest;
                toJSON(message: _80.QueryGroupPolicyInfoRequest): unknown;
                fromPartial<I_41 extends {
                    address?: string;
                } & {
                    address?: string;
                } & Record<Exclude<keyof I_41, "address">, never>>(object: I_41): _80.QueryGroupPolicyInfoRequest;
            };
            QueryGroupPolicyInfoResponse: {
                encode(message: _80.QueryGroupPolicyInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupPolicyInfoResponse;
                fromJSON(object: any): _80.QueryGroupPolicyInfoResponse;
                toJSON(message: _80.QueryGroupPolicyInfoResponse): unknown;
                fromPartial<I_42 extends {
                    info?: {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    };
                } & {
                    info?: {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    } & {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_42["info"]["decisionPolicy"], keyof import("../google/protobuf/any").Any>, never>;
                        createdAt?: Date;
                    } & Record<Exclude<keyof I_42["info"], keyof _82.GroupPolicyInfo>, never>;
                } & Record<Exclude<keyof I_42, "info">, never>>(object: I_42): _80.QueryGroupPolicyInfoResponse;
            };
            QueryGroupMembersRequest: {
                encode(message: _80.QueryGroupMembersRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupMembersRequest;
                fromJSON(object: any): _80.QueryGroupMembersRequest;
                toJSON(message: _80.QueryGroupMembersRequest): unknown;
                fromPartial<I_43 extends {
                    groupId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    groupId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_43["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_43, keyof _80.QueryGroupMembersRequest>, never>>(object: I_43): _80.QueryGroupMembersRequest;
            };
            QueryGroupMembersResponse: {
                encode(message: _80.QueryGroupMembersResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupMembersResponse;
                fromJSON(object: any): _80.QueryGroupMembersResponse;
                toJSON(message: _80.QueryGroupMembersResponse): unknown;
                fromPartial<I_44 extends {
                    members?: {
                        groupId?: any;
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    members?: {
                        groupId?: any;
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        };
                    }[] & ({
                        groupId?: any;
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        };
                    } & {
                        groupId?: any;
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        } & {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        } & Record<Exclude<keyof I_44["members"][number]["member"], keyof _82.Member>, never>;
                    } & Record<Exclude<keyof I_44["members"][number], keyof _82.GroupMember>, never>)[] & Record<Exclude<keyof I_44["members"], keyof {
                        groupId?: any;
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        };
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_44["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_44, keyof _80.QueryGroupMembersResponse>, never>>(object: I_44): _80.QueryGroupMembersResponse;
            };
            QueryGroupsByAdminRequest: {
                encode(message: _80.QueryGroupsByAdminRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupsByAdminRequest;
                fromJSON(object: any): _80.QueryGroupsByAdminRequest;
                toJSON(message: _80.QueryGroupsByAdminRequest): unknown;
                fromPartial<I_45 extends {
                    admin?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    admin?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_45["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_45, keyof _80.QueryGroupsByAdminRequest>, never>>(object: I_45): _80.QueryGroupsByAdminRequest;
            };
            QueryGroupsByAdminResponse: {
                encode(message: _80.QueryGroupsByAdminResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupsByAdminResponse;
                fromJSON(object: any): _80.QueryGroupsByAdminResponse;
                toJSON(message: _80.QueryGroupsByAdminResponse): unknown;
                fromPartial<I_46 extends {
                    groups?: {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    groups?: {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    }[] & ({
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    } & {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    } & Record<Exclude<keyof I_46["groups"][number], keyof _82.GroupInfo>, never>)[] & Record<Exclude<keyof I_46["groups"], keyof {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_46["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_46, keyof _80.QueryGroupsByAdminResponse>, never>>(object: I_46): _80.QueryGroupsByAdminResponse;
            };
            QueryGroupPoliciesByGroupRequest: {
                encode(message: _80.QueryGroupPoliciesByGroupRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupPoliciesByGroupRequest;
                fromJSON(object: any): _80.QueryGroupPoliciesByGroupRequest;
                toJSON(message: _80.QueryGroupPoliciesByGroupRequest): unknown;
                fromPartial<I_47 extends {
                    groupId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    groupId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_47["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_47, keyof _80.QueryGroupPoliciesByGroupRequest>, never>>(object: I_47): _80.QueryGroupPoliciesByGroupRequest;
            };
            QueryGroupPoliciesByGroupResponse: {
                encode(message: _80.QueryGroupPoliciesByGroupResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupPoliciesByGroupResponse;
                fromJSON(object: any): _80.QueryGroupPoliciesByGroupResponse;
                toJSON(message: _80.QueryGroupPoliciesByGroupResponse): unknown;
                fromPartial<I_48 extends {
                    groupPolicies?: {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    groupPolicies?: {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[] & ({
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    } & {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_48["groupPolicies"][number]["decisionPolicy"], keyof import("../google/protobuf/any").Any>, never>;
                        createdAt?: Date;
                    } & Record<Exclude<keyof I_48["groupPolicies"][number], keyof _82.GroupPolicyInfo>, never>)[] & Record<Exclude<keyof I_48["groupPolicies"], keyof {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_48["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_48, keyof _80.QueryGroupPoliciesByGroupResponse>, never>>(object: I_48): _80.QueryGroupPoliciesByGroupResponse;
            };
            QueryGroupPoliciesByAdminRequest: {
                encode(message: _80.QueryGroupPoliciesByAdminRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupPoliciesByAdminRequest;
                fromJSON(object: any): _80.QueryGroupPoliciesByAdminRequest;
                toJSON(message: _80.QueryGroupPoliciesByAdminRequest): unknown;
                fromPartial<I_49 extends {
                    admin?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    admin?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_49["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_49, keyof _80.QueryGroupPoliciesByAdminRequest>, never>>(object: I_49): _80.QueryGroupPoliciesByAdminRequest;
            };
            QueryGroupPoliciesByAdminResponse: {
                encode(message: _80.QueryGroupPoliciesByAdminResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupPoliciesByAdminResponse;
                fromJSON(object: any): _80.QueryGroupPoliciesByAdminResponse;
                toJSON(message: _80.QueryGroupPoliciesByAdminResponse): unknown;
                fromPartial<I_50 extends {
                    groupPolicies?: {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    groupPolicies?: {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[] & ({
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    } & {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_50["groupPolicies"][number]["decisionPolicy"], keyof import("../google/protobuf/any").Any>, never>;
                        createdAt?: Date;
                    } & Record<Exclude<keyof I_50["groupPolicies"][number], keyof _82.GroupPolicyInfo>, never>)[] & Record<Exclude<keyof I_50["groupPolicies"], keyof {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_50["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_50, keyof _80.QueryGroupPoliciesByAdminResponse>, never>>(object: I_50): _80.QueryGroupPoliciesByAdminResponse;
            };
            QueryProposalRequest: {
                encode(message: _80.QueryProposalRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryProposalRequest;
                fromJSON(object: any): _80.QueryProposalRequest;
                toJSON(message: _80.QueryProposalRequest): unknown;
                fromPartial<I_51 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_51, "proposalId">, never>>(object: I_51): _80.QueryProposalRequest;
            };
            QueryProposalResponse: {
                encode(message: _80.QueryProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryProposalResponse;
                fromJSON(object: any): _80.QueryProposalResponse;
                toJSON(message: _80.QueryProposalResponse): unknown;
                fromPartial<I_52 extends {
                    proposal?: {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    };
                } & {
                    proposal?: {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    } & {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[] & string[] & Record<Exclude<keyof I_52["proposal"]["proposers"], keyof string[]>, never>;
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & Record<Exclude<keyof I_52["proposal"]["finalTallyResult"], keyof _82.TallyResult>, never>;
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_52["proposal"]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_52["proposal"]["messages"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_52["proposal"], keyof _82.Proposal>, never>;
                } & Record<Exclude<keyof I_52, "proposal">, never>>(object: I_52): _80.QueryProposalResponse;
            };
            QueryProposalsByGroupPolicyRequest: {
                encode(message: _80.QueryProposalsByGroupPolicyRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryProposalsByGroupPolicyRequest;
                fromJSON(object: any): _80.QueryProposalsByGroupPolicyRequest;
                toJSON(message: _80.QueryProposalsByGroupPolicyRequest): unknown;
                fromPartial<I_53 extends {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_53["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_53, keyof _80.QueryProposalsByGroupPolicyRequest>, never>>(object: I_53): _80.QueryProposalsByGroupPolicyRequest;
            };
            QueryProposalsByGroupPolicyResponse: {
                encode(message: _80.QueryProposalsByGroupPolicyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryProposalsByGroupPolicyResponse;
                fromJSON(object: any): _80.QueryProposalsByGroupPolicyResponse;
                toJSON(message: _80.QueryProposalsByGroupPolicyResponse): unknown;
                fromPartial<I_54 extends {
                    proposals?: {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    proposals?: {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }[] & ({
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    } & {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[] & string[] & Record<Exclude<keyof I_54["proposals"][number]["proposers"], keyof string[]>, never>;
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & Record<Exclude<keyof I_54["proposals"][number]["finalTallyResult"], keyof _82.TallyResult>, never>;
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_54["proposals"][number]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_54["proposals"][number]["messages"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_54["proposals"][number], keyof _82.Proposal>, never>)[] & Record<Exclude<keyof I_54["proposals"], keyof {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_54["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_54, keyof _80.QueryProposalsByGroupPolicyResponse>, never>>(object: I_54): _80.QueryProposalsByGroupPolicyResponse;
            };
            QueryVoteByProposalVoterRequest: {
                encode(message: _80.QueryVoteByProposalVoterRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryVoteByProposalVoterRequest;
                fromJSON(object: any): _80.QueryVoteByProposalVoterRequest;
                toJSON(message: _80.QueryVoteByProposalVoterRequest): unknown;
                fromPartial<I_55 extends {
                    proposalId?: any;
                    voter?: string;
                } & {
                    proposalId?: any;
                    voter?: string;
                } & Record<Exclude<keyof I_55, keyof _80.QueryVoteByProposalVoterRequest>, never>>(object: I_55): _80.QueryVoteByProposalVoterRequest;
            };
            QueryVoteByProposalVoterResponse: {
                encode(message: _80.QueryVoteByProposalVoterResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryVoteByProposalVoterResponse;
                fromJSON(object: any): _80.QueryVoteByProposalVoterResponse;
                toJSON(message: _80.QueryVoteByProposalVoterResponse): unknown;
                fromPartial<I_56 extends {
                    vote?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    };
                } & {
                    vote?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    } & {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    } & Record<Exclude<keyof I_56["vote"], keyof _82.Vote>, never>;
                } & Record<Exclude<keyof I_56, "vote">, never>>(object: I_56): _80.QueryVoteByProposalVoterResponse;
            };
            QueryVotesByProposalRequest: {
                encode(message: _80.QueryVotesByProposalRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryVotesByProposalRequest;
                fromJSON(object: any): _80.QueryVotesByProposalRequest;
                toJSON(message: _80.QueryVotesByProposalRequest): unknown;
                fromPartial<I_57 extends {
                    proposalId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    proposalId?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_57["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_57, keyof _80.QueryVotesByProposalRequest>, never>>(object: I_57): _80.QueryVotesByProposalRequest;
            };
            QueryVotesByProposalResponse: {
                encode(message: _80.QueryVotesByProposalResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryVotesByProposalResponse;
                fromJSON(object: any): _80.QueryVotesByProposalResponse;
                toJSON(message: _80.QueryVotesByProposalResponse): unknown;
                fromPartial<I_58 extends {
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[] & ({
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    } & {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    } & Record<Exclude<keyof I_58["votes"][number], keyof _82.Vote>, never>)[] & Record<Exclude<keyof I_58["votes"], keyof {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_58["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_58, keyof _80.QueryVotesByProposalResponse>, never>>(object: I_58): _80.QueryVotesByProposalResponse;
            };
            QueryVotesByVoterRequest: {
                encode(message: _80.QueryVotesByVoterRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryVotesByVoterRequest;
                fromJSON(object: any): _80.QueryVotesByVoterRequest;
                toJSON(message: _80.QueryVotesByVoterRequest): unknown;
                fromPartial<I_59 extends {
                    voter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    voter?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_59["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_59, keyof _80.QueryVotesByVoterRequest>, never>>(object: I_59): _80.QueryVotesByVoterRequest;
            };
            QueryVotesByVoterResponse: {
                encode(message: _80.QueryVotesByVoterResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryVotesByVoterResponse;
                fromJSON(object: any): _80.QueryVotesByVoterResponse;
                toJSON(message: _80.QueryVotesByVoterResponse): unknown;
                fromPartial<I_60 extends {
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[] & ({
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    } & {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    } & Record<Exclude<keyof I_60["votes"][number], keyof _82.Vote>, never>)[] & Record<Exclude<keyof I_60["votes"], keyof {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_60["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_60, keyof _80.QueryVotesByVoterResponse>, never>>(object: I_60): _80.QueryVotesByVoterResponse;
            };
            QueryGroupsByMemberRequest: {
                encode(message: _80.QueryGroupsByMemberRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupsByMemberRequest;
                fromJSON(object: any): _80.QueryGroupsByMemberRequest;
                toJSON(message: _80.QueryGroupsByMemberRequest): unknown;
                fromPartial<I_61 extends {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    address?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_61["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_61, keyof _80.QueryGroupsByMemberRequest>, never>>(object: I_61): _80.QueryGroupsByMemberRequest;
            };
            QueryGroupsByMemberResponse: {
                encode(message: _80.QueryGroupsByMemberResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryGroupsByMemberResponse;
                fromJSON(object: any): _80.QueryGroupsByMemberResponse;
                toJSON(message: _80.QueryGroupsByMemberResponse): unknown;
                fromPartial<I_62 extends {
                    groups?: {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    groups?: {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    }[] & ({
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    } & {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    } & Record<Exclude<keyof I_62["groups"][number], keyof _82.GroupInfo>, never>)[] & Record<Exclude<keyof I_62["groups"], keyof {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_62["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_62, keyof _80.QueryGroupsByMemberResponse>, never>>(object: I_62): _80.QueryGroupsByMemberResponse;
            };
            QueryTallyResultRequest: {
                encode(message: _80.QueryTallyResultRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryTallyResultRequest;
                fromJSON(object: any): _80.QueryTallyResultRequest;
                toJSON(message: _80.QueryTallyResultRequest): unknown;
                fromPartial<I_63 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_63, "proposalId">, never>>(object: I_63): _80.QueryTallyResultRequest;
            };
            QueryTallyResultResponse: {
                encode(message: _80.QueryTallyResultResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _80.QueryTallyResultResponse;
                fromJSON(object: any): _80.QueryTallyResultResponse;
                toJSON(message: _80.QueryTallyResultResponse): unknown;
                fromPartial<I_64 extends {
                    tally?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    };
                } & {
                    tally?: {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    } & {
                        yesCount?: string;
                        abstainCount?: string;
                        noCount?: string;
                        noWithVetoCount?: string;
                    } & Record<Exclude<keyof I_64["tally"], keyof _82.TallyResult>, never>;
                } & Record<Exclude<keyof I_64, "tally">, never>>(object: I_64): _80.QueryTallyResultResponse;
            };
            GenesisState: {
                encode(message: _79.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _79.GenesisState;
                fromJSON(object: any): _79.GenesisState;
                toJSON(message: _79.GenesisState): unknown;
                fromPartial<I_65 extends {
                    groupSeq?: any;
                    groups?: {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    }[];
                    groupMembers?: {
                        groupId?: any;
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        };
                    }[];
                    groupPolicySeq?: any;
                    groupPolicies?: {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[];
                    proposalSeq?: any;
                    proposals?: {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }[];
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[];
                } & {
                    groupSeq?: any;
                    groups?: {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    }[] & ({
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    } & {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    } & Record<Exclude<keyof I_65["groups"][number], keyof _82.GroupInfo>, never>)[] & Record<Exclude<keyof I_65["groups"], keyof {
                        id?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        totalWeight?: string;
                        createdAt?: Date;
                    }[]>, never>;
                    groupMembers?: {
                        groupId?: any;
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        };
                    }[] & ({
                        groupId?: any;
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        };
                    } & {
                        groupId?: any;
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        } & {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        } & Record<Exclude<keyof I_65["groupMembers"][number]["member"], keyof _82.Member>, never>;
                    } & Record<Exclude<keyof I_65["groupMembers"][number], keyof _82.GroupMember>, never>)[] & Record<Exclude<keyof I_65["groupMembers"], keyof {
                        groupId?: any;
                        member?: {
                            address?: string;
                            weight?: string;
                            metadata?: string;
                            addedAt?: Date;
                        };
                    }[]>, never>;
                    groupPolicySeq?: any;
                    groupPolicies?: {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[] & ({
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    } & {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_65["groupPolicies"][number]["decisionPolicy"], keyof import("../google/protobuf/any").Any>, never>;
                        createdAt?: Date;
                    } & Record<Exclude<keyof I_65["groupPolicies"][number], keyof _82.GroupPolicyInfo>, never>)[] & Record<Exclude<keyof I_65["groupPolicies"], keyof {
                        address?: string;
                        groupId?: any;
                        admin?: string;
                        metadata?: string;
                        version?: any;
                        decisionPolicy?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        createdAt?: Date;
                    }[]>, never>;
                    proposalSeq?: any;
                    proposals?: {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }[] & ({
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    } & {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[] & string[] & Record<Exclude<keyof I_65["proposals"][number]["proposers"], keyof string[]>, never>;
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        } & Record<Exclude<keyof I_65["proposals"][number]["finalTallyResult"], keyof _82.TallyResult>, never>;
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_65["proposals"][number]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_65["proposals"][number]["messages"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_65["proposals"][number], keyof _82.Proposal>, never>)[] & Record<Exclude<keyof I_65["proposals"], keyof {
                        id?: any;
                        address?: string;
                        metadata?: string;
                        proposers?: string[];
                        submitTime?: Date;
                        groupVersion?: any;
                        groupPolicyVersion?: any;
                        status?: _82.ProposalStatus;
                        result?: _82.ProposalResult;
                        finalTallyResult?: {
                            yesCount?: string;
                            abstainCount?: string;
                            noCount?: string;
                            noWithVetoCount?: string;
                        };
                        votingPeriodEnd?: Date;
                        executorResult?: _82.ProposalExecutorResult;
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    }[]>, never>;
                    votes?: {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[] & ({
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    } & {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    } & Record<Exclude<keyof I_65["votes"][number], keyof _82.Vote>, never>)[] & Record<Exclude<keyof I_65["votes"], keyof {
                        proposalId?: any;
                        voter?: string;
                        option?: _82.VoteOption;
                        metadata?: string;
                        submitTime?: Date;
                    }[]>, never>;
                } & Record<Exclude<keyof I_65, keyof _79.GenesisState>, never>>(object: I_65): _79.GenesisState;
            };
            EventCreateGroup: {
                encode(message: _78.EventCreateGroup, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.EventCreateGroup;
                fromJSON(object: any): _78.EventCreateGroup;
                toJSON(message: _78.EventCreateGroup): unknown;
                fromPartial<I_66 extends {
                    groupId?: any;
                } & {
                    groupId?: any;
                } & Record<Exclude<keyof I_66, "groupId">, never>>(object: I_66): _78.EventCreateGroup;
            };
            EventUpdateGroup: {
                encode(message: _78.EventUpdateGroup, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.EventUpdateGroup;
                fromJSON(object: any): _78.EventUpdateGroup;
                toJSON(message: _78.EventUpdateGroup): unknown;
                fromPartial<I_67 extends {
                    groupId?: any;
                } & {
                    groupId?: any;
                } & Record<Exclude<keyof I_67, "groupId">, never>>(object: I_67): _78.EventUpdateGroup;
            };
            EventCreateGroupPolicy: {
                encode(message: _78.EventCreateGroupPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.EventCreateGroupPolicy;
                fromJSON(object: any): _78.EventCreateGroupPolicy;
                toJSON(message: _78.EventCreateGroupPolicy): unknown;
                fromPartial<I_68 extends {
                    address?: string;
                } & {
                    address?: string;
                } & Record<Exclude<keyof I_68, "address">, never>>(object: I_68): _78.EventCreateGroupPolicy;
            };
            EventUpdateGroupPolicy: {
                encode(message: _78.EventUpdateGroupPolicy, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.EventUpdateGroupPolicy;
                fromJSON(object: any): _78.EventUpdateGroupPolicy;
                toJSON(message: _78.EventUpdateGroupPolicy): unknown;
                fromPartial<I_69 extends {
                    address?: string;
                } & {
                    address?: string;
                } & Record<Exclude<keyof I_69, "address">, never>>(object: I_69): _78.EventUpdateGroupPolicy;
            };
            EventSubmitProposal: {
                encode(message: _78.EventSubmitProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.EventSubmitProposal;
                fromJSON(object: any): _78.EventSubmitProposal;
                toJSON(message: _78.EventSubmitProposal): unknown;
                fromPartial<I_70 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_70, "proposalId">, never>>(object: I_70): _78.EventSubmitProposal;
            };
            EventWithdrawProposal: {
                encode(message: _78.EventWithdrawProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.EventWithdrawProposal;
                fromJSON(object: any): _78.EventWithdrawProposal;
                toJSON(message: _78.EventWithdrawProposal): unknown;
                fromPartial<I_71 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_71, "proposalId">, never>>(object: I_71): _78.EventWithdrawProposal;
            };
            EventVote: {
                encode(message: _78.EventVote, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.EventVote;
                fromJSON(object: any): _78.EventVote;
                toJSON(message: _78.EventVote): unknown;
                fromPartial<I_72 extends {
                    proposalId?: any;
                } & {
                    proposalId?: any;
                } & Record<Exclude<keyof I_72, "proposalId">, never>>(object: I_72): _78.EventVote;
            };
            EventExec: {
                encode(message: _78.EventExec, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.EventExec;
                fromJSON(object: any): _78.EventExec;
                toJSON(message: _78.EventExec): unknown;
                fromPartial<I_73 extends {
                    proposalId?: any;
                    result?: _82.ProposalExecutorResult;
                } & {
                    proposalId?: any;
                    result?: _82.ProposalExecutorResult;
                } & Record<Exclude<keyof I_73, keyof _78.EventExec>, never>>(object: I_73): _78.EventExec;
            };
            EventLeaveGroup: {
                encode(message: _78.EventLeaveGroup, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _78.EventLeaveGroup;
                fromJSON(object: any): _78.EventLeaveGroup;
                toJSON(message: _78.EventLeaveGroup): unknown;
                fromPartial<I_74 extends {
                    groupId?: any;
                    address?: string;
                } & {
                    groupId?: any;
                    address?: string;
                } & Record<Exclude<keyof I_74, keyof _78.EventLeaveGroup>, never>>(object: I_74): _78.EventLeaveGroup;
            };
        };
    }
    namespace mint {
        const v1beta1: {
            QueryParamsRequest: {
                encode(_: _85.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.QueryParamsRequest;
                fromJSON(_: any): _85.QueryParamsRequest;
                toJSON(_: _85.QueryParamsRequest): unknown;
                fromPartial<I extends {} & {} & Record<Exclude<keyof I, never>, never>>(_: I): _85.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _85.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.QueryParamsResponse;
                fromJSON(object: any): _85.QueryParamsResponse;
                toJSON(message: _85.QueryParamsResponse): unknown;
                fromPartial<I_1 extends {
                    params?: {
                        mintDenom?: string;
                        inflationRateChange?: string;
                        inflationMax?: string;
                        inflationMin?: string;
                        goalBonded?: string;
                        blocksPerYear?: any;
                    };
                } & {
                    params?: {
                        mintDenom?: string;
                        inflationRateChange?: string;
                        inflationMax?: string;
                        inflationMin?: string;
                        goalBonded?: string;
                        blocksPerYear?: any;
                    } & {
                        mintDenom?: string;
                        inflationRateChange?: string;
                        inflationMax?: string;
                        inflationMin?: string;
                        goalBonded?: string;
                        blocksPerYear?: any;
                    } & Record<Exclude<keyof I_1["params"], keyof _84.Params>, never>;
                } & Record<Exclude<keyof I_1, "params">, never>>(object: I_1): _85.QueryParamsResponse;
            };
            QueryInflationRequest: {
                encode(_: _85.QueryInflationRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.QueryInflationRequest;
                fromJSON(_: any): _85.QueryInflationRequest;
                toJSON(_: _85.QueryInflationRequest): unknown;
                fromPartial<I_2 extends {} & {} & Record<Exclude<keyof I_2, never>, never>>(_: I_2): _85.QueryInflationRequest;
            };
            QueryInflationResponse: {
                encode(message: _85.QueryInflationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.QueryInflationResponse;
                fromJSON(object: any): _85.QueryInflationResponse;
                toJSON(message: _85.QueryInflationResponse): unknown;
                fromPartial<I_3 extends {
                    inflation?: Uint8Array;
                } & {
                    inflation?: Uint8Array;
                } & Record<Exclude<keyof I_3, "inflation">, never>>(object: I_3): _85.QueryInflationResponse;
            };
            QueryAnnualProvisionsRequest: {
                encode(_: _85.QueryAnnualProvisionsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.QueryAnnualProvisionsRequest;
                fromJSON(_: any): _85.QueryAnnualProvisionsRequest;
                toJSON(_: _85.QueryAnnualProvisionsRequest): unknown;
                fromPartial<I_4 extends {} & {} & Record<Exclude<keyof I_4, never>, never>>(_: I_4): _85.QueryAnnualProvisionsRequest;
            };
            QueryAnnualProvisionsResponse: {
                encode(message: _85.QueryAnnualProvisionsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _85.QueryAnnualProvisionsResponse;
                fromJSON(object: any): _85.QueryAnnualProvisionsResponse;
                toJSON(message: _85.QueryAnnualProvisionsResponse): unknown;
                fromPartial<I_5 extends {
                    annualProvisions?: Uint8Array;
                } & {
                    annualProvisions?: Uint8Array;
                } & Record<Exclude<keyof I_5, "annualProvisions">, never>>(object: I_5): _85.QueryAnnualProvisionsResponse;
            };
            Minter: {
                encode(message: _84.Minter, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.Minter;
                fromJSON(object: any): _84.Minter;
                toJSON(message: _84.Minter): unknown;
                fromPartial<I_6 extends {
                    inflation?: string;
                    annualProvisions?: string;
                } & {
                    inflation?: string;
                    annualProvisions?: string;
                } & Record<Exclude<keyof I_6, keyof _84.Minter>, never>>(object: I_6): _84.Minter;
            };
            Params: {
                encode(message: _84.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _84.Params;
                fromJSON(object: any): _84.Params;
                toJSON(message: _84.Params): unknown;
                fromPartial<I_7 extends {
                    mintDenom?: string;
                    inflationRateChange?: string;
                    inflationMax?: string;
                    inflationMin?: string;
                    goalBonded?: string;
                    blocksPerYear?: any;
                } & {
                    mintDenom?: string;
                    inflationRateChange?: string;
                    inflationMax?: string;
                    inflationMin?: string;
                    goalBonded?: string;
                    blocksPerYear?: any;
                } & Record<Exclude<keyof I_7, keyof _84.Params>, never>>(object: I_7): _84.Params;
            };
            GenesisState: {
                encode(message: _83.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _83.GenesisState;
                fromJSON(object: any): _83.GenesisState;
                toJSON(message: _83.GenesisState): unknown;
                fromPartial<I_8 extends {
                    minter?: {
                        inflation?: string;
                        annualProvisions?: string;
                    };
                    params?: {
                        mintDenom?: string;
                        inflationRateChange?: string;
                        inflationMax?: string;
                        inflationMin?: string;
                        goalBonded?: string;
                        blocksPerYear?: any;
                    };
                } & {
                    minter?: {
                        inflation?: string;
                        annualProvisions?: string;
                    } & {
                        inflation?: string;
                        annualProvisions?: string;
                    } & Record<Exclude<keyof I_8["minter"], keyof _84.Minter>, never>;
                    params?: {
                        mintDenom?: string;
                        inflationRateChange?: string;
                        inflationMax?: string;
                        inflationMin?: string;
                        goalBonded?: string;
                        blocksPerYear?: any;
                    } & {
                        mintDenom?: string;
                        inflationRateChange?: string;
                        inflationMax?: string;
                        inflationMin?: string;
                        goalBonded?: string;
                        blocksPerYear?: any;
                    } & Record<Exclude<keyof I_8["params"], keyof _84.Params>, never>;
                } & Record<Exclude<keyof I_8, keyof _83.GenesisState>, never>>(object: I_8): _83.GenesisState;
            };
        };
    }
    namespace msg {
        const v1: {};
    }
    namespace nft {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    send(value: _91.MsgSend): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    send(value: _91.MsgSend): {
                        typeUrl: string;
                        value: _91.MsgSend;
                    };
                };
                toJSON: {
                    send(value: _91.MsgSend): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    send(value: any): {
                        typeUrl: string;
                        value: _91.MsgSend;
                    };
                };
                fromPartial: {
                    send(value: _91.MsgSend): {
                        typeUrl: string;
                        value: _91.MsgSend;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.nft.v1beta1.MsgSend": {
                    aminoType: string;
                    toAmino: ({ classId, id, sender, receiver }: _91.MsgSend) => {
                        class_id: string;
                        id: string;
                        sender: string;
                        receiver: string;
                    };
                    fromAmino: ({ class_id, id, sender, receiver }: {
                        class_id: string;
                        id: string;
                        sender: string;
                        receiver: string;
                    }) => _91.MsgSend;
                };
            };
            MsgSend: {
                encode(message: _91.MsgSend, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _91.MsgSend;
                fromJSON(object: any): _91.MsgSend;
                toJSON(message: _91.MsgSend): unknown;
                fromPartial<I extends {
                    classId?: string;
                    id?: string;
                    sender?: string;
                    receiver?: string;
                } & {
                    classId?: string;
                    id?: string;
                    sender?: string;
                    receiver?: string;
                } & Record<Exclude<keyof I, keyof _91.MsgSend>, never>>(object: I): _91.MsgSend;
            };
            MsgSendResponse: {
                encode(_: _91.MsgSendResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _91.MsgSendResponse;
                fromJSON(_: any): _91.MsgSendResponse;
                toJSON(_: _91.MsgSendResponse): unknown;
                fromPartial<I_1 extends {} & {} & Record<Exclude<keyof I_1, never>, never>>(_: I_1): _91.MsgSendResponse;
            };
            QueryBalanceRequest: {
                encode(message: _90.QueryBalanceRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryBalanceRequest;
                fromJSON(object: any): _90.QueryBalanceRequest;
                toJSON(message: _90.QueryBalanceRequest): unknown;
                fromPartial<I_2 extends {
                    classId?: string;
                    owner?: string;
                } & {
                    classId?: string;
                    owner?: string;
                } & Record<Exclude<keyof I_2, keyof _90.QueryBalanceRequest>, never>>(object: I_2): _90.QueryBalanceRequest;
            };
            QueryBalanceResponse: {
                encode(message: _90.QueryBalanceResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryBalanceResponse;
                fromJSON(object: any): _90.QueryBalanceResponse;
                toJSON(message: _90.QueryBalanceResponse): unknown;
                fromPartial<I_3 extends {
                    amount?: any;
                } & {
                    amount?: any;
                } & Record<Exclude<keyof I_3, "amount">, never>>(object: I_3): _90.QueryBalanceResponse;
            };
            QueryOwnerRequest: {
                encode(message: _90.QueryOwnerRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryOwnerRequest;
                fromJSON(object: any): _90.QueryOwnerRequest;
                toJSON(message: _90.QueryOwnerRequest): unknown;
                fromPartial<I_4 extends {
                    classId?: string;
                    id?: string;
                } & {
                    classId?: string;
                    id?: string;
                } & Record<Exclude<keyof I_4, keyof _90.QueryOwnerRequest>, never>>(object: I_4): _90.QueryOwnerRequest;
            };
            QueryOwnerResponse: {
                encode(message: _90.QueryOwnerResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryOwnerResponse;
                fromJSON(object: any): _90.QueryOwnerResponse;
                toJSON(message: _90.QueryOwnerResponse): unknown;
                fromPartial<I_5 extends {
                    owner?: string;
                } & {
                    owner?: string;
                } & Record<Exclude<keyof I_5, "owner">, never>>(object: I_5): _90.QueryOwnerResponse;
            };
            QuerySupplyRequest: {
                encode(message: _90.QuerySupplyRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QuerySupplyRequest;
                fromJSON(object: any): _90.QuerySupplyRequest;
                toJSON(message: _90.QuerySupplyRequest): unknown;
                fromPartial<I_6 extends {
                    classId?: string;
                } & {
                    classId?: string;
                } & Record<Exclude<keyof I_6, "classId">, never>>(object: I_6): _90.QuerySupplyRequest;
            };
            QuerySupplyResponse: {
                encode(message: _90.QuerySupplyResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QuerySupplyResponse;
                fromJSON(object: any): _90.QuerySupplyResponse;
                toJSON(message: _90.QuerySupplyResponse): unknown;
                fromPartial<I_7 extends {
                    amount?: any;
                } & {
                    amount?: any;
                } & Record<Exclude<keyof I_7, "amount">, never>>(object: I_7): _90.QuerySupplyResponse;
            };
            QueryNFTsRequest: {
                encode(message: _90.QueryNFTsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryNFTsRequest;
                fromJSON(object: any): _90.QueryNFTsRequest;
                toJSON(message: _90.QueryNFTsRequest): unknown;
                fromPartial<I_8 extends {
                    classId?: string;
                    owner?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    classId?: string;
                    owner?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_8["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_8, keyof _90.QueryNFTsRequest>, never>>(object: I_8): _90.QueryNFTsRequest;
            };
            QueryNFTsResponse: {
                encode(message: _90.QueryNFTsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryNFTsResponse;
                fromJSON(object: any): _90.QueryNFTsResponse;
                toJSON(message: _90.QueryNFTsResponse): unknown;
                fromPartial<I_9 extends {
                    nfts?: {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    nfts?: {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[] & ({
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_9["nfts"][number]["data"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_9["nfts"][number], keyof _89.NFT>, never>)[] & Record<Exclude<keyof I_9["nfts"], keyof {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_9["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_9, keyof _90.QueryNFTsResponse>, never>>(object: I_9): _90.QueryNFTsResponse;
            };
            QueryNFTRequest: {
                encode(message: _90.QueryNFTRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryNFTRequest;
                fromJSON(object: any): _90.QueryNFTRequest;
                toJSON(message: _90.QueryNFTRequest): unknown;
                fromPartial<I_10 extends {
                    classId?: string;
                    id?: string;
                } & {
                    classId?: string;
                    id?: string;
                } & Record<Exclude<keyof I_10, keyof _90.QueryNFTRequest>, never>>(object: I_10): _90.QueryNFTRequest;
            };
            QueryNFTResponse: {
                encode(message: _90.QueryNFTResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryNFTResponse;
                fromJSON(object: any): _90.QueryNFTResponse;
                toJSON(message: _90.QueryNFTResponse): unknown;
                fromPartial<I_11 extends {
                    nft?: {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                } & {
                    nft?: {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_11["nft"]["data"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_11["nft"], keyof _89.NFT>, never>;
                } & Record<Exclude<keyof I_11, "nft">, never>>(object: I_11): _90.QueryNFTResponse;
            };
            QueryClassRequest: {
                encode(message: _90.QueryClassRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryClassRequest;
                fromJSON(object: any): _90.QueryClassRequest;
                toJSON(message: _90.QueryClassRequest): unknown;
                fromPartial<I_12 extends {
                    classId?: string;
                } & {
                    classId?: string;
                } & Record<Exclude<keyof I_12, "classId">, never>>(object: I_12): _90.QueryClassRequest;
            };
            QueryClassResponse: {
                encode(message: _90.QueryClassResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryClassResponse;
                fromJSON(object: any): _90.QueryClassResponse;
                toJSON(message: _90.QueryClassResponse): unknown;
                fromPartial<I_13 extends {
                    class?: {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                } & {
                    class?: {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_13["class"]["data"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_13["class"], keyof _89.Class>, never>;
                } & Record<Exclude<keyof I_13, "class">, never>>(object: I_13): _90.QueryClassResponse;
            };
            QueryClassesRequest: {
                encode(message: _90.QueryClassesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryClassesRequest;
                fromJSON(object: any): _90.QueryClassesRequest;
                toJSON(message: _90.QueryClassesRequest): unknown;
                fromPartial<I_14 extends {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_14["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_14, "pagination">, never>>(object: I_14): _90.QueryClassesRequest;
            };
            QueryClassesResponse: {
                encode(message: _90.QueryClassesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _90.QueryClassesResponse;
                fromJSON(object: any): _90.QueryClassesResponse;
                toJSON(message: _90.QueryClassesResponse): unknown;
                fromPartial<I_15 extends {
                    classes?: {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    classes?: {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[] & ({
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_15["classes"][number]["data"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_15["classes"][number], keyof _89.Class>, never>)[] & Record<Exclude<keyof I_15["classes"], keyof {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_15["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_15, keyof _90.QueryClassesResponse>, never>>(object: I_15): _90.QueryClassesResponse;
            };
            Class: {
                encode(message: _89.Class, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _89.Class;
                fromJSON(object: any): _89.Class;
                toJSON(message: _89.Class): unknown;
                fromPartial<I_16 extends {
                    id?: string;
                    name?: string;
                    symbol?: string;
                    description?: string;
                    uri?: string;
                    uriHash?: string;
                    data?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    id?: string;
                    name?: string;
                    symbol?: string;
                    description?: string;
                    uri?: string;
                    uriHash?: string;
                    data?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_16["data"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I_16, keyof _89.Class>, never>>(object: I_16): _89.Class;
            };
            NFT: {
                encode(message: _89.NFT, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _89.NFT;
                fromJSON(object: any): _89.NFT;
                toJSON(message: _89.NFT): unknown;
                fromPartial<I_17 extends {
                    classId?: string;
                    id?: string;
                    uri?: string;
                    uriHash?: string;
                    data?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    classId?: string;
                    id?: string;
                    uri?: string;
                    uriHash?: string;
                    data?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_17["data"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I_17, keyof _89.NFT>, never>>(object: I_17): _89.NFT;
            };
            GenesisState: {
                encode(message: _88.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _88.GenesisState;
                fromJSON(object: any): _88.GenesisState;
                toJSON(message: _88.GenesisState): unknown;
                fromPartial<I_18 extends {
                    classes?: {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                    entries?: {
                        owner?: string;
                        nfts?: {
                            classId?: string;
                            id?: string;
                            uri?: string;
                            uriHash?: string;
                            data?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                    }[];
                } & {
                    classes?: {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[] & ({
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_18["classes"][number]["data"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_18["classes"][number], keyof _89.Class>, never>)[] & Record<Exclude<keyof I_18["classes"], keyof {
                        id?: string;
                        name?: string;
                        symbol?: string;
                        description?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[]>, never>;
                    entries?: {
                        owner?: string;
                        nfts?: {
                            classId?: string;
                            id?: string;
                            uri?: string;
                            uriHash?: string;
                            data?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                    }[] & ({
                        owner?: string;
                        nfts?: {
                            classId?: string;
                            id?: string;
                            uri?: string;
                            uriHash?: string;
                            data?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                    } & {
                        owner?: string;
                        nfts?: {
                            classId?: string;
                            id?: string;
                            uri?: string;
                            uriHash?: string;
                            data?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[] & ({
                            classId?: string;
                            id?: string;
                            uri?: string;
                            uriHash?: string;
                            data?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        } & {
                            classId?: string;
                            id?: string;
                            uri?: string;
                            uriHash?: string;
                            data?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_18["entries"][number]["nfts"][number]["data"], keyof import("../google/protobuf/any").Any>, never>;
                        } & Record<Exclude<keyof I_18["entries"][number]["nfts"][number], keyof _89.NFT>, never>)[] & Record<Exclude<keyof I_18["entries"][number]["nfts"], keyof {
                            classId?: string;
                            id?: string;
                            uri?: string;
                            uriHash?: string;
                            data?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[]>, never>;
                    } & Record<Exclude<keyof I_18["entries"][number], keyof _88.Entry>, never>)[] & Record<Exclude<keyof I_18["entries"], keyof {
                        owner?: string;
                        nfts?: {
                            classId?: string;
                            id?: string;
                            uri?: string;
                            uriHash?: string;
                            data?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                        }[];
                    }[]>, never>;
                } & Record<Exclude<keyof I_18, keyof _88.GenesisState>, never>>(object: I_18): _88.GenesisState;
            };
            Entry: {
                encode(message: _88.Entry, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _88.Entry;
                fromJSON(object: any): _88.Entry;
                toJSON(message: _88.Entry): unknown;
                fromPartial<I_19 extends {
                    owner?: string;
                    nfts?: {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[];
                } & {
                    owner?: string;
                    nfts?: {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[] & ({
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_19["nfts"][number]["data"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_19["nfts"][number], keyof _89.NFT>, never>)[] & Record<Exclude<keyof I_19["nfts"], keyof {
                        classId?: string;
                        id?: string;
                        uri?: string;
                        uriHash?: string;
                        data?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    }[]>, never>;
                } & Record<Exclude<keyof I_19, keyof _88.Entry>, never>>(object: I_19): _88.Entry;
            };
            EventSend: {
                encode(message: _87.EventSend, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _87.EventSend;
                fromJSON(object: any): _87.EventSend;
                toJSON(message: _87.EventSend): unknown;
                fromPartial<I_20 extends {
                    classId?: string;
                    id?: string;
                    sender?: string;
                    receiver?: string;
                } & {
                    classId?: string;
                    id?: string;
                    sender?: string;
                    receiver?: string;
                } & Record<Exclude<keyof I_20, keyof _87.EventSend>, never>>(object: I_20): _87.EventSend;
            };
            EventMint: {
                encode(message: _87.EventMint, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _87.EventMint;
                fromJSON(object: any): _87.EventMint;
                toJSON(message: _87.EventMint): unknown;
                fromPartial<I_21 extends {
                    classId?: string;
                    id?: string;
                    owner?: string;
                } & {
                    classId?: string;
                    id?: string;
                    owner?: string;
                } & Record<Exclude<keyof I_21, keyof _87.EventMint>, never>>(object: I_21): _87.EventMint;
            };
            EventBurn: {
                encode(message: _87.EventBurn, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _87.EventBurn;
                fromJSON(object: any): _87.EventBurn;
                toJSON(message: _87.EventBurn): unknown;
                fromPartial<I_22 extends {
                    classId?: string;
                    id?: string;
                    owner?: string;
                } & {
                    classId?: string;
                    id?: string;
                    owner?: string;
                } & Record<Exclude<keyof I_22, keyof _87.EventBurn>, never>>(object: I_22): _87.EventBurn;
            };
        };
    }
    namespace orm {
        const v1: {
            TableDescriptor: {
                encode(message: _92.TableDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _92.TableDescriptor;
                fromJSON(object: any): _92.TableDescriptor;
                toJSON(message: _92.TableDescriptor): unknown;
                fromPartial<I extends {
                    primaryKey?: {
                        fields?: string;
                        autoIncrement?: boolean;
                    };
                    index?: {
                        fields?: string;
                        id?: number;
                        unique?: boolean;
                    }[];
                    id?: number;
                } & {
                    primaryKey?: {
                        fields?: string;
                        autoIncrement?: boolean;
                    } & {
                        fields?: string;
                        autoIncrement?: boolean;
                    } & Record<Exclude<keyof I["primaryKey"], keyof _92.PrimaryKeyDescriptor>, never>;
                    index?: {
                        fields?: string;
                        id?: number;
                        unique?: boolean;
                    }[] & ({
                        fields?: string;
                        id?: number;
                        unique?: boolean;
                    } & {
                        fields?: string;
                        id?: number;
                        unique?: boolean;
                    } & Record<Exclude<keyof I["index"][number], keyof _92.SecondaryIndexDescriptor>, never>)[] & Record<Exclude<keyof I["index"], keyof {
                        fields?: string;
                        id?: number;
                        unique?: boolean;
                    }[]>, never>;
                    id?: number;
                } & Record<Exclude<keyof I, keyof _92.TableDescriptor>, never>>(object: I): _92.TableDescriptor;
            };
            PrimaryKeyDescriptor: {
                encode(message: _92.PrimaryKeyDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _92.PrimaryKeyDescriptor;
                fromJSON(object: any): _92.PrimaryKeyDescriptor;
                toJSON(message: _92.PrimaryKeyDescriptor): unknown;
                fromPartial<I_1 extends {
                    fields?: string;
                    autoIncrement?: boolean;
                } & {
                    fields?: string;
                    autoIncrement?: boolean;
                } & Record<Exclude<keyof I_1, keyof _92.PrimaryKeyDescriptor>, never>>(object: I_1): _92.PrimaryKeyDescriptor;
            };
            SecondaryIndexDescriptor: {
                encode(message: _92.SecondaryIndexDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _92.SecondaryIndexDescriptor;
                fromJSON(object: any): _92.SecondaryIndexDescriptor;
                toJSON(message: _92.SecondaryIndexDescriptor): unknown;
                fromPartial<I_2 extends {
                    fields?: string;
                    id?: number;
                    unique?: boolean;
                } & {
                    fields?: string;
                    id?: number;
                    unique?: boolean;
                } & Record<Exclude<keyof I_2, keyof _92.SecondaryIndexDescriptor>, never>>(object: I_2): _92.SecondaryIndexDescriptor;
            };
            SingletonDescriptor: {
                encode(message: _92.SingletonDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _92.SingletonDescriptor;
                fromJSON(object: any): _92.SingletonDescriptor;
                toJSON(message: _92.SingletonDescriptor): unknown;
                fromPartial<I_3 extends {
                    id?: number;
                } & {
                    id?: number;
                } & Record<Exclude<keyof I_3, "id">, never>>(object: I_3): _92.SingletonDescriptor;
            };
        };
        const v1alpha1: {
            storageTypeFromJSON(object: any): _93.StorageType;
            storageTypeToJSON(object: _93.StorageType): string;
            StorageType: typeof _93.StorageType;
            ModuleSchemaDescriptor: {
                encode(message: _93.ModuleSchemaDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _93.ModuleSchemaDescriptor;
                fromJSON(object: any): _93.ModuleSchemaDescriptor;
                toJSON(message: _93.ModuleSchemaDescriptor): unknown;
                fromPartial<I extends {
                    schemaFile?: {
                        id?: number;
                        protoFileName?: string;
                        storageType?: _93.StorageType;
                    }[];
                    prefix?: Uint8Array;
                } & {
                    schemaFile?: {
                        id?: number;
                        protoFileName?: string;
                        storageType?: _93.StorageType;
                    }[] & ({
                        id?: number;
                        protoFileName?: string;
                        storageType?: _93.StorageType;
                    } & {
                        id?: number;
                        protoFileName?: string;
                        storageType?: _93.StorageType;
                    } & Record<Exclude<keyof I["schemaFile"][number], keyof _93.ModuleSchemaDescriptor_FileEntry>, never>)[] & Record<Exclude<keyof I["schemaFile"], keyof {
                        id?: number;
                        protoFileName?: string;
                        storageType?: _93.StorageType;
                    }[]>, never>;
                    prefix?: Uint8Array;
                } & Record<Exclude<keyof I, keyof _93.ModuleSchemaDescriptor>, never>>(object: I): _93.ModuleSchemaDescriptor;
            };
            ModuleSchemaDescriptor_FileEntry: {
                encode(message: _93.ModuleSchemaDescriptor_FileEntry, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _93.ModuleSchemaDescriptor_FileEntry;
                fromJSON(object: any): _93.ModuleSchemaDescriptor_FileEntry;
                toJSON(message: _93.ModuleSchemaDescriptor_FileEntry): unknown;
                fromPartial<I_1 extends {
                    id?: number;
                    protoFileName?: string;
                    storageType?: _93.StorageType;
                } & {
                    id?: number;
                    protoFileName?: string;
                    storageType?: _93.StorageType;
                } & Record<Exclude<keyof I_1, keyof _93.ModuleSchemaDescriptor_FileEntry>, never>>(object: I_1): _93.ModuleSchemaDescriptor_FileEntry;
            };
        };
    }
    namespace params {
        const v1beta1: {
            QueryParamsRequest: {
                encode(message: _95.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _95.QueryParamsRequest;
                fromJSON(object: any): _95.QueryParamsRequest;
                toJSON(message: _95.QueryParamsRequest): unknown;
                fromPartial<I extends {
                    subspace?: string;
                    key?: string;
                } & {
                    subspace?: string;
                    key?: string;
                } & Record<Exclude<keyof I, keyof _95.QueryParamsRequest>, never>>(object: I): _95.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _95.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _95.QueryParamsResponse;
                fromJSON(object: any): _95.QueryParamsResponse;
                toJSON(message: _95.QueryParamsResponse): unknown;
                fromPartial<I_1 extends {
                    param?: {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    };
                } & {
                    param?: {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    } & {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    } & Record<Exclude<keyof I_1["param"], keyof _94.ParamChange>, never>;
                } & Record<Exclude<keyof I_1, "param">, never>>(object: I_1): _95.QueryParamsResponse;
            };
            QuerySubspacesRequest: {
                encode(_: _95.QuerySubspacesRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _95.QuerySubspacesRequest;
                fromJSON(_: any): _95.QuerySubspacesRequest;
                toJSON(_: _95.QuerySubspacesRequest): unknown;
                fromPartial<I_2 extends {} & {} & Record<Exclude<keyof I_2, never>, never>>(_: I_2): _95.QuerySubspacesRequest;
            };
            QuerySubspacesResponse: {
                encode(message: _95.QuerySubspacesResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _95.QuerySubspacesResponse;
                fromJSON(object: any): _95.QuerySubspacesResponse;
                toJSON(message: _95.QuerySubspacesResponse): unknown;
                fromPartial<I_3 extends {
                    subspaces?: {
                        subspace?: string;
                        keys?: string[];
                    }[];
                } & {
                    subspaces?: {
                        subspace?: string;
                        keys?: string[];
                    }[] & ({
                        subspace?: string;
                        keys?: string[];
                    } & {
                        subspace?: string;
                        keys?: string[] & string[] & Record<Exclude<keyof I_3["subspaces"][number]["keys"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I_3["subspaces"][number], keyof _95.Subspace>, never>)[] & Record<Exclude<keyof I_3["subspaces"], keyof {
                        subspace?: string;
                        keys?: string[];
                    }[]>, never>;
                } & Record<Exclude<keyof I_3, "subspaces">, never>>(object: I_3): _95.QuerySubspacesResponse;
            };
            Subspace: {
                encode(message: _95.Subspace, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _95.Subspace;
                fromJSON(object: any): _95.Subspace;
                toJSON(message: _95.Subspace): unknown;
                fromPartial<I_4 extends {
                    subspace?: string;
                    keys?: string[];
                } & {
                    subspace?: string;
                    keys?: string[] & string[] & Record<Exclude<keyof I_4["keys"], keyof string[]>, never>;
                } & Record<Exclude<keyof I_4, keyof _95.Subspace>, never>>(object: I_4): _95.Subspace;
            };
            ParameterChangeProposal: {
                encode(message: _94.ParameterChangeProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _94.ParameterChangeProposal;
                fromJSON(object: any): _94.ParameterChangeProposal;
                toJSON(message: _94.ParameterChangeProposal): unknown;
                fromPartial<I_5 extends {
                    title?: string;
                    description?: string;
                    changes?: {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    }[];
                } & {
                    title?: string;
                    description?: string;
                    changes?: {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    }[] & ({
                        subspace?: string;
                        key?: string;
                        value?: string;
                    } & {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    } & Record<Exclude<keyof I_5["changes"][number], keyof _94.ParamChange>, never>)[] & Record<Exclude<keyof I_5["changes"], keyof {
                        subspace?: string;
                        key?: string;
                        value?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_5, keyof _94.ParameterChangeProposal>, never>>(object: I_5): _94.ParameterChangeProposal;
            };
            ParamChange: {
                encode(message: _94.ParamChange, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _94.ParamChange;
                fromJSON(object: any): _94.ParamChange;
                toJSON(message: _94.ParamChange): unknown;
                fromPartial<I_6 extends {
                    subspace?: string;
                    key?: string;
                    value?: string;
                } & {
                    subspace?: string;
                    key?: string;
                    value?: string;
                } & Record<Exclude<keyof I_6, keyof _94.ParamChange>, never>>(object: I_6): _94.ParamChange;
            };
        };
    }
    namespace slashing {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    unjail(value: _99.MsgUnjail): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    unjail(value: _99.MsgUnjail): {
                        typeUrl: string;
                        value: _99.MsgUnjail;
                    };
                };
                toJSON: {
                    unjail(value: _99.MsgUnjail): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    unjail(value: any): {
                        typeUrl: string;
                        value: _99.MsgUnjail;
                    };
                };
                fromPartial: {
                    unjail(value: _99.MsgUnjail): {
                        typeUrl: string;
                        value: _99.MsgUnjail;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.slashing.v1beta1.MsgUnjail": {
                    aminoType: string;
                    toAmino: ({ validatorAddr }: _99.MsgUnjail) => {
                        validator_addr: string;
                    };
                    fromAmino: ({ validator_addr }: {
                        validator_addr: string;
                    }) => _99.MsgUnjail;
                };
            };
            MsgUnjail: {
                encode(message: _99.MsgUnjail, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _99.MsgUnjail;
                fromJSON(object: any): _99.MsgUnjail;
                toJSON(message: _99.MsgUnjail): unknown;
                fromPartial<I extends {
                    validatorAddr?: string;
                } & {
                    validatorAddr?: string;
                } & Record<Exclude<keyof I, "validatorAddr">, never>>(object: I): _99.MsgUnjail;
            };
            MsgUnjailResponse: {
                encode(_: _99.MsgUnjailResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _99.MsgUnjailResponse;
                fromJSON(_: any): _99.MsgUnjailResponse;
                toJSON(_: _99.MsgUnjailResponse): unknown;
                fromPartial<I_1 extends {} & {} & Record<Exclude<keyof I_1, never>, never>>(_: I_1): _99.MsgUnjailResponse;
            };
            ValidatorSigningInfo: {
                encode(message: _98.ValidatorSigningInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.ValidatorSigningInfo;
                fromJSON(object: any): _98.ValidatorSigningInfo;
                toJSON(message: _98.ValidatorSigningInfo): unknown;
                fromPartial<I_2 extends {
                    address?: string;
                    startHeight?: any;
                    indexOffset?: any;
                    jailedUntil?: Date;
                    tombstoned?: boolean;
                    missedBlocksCounter?: any;
                } & {
                    address?: string;
                    startHeight?: any;
                    indexOffset?: any;
                    jailedUntil?: Date;
                    tombstoned?: boolean;
                    missedBlocksCounter?: any;
                } & Record<Exclude<keyof I_2, keyof _98.ValidatorSigningInfo>, never>>(object: I_2): _98.ValidatorSigningInfo;
            };
            Params: {
                encode(message: _98.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _98.Params;
                fromJSON(object: any): _98.Params;
                toJSON(message: _98.Params): unknown;
                fromPartial<I_3 extends {
                    signedBlocksWindow?: any;
                    minSignedPerWindow?: Uint8Array;
                    downtimeJailDuration?: string;
                    slashFractionDoubleSign?: Uint8Array;
                    slashFractionDowntime?: Uint8Array;
                } & {
                    signedBlocksWindow?: any;
                    minSignedPerWindow?: Uint8Array;
                    downtimeJailDuration?: string;
                    slashFractionDoubleSign?: Uint8Array;
                    slashFractionDowntime?: Uint8Array;
                } & Record<Exclude<keyof I_3, keyof _98.Params>, never>>(object: I_3): _98.Params;
            };
            QueryParamsRequest: {
                encode(_: _97.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryParamsRequest;
                fromJSON(_: any): _97.QueryParamsRequest;
                toJSON(_: _97.QueryParamsRequest): unknown;
                fromPartial<I_4 extends {} & {} & Record<Exclude<keyof I_4, never>, never>>(_: I_4): _97.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _97.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QueryParamsResponse;
                fromJSON(object: any): _97.QueryParamsResponse;
                toJSON(message: _97.QueryParamsResponse): unknown;
                fromPartial<I_5 extends {
                    params?: {
                        signedBlocksWindow?: any;
                        minSignedPerWindow?: Uint8Array;
                        downtimeJailDuration?: string;
                        slashFractionDoubleSign?: Uint8Array;
                        slashFractionDowntime?: Uint8Array;
                    };
                } & {
                    params?: {
                        signedBlocksWindow?: any;
                        minSignedPerWindow?: Uint8Array;
                        downtimeJailDuration?: string;
                        slashFractionDoubleSign?: Uint8Array;
                        slashFractionDowntime?: Uint8Array;
                    } & {
                        signedBlocksWindow?: any;
                        minSignedPerWindow?: Uint8Array;
                        downtimeJailDuration?: string;
                        slashFractionDoubleSign?: Uint8Array;
                        slashFractionDowntime?: Uint8Array;
                    } & Record<Exclude<keyof I_5["params"], keyof _98.Params>, never>;
                } & Record<Exclude<keyof I_5, "params">, never>>(object: I_5): _97.QueryParamsResponse;
            };
            QuerySigningInfoRequest: {
                encode(message: _97.QuerySigningInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QuerySigningInfoRequest;
                fromJSON(object: any): _97.QuerySigningInfoRequest;
                toJSON(message: _97.QuerySigningInfoRequest): unknown;
                fromPartial<I_6 extends {
                    consAddress?: string;
                } & {
                    consAddress?: string;
                } & Record<Exclude<keyof I_6, "consAddress">, never>>(object: I_6): _97.QuerySigningInfoRequest;
            };
            QuerySigningInfoResponse: {
                encode(message: _97.QuerySigningInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QuerySigningInfoResponse;
                fromJSON(object: any): _97.QuerySigningInfoResponse;
                toJSON(message: _97.QuerySigningInfoResponse): unknown;
                fromPartial<I_7 extends {
                    valSigningInfo?: {
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    };
                } & {
                    valSigningInfo?: {
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    } & {
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    } & Record<Exclude<keyof I_7["valSigningInfo"], keyof _98.ValidatorSigningInfo>, never>;
                } & Record<Exclude<keyof I_7, "valSigningInfo">, never>>(object: I_7): _97.QuerySigningInfoResponse;
            };
            QuerySigningInfosRequest: {
                encode(message: _97.QuerySigningInfosRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QuerySigningInfosRequest;
                fromJSON(object: any): _97.QuerySigningInfosRequest;
                toJSON(message: _97.QuerySigningInfosRequest): unknown;
                fromPartial<I_8 extends {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_8["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_8, "pagination">, never>>(object: I_8): _97.QuerySigningInfosRequest;
            };
            QuerySigningInfosResponse: {
                encode(message: _97.QuerySigningInfosResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _97.QuerySigningInfosResponse;
                fromJSON(object: any): _97.QuerySigningInfosResponse;
                toJSON(message: _97.QuerySigningInfosResponse): unknown;
                fromPartial<I_9 extends {
                    info?: {
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    info?: {
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    }[] & ({
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    } & {
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    } & Record<Exclude<keyof I_9["info"][number], keyof _98.ValidatorSigningInfo>, never>)[] & Record<Exclude<keyof I_9["info"], keyof {
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_9["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_9, keyof _97.QuerySigningInfosResponse>, never>>(object: I_9): _97.QuerySigningInfosResponse;
            };
            GenesisState: {
                encode(message: _96.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.GenesisState;
                fromJSON(object: any): _96.GenesisState;
                toJSON(message: _96.GenesisState): unknown;
                fromPartial<I_10 extends {
                    params?: {
                        signedBlocksWindow?: any;
                        minSignedPerWindow?: Uint8Array;
                        downtimeJailDuration?: string;
                        slashFractionDoubleSign?: Uint8Array;
                        slashFractionDowntime?: Uint8Array;
                    };
                    signingInfos?: {
                        address?: string;
                        validatorSigningInfo?: {
                            address?: string;
                            startHeight?: any;
                            indexOffset?: any;
                            jailedUntil?: Date;
                            tombstoned?: boolean;
                            missedBlocksCounter?: any;
                        };
                    }[];
                    missedBlocks?: {
                        address?: string;
                        missedBlocks?: {
                            index?: any;
                            missed?: boolean;
                        }[];
                    }[];
                } & {
                    params?: {
                        signedBlocksWindow?: any;
                        minSignedPerWindow?: Uint8Array;
                        downtimeJailDuration?: string;
                        slashFractionDoubleSign?: Uint8Array;
                        slashFractionDowntime?: Uint8Array;
                    } & {
                        signedBlocksWindow?: any;
                        minSignedPerWindow?: Uint8Array;
                        downtimeJailDuration?: string;
                        slashFractionDoubleSign?: Uint8Array;
                        slashFractionDowntime?: Uint8Array;
                    } & Record<Exclude<keyof I_10["params"], keyof _98.Params>, never>;
                    signingInfos?: {
                        address?: string;
                        validatorSigningInfo?: {
                            address?: string;
                            startHeight?: any;
                            indexOffset?: any;
                            jailedUntil?: Date;
                            tombstoned?: boolean;
                            missedBlocksCounter?: any;
                        };
                    }[] & ({
                        address?: string;
                        validatorSigningInfo?: {
                            address?: string;
                            startHeight?: any;
                            indexOffset?: any;
                            jailedUntil?: Date;
                            tombstoned?: boolean;
                            missedBlocksCounter?: any;
                        };
                    } & {
                        address?: string;
                        validatorSigningInfo?: {
                            address?: string;
                            startHeight?: any;
                            indexOffset?: any;
                            jailedUntil?: Date;
                            tombstoned?: boolean;
                            missedBlocksCounter?: any;
                        } & {
                            address?: string;
                            startHeight?: any;
                            indexOffset?: any;
                            jailedUntil?: Date;
                            tombstoned?: boolean;
                            missedBlocksCounter?: any;
                        } & Record<Exclude<keyof I_10["signingInfos"][number]["validatorSigningInfo"], keyof _98.ValidatorSigningInfo>, never>;
                    } & Record<Exclude<keyof I_10["signingInfos"][number], keyof _96.SigningInfo>, never>)[] & Record<Exclude<keyof I_10["signingInfos"], keyof {
                        address?: string;
                        validatorSigningInfo?: {
                            address?: string;
                            startHeight?: any;
                            indexOffset?: any;
                            jailedUntil?: Date;
                            tombstoned?: boolean;
                            missedBlocksCounter?: any;
                        };
                    }[]>, never>;
                    missedBlocks?: {
                        address?: string;
                        missedBlocks?: {
                            index?: any;
                            missed?: boolean;
                        }[];
                    }[] & ({
                        address?: string;
                        missedBlocks?: {
                            index?: any;
                            missed?: boolean;
                        }[];
                    } & {
                        address?: string;
                        missedBlocks?: {
                            index?: any;
                            missed?: boolean;
                        }[] & ({
                            index?: any;
                            missed?: boolean;
                        } & {
                            index?: any;
                            missed?: boolean;
                        } & Record<Exclude<keyof I_10["missedBlocks"][number]["missedBlocks"][number], keyof _96.MissedBlock>, never>)[] & Record<Exclude<keyof I_10["missedBlocks"][number]["missedBlocks"], keyof {
                            index?: any;
                            missed?: boolean;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_10["missedBlocks"][number], keyof _96.ValidatorMissedBlocks>, never>)[] & Record<Exclude<keyof I_10["missedBlocks"], keyof {
                        address?: string;
                        missedBlocks?: {
                            index?: any;
                            missed?: boolean;
                        }[];
                    }[]>, never>;
                } & Record<Exclude<keyof I_10, keyof _96.GenesisState>, never>>(object: I_10): _96.GenesisState;
            };
            SigningInfo: {
                encode(message: _96.SigningInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.SigningInfo;
                fromJSON(object: any): _96.SigningInfo;
                toJSON(message: _96.SigningInfo): unknown;
                fromPartial<I_11 extends {
                    address?: string;
                    validatorSigningInfo?: {
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    };
                } & {
                    address?: string;
                    validatorSigningInfo?: {
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    } & {
                        address?: string;
                        startHeight?: any;
                        indexOffset?: any;
                        jailedUntil?: Date;
                        tombstoned?: boolean;
                        missedBlocksCounter?: any;
                    } & Record<Exclude<keyof I_11["validatorSigningInfo"], keyof _98.ValidatorSigningInfo>, never>;
                } & Record<Exclude<keyof I_11, keyof _96.SigningInfo>, never>>(object: I_11): _96.SigningInfo;
            };
            ValidatorMissedBlocks: {
                encode(message: _96.ValidatorMissedBlocks, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.ValidatorMissedBlocks;
                fromJSON(object: any): _96.ValidatorMissedBlocks;
                toJSON(message: _96.ValidatorMissedBlocks): unknown;
                fromPartial<I_12 extends {
                    address?: string;
                    missedBlocks?: {
                        index?: any;
                        missed?: boolean;
                    }[];
                } & {
                    address?: string;
                    missedBlocks?: {
                        index?: any;
                        missed?: boolean;
                    }[] & ({
                        index?: any;
                        missed?: boolean;
                    } & {
                        index?: any;
                        missed?: boolean;
                    } & Record<Exclude<keyof I_12["missedBlocks"][number], keyof _96.MissedBlock>, never>)[] & Record<Exclude<keyof I_12["missedBlocks"], keyof {
                        index?: any;
                        missed?: boolean;
                    }[]>, never>;
                } & Record<Exclude<keyof I_12, keyof _96.ValidatorMissedBlocks>, never>>(object: I_12): _96.ValidatorMissedBlocks;
            };
            MissedBlock: {
                encode(message: _96.MissedBlock, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _96.MissedBlock;
                fromJSON(object: any): _96.MissedBlock;
                toJSON(message: _96.MissedBlock): unknown;
                fromPartial<I_13 extends {
                    index?: any;
                    missed?: boolean;
                } & {
                    index?: any;
                    missed?: boolean;
                } & Record<Exclude<keyof I_13, keyof _96.MissedBlock>, never>>(object: I_13): _96.MissedBlock;
            };
        };
    }
    namespace staking {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    createValidator(value: _104.MsgCreateValidator): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    editValidator(value: _104.MsgEditValidator): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    delegate(value: _104.MsgDelegate): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    beginRedelegate(value: _104.MsgBeginRedelegate): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    undelegate(value: _104.MsgUndelegate): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    createValidator(value: _104.MsgCreateValidator): {
                        typeUrl: string;
                        value: _104.MsgCreateValidator;
                    };
                    editValidator(value: _104.MsgEditValidator): {
                        typeUrl: string;
                        value: _104.MsgEditValidator;
                    };
                    delegate(value: _104.MsgDelegate): {
                        typeUrl: string;
                        value: _104.MsgDelegate;
                    };
                    beginRedelegate(value: _104.MsgBeginRedelegate): {
                        typeUrl: string;
                        value: _104.MsgBeginRedelegate;
                    };
                    undelegate(value: _104.MsgUndelegate): {
                        typeUrl: string;
                        value: _104.MsgUndelegate;
                    };
                };
                toJSON: {
                    createValidator(value: _104.MsgCreateValidator): {
                        typeUrl: string;
                        value: unknown;
                    };
                    editValidator(value: _104.MsgEditValidator): {
                        typeUrl: string;
                        value: unknown;
                    };
                    delegate(value: _104.MsgDelegate): {
                        typeUrl: string;
                        value: unknown;
                    };
                    beginRedelegate(value: _104.MsgBeginRedelegate): {
                        typeUrl: string;
                        value: unknown;
                    };
                    undelegate(value: _104.MsgUndelegate): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    createValidator(value: any): {
                        typeUrl: string;
                        value: _104.MsgCreateValidator;
                    };
                    editValidator(value: any): {
                        typeUrl: string;
                        value: _104.MsgEditValidator;
                    };
                    delegate(value: any): {
                        typeUrl: string;
                        value: _104.MsgDelegate;
                    };
                    beginRedelegate(value: any): {
                        typeUrl: string;
                        value: _104.MsgBeginRedelegate;
                    };
                    undelegate(value: any): {
                        typeUrl: string;
                        value: _104.MsgUndelegate;
                    };
                };
                fromPartial: {
                    createValidator(value: _104.MsgCreateValidator): {
                        typeUrl: string;
                        value: _104.MsgCreateValidator;
                    };
                    editValidator(value: _104.MsgEditValidator): {
                        typeUrl: string;
                        value: _104.MsgEditValidator;
                    };
                    delegate(value: _104.MsgDelegate): {
                        typeUrl: string;
                        value: _104.MsgDelegate;
                    };
                    beginRedelegate(value: _104.MsgBeginRedelegate): {
                        typeUrl: string;
                        value: _104.MsgBeginRedelegate;
                    };
                    undelegate(value: _104.MsgUndelegate): {
                        typeUrl: string;
                        value: _104.MsgUndelegate;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.staking.v1beta1.MsgCreateValidator": {
                    aminoType: string;
                    toAmino: ({ description, commission, minSelfDelegation, delegatorAddress, validatorAddress, pubkey, value }: _104.MsgCreateValidator) => {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        commission: {
                            rate: string;
                            max_rate: string;
                            max_change_rate: string;
                        };
                        min_self_delegation: string;
                        delegator_address: string;
                        validator_address: string;
                        pubkey: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        value: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ description, commission, min_self_delegation, delegator_address, validator_address, pubkey, value }: {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        commission: {
                            rate: string;
                            max_rate: string;
                            max_change_rate: string;
                        };
                        min_self_delegation: string;
                        delegator_address: string;
                        validator_address: string;
                        pubkey: {
                            type_url: string;
                            value: Uint8Array;
                        };
                        value: {
                            denom: string;
                            amount: string;
                        };
                    }) => _104.MsgCreateValidator;
                };
                "/cosmos.staking.v1beta1.MsgEditValidator": {
                    aminoType: string;
                    toAmino: ({ description, validatorAddress, commissionRate, minSelfDelegation }: _104.MsgEditValidator) => {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        validator_address: string;
                        commission_rate: string;
                        min_self_delegation: string;
                    };
                    fromAmino: ({ description, validator_address, commission_rate, min_self_delegation }: {
                        description: {
                            moniker: string;
                            identity: string;
                            website: string;
                            security_contact: string;
                            details: string;
                        };
                        validator_address: string;
                        commission_rate: string;
                        min_self_delegation: string;
                    }) => _104.MsgEditValidator;
                };
                "/cosmos.staking.v1beta1.MsgDelegate": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress, amount }: _104.MsgDelegate) => {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ delegator_address, validator_address, amount }: {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    }) => _104.MsgDelegate;
                };
                "/cosmos.staking.v1beta1.MsgBeginRedelegate": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorSrcAddress, validatorDstAddress, amount }: _104.MsgBeginRedelegate) => {
                        delegator_address: string;
                        validator_src_address: string;
                        validator_dst_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ delegator_address, validator_src_address, validator_dst_address, amount }: {
                        delegator_address: string;
                        validator_src_address: string;
                        validator_dst_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    }) => _104.MsgBeginRedelegate;
                };
                "/cosmos.staking.v1beta1.MsgUndelegate": {
                    aminoType: string;
                    toAmino: ({ delegatorAddress, validatorAddress, amount }: _104.MsgUndelegate) => {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    };
                    fromAmino: ({ delegator_address, validator_address, amount }: {
                        delegator_address: string;
                        validator_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        };
                    }) => _104.MsgUndelegate;
                };
            };
            MsgCreateValidator: {
                encode(message: _104.MsgCreateValidator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.MsgCreateValidator;
                fromJSON(object: any): _104.MsgCreateValidator;
                toJSON(message: _104.MsgCreateValidator): unknown;
                fromPartial<I extends {
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    };
                    commission?: {
                        rate?: string;
                        maxRate?: string;
                        maxChangeRate?: string;
                    };
                    minSelfDelegation?: string;
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    pubkey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    value?: {
                        denom?: string;
                        amount?: string;
                    };
                } & {
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    } & {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    } & Record<Exclude<keyof I["description"], keyof _103.Description>, never>;
                    commission?: {
                        rate?: string;
                        maxRate?: string;
                        maxChangeRate?: string;
                    } & {
                        rate?: string;
                        maxRate?: string;
                        maxChangeRate?: string;
                    } & Record<Exclude<keyof I["commission"], keyof _103.CommissionRates>, never>;
                    minSelfDelegation?: string;
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    pubkey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["pubkey"], keyof import("../google/protobuf/any").Any>, never>;
                    value?: {
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["value"], keyof _46.Coin>, never>;
                } & Record<Exclude<keyof I, keyof _104.MsgCreateValidator>, never>>(object: I): _104.MsgCreateValidator;
            };
            MsgCreateValidatorResponse: {
                encode(_: _104.MsgCreateValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.MsgCreateValidatorResponse;
                fromJSON(_: any): _104.MsgCreateValidatorResponse;
                toJSON(_: _104.MsgCreateValidatorResponse): unknown;
                fromPartial<I_1 extends {} & {} & Record<Exclude<keyof I_1, never>, never>>(_: I_1): _104.MsgCreateValidatorResponse;
            };
            MsgEditValidator: {
                encode(message: _104.MsgEditValidator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.MsgEditValidator;
                fromJSON(object: any): _104.MsgEditValidator;
                toJSON(message: _104.MsgEditValidator): unknown;
                fromPartial<I_2 extends {
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    };
                    validatorAddress?: string;
                    commissionRate?: string;
                    minSelfDelegation?: string;
                } & {
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    } & {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    } & Record<Exclude<keyof I_2["description"], keyof _103.Description>, never>;
                    validatorAddress?: string;
                    commissionRate?: string;
                    minSelfDelegation?: string;
                } & Record<Exclude<keyof I_2, keyof _104.MsgEditValidator>, never>>(object: I_2): _104.MsgEditValidator;
            };
            MsgEditValidatorResponse: {
                encode(_: _104.MsgEditValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.MsgEditValidatorResponse;
                fromJSON(_: any): _104.MsgEditValidatorResponse;
                toJSON(_: _104.MsgEditValidatorResponse): unknown;
                fromPartial<I_3 extends {} & {} & Record<Exclude<keyof I_3, never>, never>>(_: I_3): _104.MsgEditValidatorResponse;
            };
            MsgDelegate: {
                encode(message: _104.MsgDelegate, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.MsgDelegate;
                fromJSON(object: any): _104.MsgDelegate;
                toJSON(message: _104.MsgDelegate): unknown;
                fromPartial<I_4 extends {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                } & {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_4["amount"], keyof _46.Coin>, never>;
                } & Record<Exclude<keyof I_4, keyof _104.MsgDelegate>, never>>(object: I_4): _104.MsgDelegate;
            };
            MsgDelegateResponse: {
                encode(_: _104.MsgDelegateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.MsgDelegateResponse;
                fromJSON(_: any): _104.MsgDelegateResponse;
                toJSON(_: _104.MsgDelegateResponse): unknown;
                fromPartial<I_5 extends {} & {} & Record<Exclude<keyof I_5, never>, never>>(_: I_5): _104.MsgDelegateResponse;
            };
            MsgBeginRedelegate: {
                encode(message: _104.MsgBeginRedelegate, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.MsgBeginRedelegate;
                fromJSON(object: any): _104.MsgBeginRedelegate;
                toJSON(message: _104.MsgBeginRedelegate): unknown;
                fromPartial<I_6 extends {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                } & {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_6["amount"], keyof _46.Coin>, never>;
                } & Record<Exclude<keyof I_6, keyof _104.MsgBeginRedelegate>, never>>(object: I_6): _104.MsgBeginRedelegate;
            };
            MsgBeginRedelegateResponse: {
                encode(message: _104.MsgBeginRedelegateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.MsgBeginRedelegateResponse;
                fromJSON(object: any): _104.MsgBeginRedelegateResponse;
                toJSON(message: _104.MsgBeginRedelegateResponse): unknown;
                fromPartial<I_7 extends {
                    completionTime?: Date;
                } & {
                    completionTime?: Date;
                } & Record<Exclude<keyof I_7, "completionTime">, never>>(object: I_7): _104.MsgBeginRedelegateResponse;
            };
            MsgUndelegate: {
                encode(message: _104.MsgUndelegate, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.MsgUndelegate;
                fromJSON(object: any): _104.MsgUndelegate;
                toJSON(message: _104.MsgUndelegate): unknown;
                fromPartial<I_8 extends {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    };
                } & {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_8["amount"], keyof _46.Coin>, never>;
                } & Record<Exclude<keyof I_8, keyof _104.MsgUndelegate>, never>>(object: I_8): _104.MsgUndelegate;
            };
            MsgUndelegateResponse: {
                encode(message: _104.MsgUndelegateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _104.MsgUndelegateResponse;
                fromJSON(object: any): _104.MsgUndelegateResponse;
                toJSON(message: _104.MsgUndelegateResponse): unknown;
                fromPartial<I_9 extends {
                    completionTime?: Date;
                } & {
                    completionTime?: Date;
                } & Record<Exclude<keyof I_9, "completionTime">, never>>(object: I_9): _104.MsgUndelegateResponse;
            };
            bondStatusFromJSON(object: any): _103.BondStatus;
            bondStatusToJSON(object: _103.BondStatus): string;
            BondStatus: typeof _103.BondStatus;
            HistoricalInfo: {
                encode(message: _103.HistoricalInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.HistoricalInfo;
                fromJSON(object: any): _103.HistoricalInfo;
                toJSON(message: _103.HistoricalInfo): unknown;
                fromPartial<I_10 extends {
                    header?: {
                        version?: {
                            block?: any;
                            app?: any;
                        };
                        chainId?: string;
                        height?: any;
                        time?: Date;
                        lastBlockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        lastCommitHash?: Uint8Array;
                        dataHash?: Uint8Array;
                        validatorsHash?: Uint8Array;
                        nextValidatorsHash?: Uint8Array;
                        consensusHash?: Uint8Array;
                        appHash?: Uint8Array;
                        lastResultsHash?: Uint8Array;
                        evidenceHash?: Uint8Array;
                        proposerAddress?: Uint8Array;
                    };
                    valset?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[];
                } & {
                    header?: {
                        version?: {
                            block?: any;
                            app?: any;
                        };
                        chainId?: string;
                        height?: any;
                        time?: Date;
                        lastBlockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        };
                        lastCommitHash?: Uint8Array;
                        dataHash?: Uint8Array;
                        validatorsHash?: Uint8Array;
                        nextValidatorsHash?: Uint8Array;
                        consensusHash?: Uint8Array;
                        appHash?: Uint8Array;
                        lastResultsHash?: Uint8Array;
                        evidenceHash?: Uint8Array;
                        proposerAddress?: Uint8Array;
                    } & {
                        version?: {
                            block?: any;
                            app?: any;
                        } & {
                            block?: any;
                            app?: any;
                        } & Record<Exclude<keyof I_10["header"]["version"], keyof import("../tendermint/version/types").Consensus>, never>;
                        chainId?: string;
                        height?: any;
                        time?: Date;
                        lastBlockId?: {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            };
                        } & {
                            hash?: Uint8Array;
                            partSetHeader?: {
                                total?: number;
                                hash?: Uint8Array;
                            } & {
                                total?: number;
                                hash?: Uint8Array;
                            } & Record<Exclude<keyof I_10["header"]["lastBlockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                        } & Record<Exclude<keyof I_10["header"]["lastBlockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                        lastCommitHash?: Uint8Array;
                        dataHash?: Uint8Array;
                        validatorsHash?: Uint8Array;
                        nextValidatorsHash?: Uint8Array;
                        consensusHash?: Uint8Array;
                        appHash?: Uint8Array;
                        lastResultsHash?: Uint8Array;
                        evidenceHash?: Uint8Array;
                        proposerAddress?: Uint8Array;
                    } & Record<Exclude<keyof I_10["header"], keyof import("../tendermint/types/types").Header>, never>;
                    valset?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[] & ({
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    } & {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_10["valset"][number]["consensusPubkey"], keyof import("../google/protobuf/any").Any>, never>;
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & Record<Exclude<keyof I_10["valset"][number]["description"], keyof _103.Description>, never>;
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        } & {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & Record<Exclude<keyof I_10["valset"][number]["commission"]["commissionRates"], keyof _103.CommissionRates>, never>;
                            updateTime?: Date;
                        } & Record<Exclude<keyof I_10["valset"][number]["commission"], keyof _103.Commission>, never>;
                        minSelfDelegation?: string;
                    } & Record<Exclude<keyof I_10["valset"][number], keyof _103.Validator>, never>)[] & Record<Exclude<keyof I_10["valset"], keyof {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_10, keyof _103.HistoricalInfo>, never>>(object: I_10): _103.HistoricalInfo;
            };
            CommissionRates: {
                encode(message: _103.CommissionRates, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.CommissionRates;
                fromJSON(object: any): _103.CommissionRates;
                toJSON(message: _103.CommissionRates): unknown;
                fromPartial<I_11 extends {
                    rate?: string;
                    maxRate?: string;
                    maxChangeRate?: string;
                } & {
                    rate?: string;
                    maxRate?: string;
                    maxChangeRate?: string;
                } & Record<Exclude<keyof I_11, keyof _103.CommissionRates>, never>>(object: I_11): _103.CommissionRates;
            };
            Commission: {
                encode(message: _103.Commission, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.Commission;
                fromJSON(object: any): _103.Commission;
                toJSON(message: _103.Commission): unknown;
                fromPartial<I_12 extends {
                    commissionRates?: {
                        rate?: string;
                        maxRate?: string;
                        maxChangeRate?: string;
                    };
                    updateTime?: Date;
                } & {
                    commissionRates?: {
                        rate?: string;
                        maxRate?: string;
                        maxChangeRate?: string;
                    } & {
                        rate?: string;
                        maxRate?: string;
                        maxChangeRate?: string;
                    } & Record<Exclude<keyof I_12["commissionRates"], keyof _103.CommissionRates>, never>;
                    updateTime?: Date;
                } & Record<Exclude<keyof I_12, keyof _103.Commission>, never>>(object: I_12): _103.Commission;
            };
            Description: {
                encode(message: _103.Description, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.Description;
                fromJSON(object: any): _103.Description;
                toJSON(message: _103.Description): unknown;
                fromPartial<I_13 extends {
                    moniker?: string;
                    identity?: string;
                    website?: string;
                    securityContact?: string;
                    details?: string;
                } & {
                    moniker?: string;
                    identity?: string;
                    website?: string;
                    securityContact?: string;
                    details?: string;
                } & Record<Exclude<keyof I_13, keyof _103.Description>, never>>(object: I_13): _103.Description;
            };
            Validator: {
                encode(message: _103.Validator, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.Validator;
                fromJSON(object: any): _103.Validator;
                toJSON(message: _103.Validator): unknown;
                fromPartial<I_14 extends {
                    operatorAddress?: string;
                    consensusPubkey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    jailed?: boolean;
                    status?: _103.BondStatus;
                    tokens?: string;
                    delegatorShares?: string;
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    };
                    unbondingHeight?: any;
                    unbondingTime?: Date;
                    commission?: {
                        commissionRates?: {
                            rate?: string;
                            maxRate?: string;
                            maxChangeRate?: string;
                        };
                        updateTime?: Date;
                    };
                    minSelfDelegation?: string;
                } & {
                    operatorAddress?: string;
                    consensusPubkey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_14["consensusPubkey"], keyof import("../google/protobuf/any").Any>, never>;
                    jailed?: boolean;
                    status?: _103.BondStatus;
                    tokens?: string;
                    delegatorShares?: string;
                    description?: {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    } & {
                        moniker?: string;
                        identity?: string;
                        website?: string;
                        securityContact?: string;
                        details?: string;
                    } & Record<Exclude<keyof I_14["description"], keyof _103.Description>, never>;
                    unbondingHeight?: any;
                    unbondingTime?: Date;
                    commission?: {
                        commissionRates?: {
                            rate?: string;
                            maxRate?: string;
                            maxChangeRate?: string;
                        };
                        updateTime?: Date;
                    } & {
                        commissionRates?: {
                            rate?: string;
                            maxRate?: string;
                            maxChangeRate?: string;
                        } & {
                            rate?: string;
                            maxRate?: string;
                            maxChangeRate?: string;
                        } & Record<Exclude<keyof I_14["commission"]["commissionRates"], keyof _103.CommissionRates>, never>;
                        updateTime?: Date;
                    } & Record<Exclude<keyof I_14["commission"], keyof _103.Commission>, never>;
                    minSelfDelegation?: string;
                } & Record<Exclude<keyof I_14, keyof _103.Validator>, never>>(object: I_14): _103.Validator;
            };
            ValAddresses: {
                encode(message: _103.ValAddresses, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.ValAddresses;
                fromJSON(object: any): _103.ValAddresses;
                toJSON(message: _103.ValAddresses): unknown;
                fromPartial<I_15 extends {
                    addresses?: string[];
                } & {
                    addresses?: string[] & string[] & Record<Exclude<keyof I_15["addresses"], keyof string[]>, never>;
                } & Record<Exclude<keyof I_15, "addresses">, never>>(object: I_15): _103.ValAddresses;
            };
            DVPair: {
                encode(message: _103.DVPair, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.DVPair;
                fromJSON(object: any): _103.DVPair;
                toJSON(message: _103.DVPair): unknown;
                fromPartial<I_16 extends {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                } & {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                } & Record<Exclude<keyof I_16, keyof _103.DVPair>, never>>(object: I_16): _103.DVPair;
            };
            DVPairs: {
                encode(message: _103.DVPairs, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.DVPairs;
                fromJSON(object: any): _103.DVPairs;
                toJSON(message: _103.DVPairs): unknown;
                fromPartial<I_17 extends {
                    pairs?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                    }[];
                } & {
                    pairs?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                    }[] & ({
                        delegatorAddress?: string;
                        validatorAddress?: string;
                    } & {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                    } & Record<Exclude<keyof I_17["pairs"][number], keyof _103.DVPair>, never>)[] & Record<Exclude<keyof I_17["pairs"], keyof {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_17, "pairs">, never>>(object: I_17): _103.DVPairs;
            };
            DVVTriplet: {
                encode(message: _103.DVVTriplet, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.DVVTriplet;
                fromJSON(object: any): _103.DVVTriplet;
                toJSON(message: _103.DVVTriplet): unknown;
                fromPartial<I_18 extends {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                } & {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                } & Record<Exclude<keyof I_18, keyof _103.DVVTriplet>, never>>(object: I_18): _103.DVVTriplet;
            };
            DVVTriplets: {
                encode(message: _103.DVVTriplets, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.DVVTriplets;
                fromJSON(object: any): _103.DVVTriplets;
                toJSON(message: _103.DVVTriplets): unknown;
                fromPartial<I_19 extends {
                    triplets?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                    }[];
                } & {
                    triplets?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                    }[] & ({
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                    } & {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                    } & Record<Exclude<keyof I_19["triplets"][number], keyof _103.DVVTriplet>, never>)[] & Record<Exclude<keyof I_19["triplets"], keyof {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_19, "triplets">, never>>(object: I_19): _103.DVVTriplets;
            };
            Delegation: {
                encode(message: _103.Delegation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.Delegation;
                fromJSON(object: any): _103.Delegation;
                toJSON(message: _103.Delegation): unknown;
                fromPartial<I_20 extends {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    shares?: string;
                } & {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    shares?: string;
                } & Record<Exclude<keyof I_20, keyof _103.Delegation>, never>>(object: I_20): _103.Delegation;
            };
            UnbondingDelegation: {
                encode(message: _103.UnbondingDelegation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.UnbondingDelegation;
                fromJSON(object: any): _103.UnbondingDelegation;
                toJSON(message: _103.UnbondingDelegation): unknown;
                fromPartial<I_21 extends {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    entries?: {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        balance?: string;
                    }[];
                } & {
                    delegatorAddress?: string;
                    validatorAddress?: string;
                    entries?: {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        balance?: string;
                    }[] & ({
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        balance?: string;
                    } & {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        balance?: string;
                    } & Record<Exclude<keyof I_21["entries"][number], keyof _103.UnbondingDelegationEntry>, never>)[] & Record<Exclude<keyof I_21["entries"], keyof {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        balance?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_21, keyof _103.UnbondingDelegation>, never>>(object: I_21): _103.UnbondingDelegation;
            };
            UnbondingDelegationEntry: {
                encode(message: _103.UnbondingDelegationEntry, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.UnbondingDelegationEntry;
                fromJSON(object: any): _103.UnbondingDelegationEntry;
                toJSON(message: _103.UnbondingDelegationEntry): unknown;
                fromPartial<I_22 extends {
                    creationHeight?: any;
                    completionTime?: Date;
                    initialBalance?: string;
                    balance?: string;
                } & {
                    creationHeight?: any;
                    completionTime?: Date;
                    initialBalance?: string;
                    balance?: string;
                } & Record<Exclude<keyof I_22, keyof _103.UnbondingDelegationEntry>, never>>(object: I_22): _103.UnbondingDelegationEntry;
            };
            RedelegationEntry: {
                encode(message: _103.RedelegationEntry, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.RedelegationEntry;
                fromJSON(object: any): _103.RedelegationEntry;
                toJSON(message: _103.RedelegationEntry): unknown;
                fromPartial<I_23 extends {
                    creationHeight?: any;
                    completionTime?: Date;
                    initialBalance?: string;
                    sharesDst?: string;
                } & {
                    creationHeight?: any;
                    completionTime?: Date;
                    initialBalance?: string;
                    sharesDst?: string;
                } & Record<Exclude<keyof I_23, keyof _103.RedelegationEntry>, never>>(object: I_23): _103.RedelegationEntry;
            };
            Redelegation: {
                encode(message: _103.Redelegation, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.Redelegation;
                fromJSON(object: any): _103.Redelegation;
                toJSON(message: _103.Redelegation): unknown;
                fromPartial<I_24 extends {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                    entries?: {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                    }[];
                } & {
                    delegatorAddress?: string;
                    validatorSrcAddress?: string;
                    validatorDstAddress?: string;
                    entries?: {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                    }[] & ({
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                    } & {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                    } & Record<Exclude<keyof I_24["entries"][number], keyof _103.RedelegationEntry>, never>)[] & Record<Exclude<keyof I_24["entries"], keyof {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_24, keyof _103.Redelegation>, never>>(object: I_24): _103.Redelegation;
            };
            Params: {
                encode(message: _103.Params, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.Params;
                fromJSON(object: any): _103.Params;
                toJSON(message: _103.Params): unknown;
                fromPartial<I_25 extends {
                    unbondingTime?: string;
                    maxValidators?: number;
                    maxEntries?: number;
                    historicalEntries?: number;
                    bondDenom?: string;
                    minCommissionRate?: string;
                } & {
                    unbondingTime?: string;
                    maxValidators?: number;
                    maxEntries?: number;
                    historicalEntries?: number;
                    bondDenom?: string;
                    minCommissionRate?: string;
                } & Record<Exclude<keyof I_25, keyof _103.Params>, never>>(object: I_25): _103.Params;
            };
            DelegationResponse: {
                encode(message: _103.DelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.DelegationResponse;
                fromJSON(object: any): _103.DelegationResponse;
                toJSON(message: _103.DelegationResponse): unknown;
                fromPartial<I_26 extends {
                    delegation?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                    };
                    balance?: {
                        denom?: string;
                        amount?: string;
                    };
                } & {
                    delegation?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                    } & {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                    } & Record<Exclude<keyof I_26["delegation"], keyof _103.Delegation>, never>;
                    balance?: {
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_26["balance"], keyof _46.Coin>, never>;
                } & Record<Exclude<keyof I_26, keyof _103.DelegationResponse>, never>>(object: I_26): _103.DelegationResponse;
            };
            RedelegationEntryResponse: {
                encode(message: _103.RedelegationEntryResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.RedelegationEntryResponse;
                fromJSON(object: any): _103.RedelegationEntryResponse;
                toJSON(message: _103.RedelegationEntryResponse): unknown;
                fromPartial<I_27 extends {
                    redelegationEntry?: {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                    };
                    balance?: string;
                } & {
                    redelegationEntry?: {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                    } & {
                        creationHeight?: any;
                        completionTime?: Date;
                        initialBalance?: string;
                        sharesDst?: string;
                    } & Record<Exclude<keyof I_27["redelegationEntry"], keyof _103.RedelegationEntry>, never>;
                    balance?: string;
                } & Record<Exclude<keyof I_27, keyof _103.RedelegationEntryResponse>, never>>(object: I_27): _103.RedelegationEntryResponse;
            };
            RedelegationResponse: {
                encode(message: _103.RedelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.RedelegationResponse;
                fromJSON(object: any): _103.RedelegationResponse;
                toJSON(message: _103.RedelegationResponse): unknown;
                fromPartial<I_28 extends {
                    redelegation?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[];
                    };
                    entries?: {
                        redelegationEntry?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        };
                        balance?: string;
                    }[];
                } & {
                    redelegation?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[];
                    } & {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[] & ({
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        } & {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        } & Record<Exclude<keyof I_28["redelegation"]["entries"][number], keyof _103.RedelegationEntry>, never>)[] & Record<Exclude<keyof I_28["redelegation"]["entries"], keyof {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_28["redelegation"], keyof _103.Redelegation>, never>;
                    entries?: {
                        redelegationEntry?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        };
                        balance?: string;
                    }[] & ({
                        redelegationEntry?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        };
                        balance?: string;
                    } & {
                        redelegationEntry?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        } & {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        } & Record<Exclude<keyof I_28["entries"][number]["redelegationEntry"], keyof _103.RedelegationEntry>, never>;
                        balance?: string;
                    } & Record<Exclude<keyof I_28["entries"][number], keyof _103.RedelegationEntryResponse>, never>)[] & Record<Exclude<keyof I_28["entries"], keyof {
                        redelegationEntry?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        };
                        balance?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_28, keyof _103.RedelegationResponse>, never>>(object: I_28): _103.RedelegationResponse;
            };
            Pool: {
                encode(message: _103.Pool, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _103.Pool;
                fromJSON(object: any): _103.Pool;
                toJSON(message: _103.Pool): unknown;
                fromPartial<I_29 extends {
                    notBondedTokens?: string;
                    bondedTokens?: string;
                } & {
                    notBondedTokens?: string;
                    bondedTokens?: string;
                } & Record<Exclude<keyof I_29, keyof _103.Pool>, never>>(object: I_29): _103.Pool;
            };
            QueryValidatorsRequest: {
                encode(message: _102.QueryValidatorsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryValidatorsRequest;
                fromJSON(object: any): _102.QueryValidatorsRequest;
                toJSON(message: _102.QueryValidatorsRequest): unknown;
                fromPartial<I_30 extends {
                    status?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    status?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_30["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_30, keyof _102.QueryValidatorsRequest>, never>>(object: I_30): _102.QueryValidatorsRequest;
            };
            QueryValidatorsResponse: {
                encode(message: _102.QueryValidatorsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryValidatorsResponse;
                fromJSON(object: any): _102.QueryValidatorsResponse;
                toJSON(message: _102.QueryValidatorsResponse): unknown;
                fromPartial<I_31 extends {
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[] & ({
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    } & {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_31["validators"][number]["consensusPubkey"], keyof import("../google/protobuf/any").Any>, never>;
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & Record<Exclude<keyof I_31["validators"][number]["description"], keyof _103.Description>, never>;
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        } & {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & Record<Exclude<keyof I_31["validators"][number]["commission"]["commissionRates"], keyof _103.CommissionRates>, never>;
                            updateTime?: Date;
                        } & Record<Exclude<keyof I_31["validators"][number]["commission"], keyof _103.Commission>, never>;
                        minSelfDelegation?: string;
                    } & Record<Exclude<keyof I_31["validators"][number], keyof _103.Validator>, never>)[] & Record<Exclude<keyof I_31["validators"], keyof {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_31["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_31, keyof _102.QueryValidatorsResponse>, never>>(object: I_31): _102.QueryValidatorsResponse;
            };
            QueryValidatorRequest: {
                encode(message: _102.QueryValidatorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryValidatorRequest;
                fromJSON(object: any): _102.QueryValidatorRequest;
                toJSON(message: _102.QueryValidatorRequest): unknown;
                fromPartial<I_32 extends {
                    validatorAddr?: string;
                } & {
                    validatorAddr?: string;
                } & Record<Exclude<keyof I_32, "validatorAddr">, never>>(object: I_32): _102.QueryValidatorRequest;
            };
            QueryValidatorResponse: {
                encode(message: _102.QueryValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryValidatorResponse;
                fromJSON(object: any): _102.QueryValidatorResponse;
                toJSON(message: _102.QueryValidatorResponse): unknown;
                fromPartial<I_33 extends {
                    validator?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    };
                } & {
                    validator?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    } & {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_33["validator"]["consensusPubkey"], keyof import("../google/protobuf/any").Any>, never>;
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & Record<Exclude<keyof I_33["validator"]["description"], keyof _103.Description>, never>;
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        } & {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & Record<Exclude<keyof I_33["validator"]["commission"]["commissionRates"], keyof _103.CommissionRates>, never>;
                            updateTime?: Date;
                        } & Record<Exclude<keyof I_33["validator"]["commission"], keyof _103.Commission>, never>;
                        minSelfDelegation?: string;
                    } & Record<Exclude<keyof I_33["validator"], keyof _103.Validator>, never>;
                } & Record<Exclude<keyof I_33, "validator">, never>>(object: I_33): _102.QueryValidatorResponse;
            };
            QueryValidatorDelegationsRequest: {
                encode(message: _102.QueryValidatorDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryValidatorDelegationsRequest;
                fromJSON(object: any): _102.QueryValidatorDelegationsRequest;
                toJSON(message: _102.QueryValidatorDelegationsRequest): unknown;
                fromPartial<I_34 extends {
                    validatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    validatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_34["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_34, keyof _102.QueryValidatorDelegationsRequest>, never>>(object: I_34): _102.QueryValidatorDelegationsRequest;
            };
            QueryValidatorDelegationsResponse: {
                encode(message: _102.QueryValidatorDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryValidatorDelegationsResponse;
                fromJSON(object: any): _102.QueryValidatorDelegationsResponse;
                toJSON(message: _102.QueryValidatorDelegationsResponse): unknown;
                fromPartial<I_35 extends {
                    delegationResponses?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    delegationResponses?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[] & ({
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    } & {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        } & {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        } & Record<Exclude<keyof I_35["delegationResponses"][number]["delegation"], keyof _103.Delegation>, never>;
                        balance?: {
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_35["delegationResponses"][number]["balance"], keyof _46.Coin>, never>;
                    } & Record<Exclude<keyof I_35["delegationResponses"][number], keyof _103.DelegationResponse>, never>)[] & Record<Exclude<keyof I_35["delegationResponses"], keyof {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_35["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_35, keyof _102.QueryValidatorDelegationsResponse>, never>>(object: I_35): _102.QueryValidatorDelegationsResponse;
            };
            QueryValidatorUnbondingDelegationsRequest: {
                encode(message: _102.QueryValidatorUnbondingDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryValidatorUnbondingDelegationsRequest;
                fromJSON(object: any): _102.QueryValidatorUnbondingDelegationsRequest;
                toJSON(message: _102.QueryValidatorUnbondingDelegationsRequest): unknown;
                fromPartial<I_36 extends {
                    validatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    validatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_36["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_36, keyof _102.QueryValidatorUnbondingDelegationsRequest>, never>>(object: I_36): _102.QueryValidatorUnbondingDelegationsRequest;
            };
            QueryValidatorUnbondingDelegationsResponse: {
                encode(message: _102.QueryValidatorUnbondingDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryValidatorUnbondingDelegationsResponse;
                fromJSON(object: any): _102.QueryValidatorUnbondingDelegationsResponse;
                toJSON(message: _102.QueryValidatorUnbondingDelegationsResponse): unknown;
                fromPartial<I_37 extends {
                    unbondingResponses?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    unbondingResponses?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[] & ({
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    } & {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[] & ({
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        } & {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        } & Record<Exclude<keyof I_37["unbondingResponses"][number]["entries"][number], keyof _103.UnbondingDelegationEntry>, never>)[] & Record<Exclude<keyof I_37["unbondingResponses"][number]["entries"], keyof {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_37["unbondingResponses"][number], keyof _103.UnbondingDelegation>, never>)[] & Record<Exclude<keyof I_37["unbondingResponses"], keyof {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_37["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_37, keyof _102.QueryValidatorUnbondingDelegationsResponse>, never>>(object: I_37): _102.QueryValidatorUnbondingDelegationsResponse;
            };
            QueryDelegationRequest: {
                encode(message: _102.QueryDelegationRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryDelegationRequest;
                fromJSON(object: any): _102.QueryDelegationRequest;
                toJSON(message: _102.QueryDelegationRequest): unknown;
                fromPartial<I_38 extends {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                } & {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                } & Record<Exclude<keyof I_38, keyof _102.QueryDelegationRequest>, never>>(object: I_38): _102.QueryDelegationRequest;
            };
            QueryDelegationResponse: {
                encode(message: _102.QueryDelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryDelegationResponse;
                fromJSON(object: any): _102.QueryDelegationResponse;
                toJSON(message: _102.QueryDelegationResponse): unknown;
                fromPartial<I_39 extends {
                    delegationResponse?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    };
                } & {
                    delegationResponse?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    } & {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        } & {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        } & Record<Exclude<keyof I_39["delegationResponse"]["delegation"], keyof _103.Delegation>, never>;
                        balance?: {
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_39["delegationResponse"]["balance"], keyof _46.Coin>, never>;
                    } & Record<Exclude<keyof I_39["delegationResponse"], keyof _103.DelegationResponse>, never>;
                } & Record<Exclude<keyof I_39, "delegationResponse">, never>>(object: I_39): _102.QueryDelegationResponse;
            };
            QueryUnbondingDelegationRequest: {
                encode(message: _102.QueryUnbondingDelegationRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryUnbondingDelegationRequest;
                fromJSON(object: any): _102.QueryUnbondingDelegationRequest;
                toJSON(message: _102.QueryUnbondingDelegationRequest): unknown;
                fromPartial<I_40 extends {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                } & {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                } & Record<Exclude<keyof I_40, keyof _102.QueryUnbondingDelegationRequest>, never>>(object: I_40): _102.QueryUnbondingDelegationRequest;
            };
            QueryUnbondingDelegationResponse: {
                encode(message: _102.QueryUnbondingDelegationResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryUnbondingDelegationResponse;
                fromJSON(object: any): _102.QueryUnbondingDelegationResponse;
                toJSON(message: _102.QueryUnbondingDelegationResponse): unknown;
                fromPartial<I_41 extends {
                    unbond?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    };
                } & {
                    unbond?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    } & {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[] & ({
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        } & {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        } & Record<Exclude<keyof I_41["unbond"]["entries"][number], keyof _103.UnbondingDelegationEntry>, never>)[] & Record<Exclude<keyof I_41["unbond"]["entries"], keyof {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_41["unbond"], keyof _103.UnbondingDelegation>, never>;
                } & Record<Exclude<keyof I_41, "unbond">, never>>(object: I_41): _102.QueryUnbondingDelegationResponse;
            };
            QueryDelegatorDelegationsRequest: {
                encode(message: _102.QueryDelegatorDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryDelegatorDelegationsRequest;
                fromJSON(object: any): _102.QueryDelegatorDelegationsRequest;
                toJSON(message: _102.QueryDelegatorDelegationsRequest): unknown;
                fromPartial<I_42 extends {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_42["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_42, keyof _102.QueryDelegatorDelegationsRequest>, never>>(object: I_42): _102.QueryDelegatorDelegationsRequest;
            };
            QueryDelegatorDelegationsResponse: {
                encode(message: _102.QueryDelegatorDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryDelegatorDelegationsResponse;
                fromJSON(object: any): _102.QueryDelegatorDelegationsResponse;
                toJSON(message: _102.QueryDelegatorDelegationsResponse): unknown;
                fromPartial<I_43 extends {
                    delegationResponses?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    delegationResponses?: {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[] & ({
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    } & {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        } & {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        } & Record<Exclude<keyof I_43["delegationResponses"][number]["delegation"], keyof _103.Delegation>, never>;
                        balance?: {
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_43["delegationResponses"][number]["balance"], keyof _46.Coin>, never>;
                    } & Record<Exclude<keyof I_43["delegationResponses"][number], keyof _103.DelegationResponse>, never>)[] & Record<Exclude<keyof I_43["delegationResponses"], keyof {
                        delegation?: {
                            delegatorAddress?: string;
                            validatorAddress?: string;
                            shares?: string;
                        };
                        balance?: {
                            denom?: string;
                            amount?: string;
                        };
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_43["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_43, keyof _102.QueryDelegatorDelegationsResponse>, never>>(object: I_43): _102.QueryDelegatorDelegationsResponse;
            };
            QueryDelegatorUnbondingDelegationsRequest: {
                encode(message: _102.QueryDelegatorUnbondingDelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryDelegatorUnbondingDelegationsRequest;
                fromJSON(object: any): _102.QueryDelegatorUnbondingDelegationsRequest;
                toJSON(message: _102.QueryDelegatorUnbondingDelegationsRequest): unknown;
                fromPartial<I_44 extends {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_44["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_44, keyof _102.QueryDelegatorUnbondingDelegationsRequest>, never>>(object: I_44): _102.QueryDelegatorUnbondingDelegationsRequest;
            };
            QueryDelegatorUnbondingDelegationsResponse: {
                encode(message: _102.QueryDelegatorUnbondingDelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryDelegatorUnbondingDelegationsResponse;
                fromJSON(object: any): _102.QueryDelegatorUnbondingDelegationsResponse;
                toJSON(message: _102.QueryDelegatorUnbondingDelegationsResponse): unknown;
                fromPartial<I_45 extends {
                    unbondingResponses?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    unbondingResponses?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[] & ({
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    } & {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[] & ({
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        } & {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        } & Record<Exclude<keyof I_45["unbondingResponses"][number]["entries"][number], keyof _103.UnbondingDelegationEntry>, never>)[] & Record<Exclude<keyof I_45["unbondingResponses"][number]["entries"], keyof {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_45["unbondingResponses"][number], keyof _103.UnbondingDelegation>, never>)[] & Record<Exclude<keyof I_45["unbondingResponses"], keyof {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_45["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_45, keyof _102.QueryDelegatorUnbondingDelegationsResponse>, never>>(object: I_45): _102.QueryDelegatorUnbondingDelegationsResponse;
            };
            QueryRedelegationsRequest: {
                encode(message: _102.QueryRedelegationsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryRedelegationsRequest;
                fromJSON(object: any): _102.QueryRedelegationsRequest;
                toJSON(message: _102.QueryRedelegationsRequest): unknown;
                fromPartial<I_46 extends {
                    delegatorAddr?: string;
                    srcValidatorAddr?: string;
                    dstValidatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    delegatorAddr?: string;
                    srcValidatorAddr?: string;
                    dstValidatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_46["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_46, keyof _102.QueryRedelegationsRequest>, never>>(object: I_46): _102.QueryRedelegationsRequest;
            };
            QueryRedelegationsResponse: {
                encode(message: _102.QueryRedelegationsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryRedelegationsResponse;
                fromJSON(object: any): _102.QueryRedelegationsResponse;
                toJSON(message: _102.QueryRedelegationsResponse): unknown;
                fromPartial<I_47 extends {
                    redelegationResponses?: {
                        redelegation?: {
                            delegatorAddress?: string;
                            validatorSrcAddress?: string;
                            validatorDstAddress?: string;
                            entries?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            }[];
                        };
                        entries?: {
                            redelegationEntry?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            };
                            balance?: string;
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    redelegationResponses?: {
                        redelegation?: {
                            delegatorAddress?: string;
                            validatorSrcAddress?: string;
                            validatorDstAddress?: string;
                            entries?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            }[];
                        };
                        entries?: {
                            redelegationEntry?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            };
                            balance?: string;
                        }[];
                    }[] & ({
                        redelegation?: {
                            delegatorAddress?: string;
                            validatorSrcAddress?: string;
                            validatorDstAddress?: string;
                            entries?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            }[];
                        };
                        entries?: {
                            redelegationEntry?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            };
                            balance?: string;
                        }[];
                    } & {
                        redelegation?: {
                            delegatorAddress?: string;
                            validatorSrcAddress?: string;
                            validatorDstAddress?: string;
                            entries?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            }[];
                        } & {
                            delegatorAddress?: string;
                            validatorSrcAddress?: string;
                            validatorDstAddress?: string;
                            entries?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            }[] & ({
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            } & {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            } & Record<Exclude<keyof I_47["redelegationResponses"][number]["redelegation"]["entries"][number], keyof _103.RedelegationEntry>, never>)[] & Record<Exclude<keyof I_47["redelegationResponses"][number]["redelegation"]["entries"], keyof {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_47["redelegationResponses"][number]["redelegation"], keyof _103.Redelegation>, never>;
                        entries?: {
                            redelegationEntry?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            };
                            balance?: string;
                        }[] & ({
                            redelegationEntry?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            };
                            balance?: string;
                        } & {
                            redelegationEntry?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            } & {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            } & Record<Exclude<keyof I_47["redelegationResponses"][number]["entries"][number]["redelegationEntry"], keyof _103.RedelegationEntry>, never>;
                            balance?: string;
                        } & Record<Exclude<keyof I_47["redelegationResponses"][number]["entries"][number], keyof _103.RedelegationEntryResponse>, never>)[] & Record<Exclude<keyof I_47["redelegationResponses"][number]["entries"], keyof {
                            redelegationEntry?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            };
                            balance?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_47["redelegationResponses"][number], keyof _103.RedelegationResponse>, never>)[] & Record<Exclude<keyof I_47["redelegationResponses"], keyof {
                        redelegation?: {
                            delegatorAddress?: string;
                            validatorSrcAddress?: string;
                            validatorDstAddress?: string;
                            entries?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            }[];
                        };
                        entries?: {
                            redelegationEntry?: {
                                creationHeight?: any;
                                completionTime?: Date;
                                initialBalance?: string;
                                sharesDst?: string;
                            };
                            balance?: string;
                        }[];
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_47["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_47, keyof _102.QueryRedelegationsResponse>, never>>(object: I_47): _102.QueryRedelegationsResponse;
            };
            QueryDelegatorValidatorsRequest: {
                encode(message: _102.QueryDelegatorValidatorsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryDelegatorValidatorsRequest;
                fromJSON(object: any): _102.QueryDelegatorValidatorsRequest;
                toJSON(message: _102.QueryDelegatorValidatorsRequest): unknown;
                fromPartial<I_48 extends {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    delegatorAddr?: string;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_48["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_48, keyof _102.QueryDelegatorValidatorsRequest>, never>>(object: I_48): _102.QueryDelegatorValidatorsRequest;
            };
            QueryDelegatorValidatorsResponse: {
                encode(message: _102.QueryDelegatorValidatorsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryDelegatorValidatorsResponse;
                fromJSON(object: any): _102.QueryDelegatorValidatorsResponse;
                toJSON(message: _102.QueryDelegatorValidatorsResponse): unknown;
                fromPartial<I_49 extends {
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[] & ({
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    } & {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_49["validators"][number]["consensusPubkey"], keyof import("../google/protobuf/any").Any>, never>;
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & Record<Exclude<keyof I_49["validators"][number]["description"], keyof _103.Description>, never>;
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        } & {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & Record<Exclude<keyof I_49["validators"][number]["commission"]["commissionRates"], keyof _103.CommissionRates>, never>;
                            updateTime?: Date;
                        } & Record<Exclude<keyof I_49["validators"][number]["commission"], keyof _103.Commission>, never>;
                        minSelfDelegation?: string;
                    } & Record<Exclude<keyof I_49["validators"][number], keyof _103.Validator>, never>)[] & Record<Exclude<keyof I_49["validators"], keyof {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_49["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_49, keyof _102.QueryDelegatorValidatorsResponse>, never>>(object: I_49): _102.QueryDelegatorValidatorsResponse;
            };
            QueryDelegatorValidatorRequest: {
                encode(message: _102.QueryDelegatorValidatorRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryDelegatorValidatorRequest;
                fromJSON(object: any): _102.QueryDelegatorValidatorRequest;
                toJSON(message: _102.QueryDelegatorValidatorRequest): unknown;
                fromPartial<I_50 extends {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                } & {
                    delegatorAddr?: string;
                    validatorAddr?: string;
                } & Record<Exclude<keyof I_50, keyof _102.QueryDelegatorValidatorRequest>, never>>(object: I_50): _102.QueryDelegatorValidatorRequest;
            };
            QueryDelegatorValidatorResponse: {
                encode(message: _102.QueryDelegatorValidatorResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryDelegatorValidatorResponse;
                fromJSON(object: any): _102.QueryDelegatorValidatorResponse;
                toJSON(message: _102.QueryDelegatorValidatorResponse): unknown;
                fromPartial<I_51 extends {
                    validator?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    };
                } & {
                    validator?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    } & {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_51["validator"]["consensusPubkey"], keyof import("../google/protobuf/any").Any>, never>;
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & Record<Exclude<keyof I_51["validator"]["description"], keyof _103.Description>, never>;
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        } & {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & Record<Exclude<keyof I_51["validator"]["commission"]["commissionRates"], keyof _103.CommissionRates>, never>;
                            updateTime?: Date;
                        } & Record<Exclude<keyof I_51["validator"]["commission"], keyof _103.Commission>, never>;
                        minSelfDelegation?: string;
                    } & Record<Exclude<keyof I_51["validator"], keyof _103.Validator>, never>;
                } & Record<Exclude<keyof I_51, "validator">, never>>(object: I_51): _102.QueryDelegatorValidatorResponse;
            };
            QueryHistoricalInfoRequest: {
                encode(message: _102.QueryHistoricalInfoRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryHistoricalInfoRequest;
                fromJSON(object: any): _102.QueryHistoricalInfoRequest;
                toJSON(message: _102.QueryHistoricalInfoRequest): unknown;
                fromPartial<I_52 extends {
                    height?: any;
                } & {
                    height?: any;
                } & Record<Exclude<keyof I_52, "height">, never>>(object: I_52): _102.QueryHistoricalInfoRequest;
            };
            QueryHistoricalInfoResponse: {
                encode(message: _102.QueryHistoricalInfoResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryHistoricalInfoResponse;
                fromJSON(object: any): _102.QueryHistoricalInfoResponse;
                toJSON(message: _102.QueryHistoricalInfoResponse): unknown;
                fromPartial<I_53 extends {
                    hist?: {
                        header?: {
                            version?: {
                                block?: any;
                                app?: any;
                            };
                            chainId?: string;
                            height?: any;
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        };
                        valset?: {
                            operatorAddress?: string;
                            consensusPubkey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            jailed?: boolean;
                            status?: _103.BondStatus;
                            tokens?: string;
                            delegatorShares?: string;
                            description?: {
                                moniker?: string;
                                identity?: string;
                                website?: string;
                                securityContact?: string;
                                details?: string;
                            };
                            unbondingHeight?: any;
                            unbondingTime?: Date;
                            commission?: {
                                commissionRates?: {
                                    rate?: string;
                                    maxRate?: string;
                                    maxChangeRate?: string;
                                };
                                updateTime?: Date;
                            };
                            minSelfDelegation?: string;
                        }[];
                    };
                } & {
                    hist?: {
                        header?: {
                            version?: {
                                block?: any;
                                app?: any;
                            };
                            chainId?: string;
                            height?: any;
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        };
                        valset?: {
                            operatorAddress?: string;
                            consensusPubkey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            jailed?: boolean;
                            status?: _103.BondStatus;
                            tokens?: string;
                            delegatorShares?: string;
                            description?: {
                                moniker?: string;
                                identity?: string;
                                website?: string;
                                securityContact?: string;
                                details?: string;
                            };
                            unbondingHeight?: any;
                            unbondingTime?: Date;
                            commission?: {
                                commissionRates?: {
                                    rate?: string;
                                    maxRate?: string;
                                    maxChangeRate?: string;
                                };
                                updateTime?: Date;
                            };
                            minSelfDelegation?: string;
                        }[];
                    } & {
                        header?: {
                            version?: {
                                block?: any;
                                app?: any;
                            };
                            chainId?: string;
                            height?: any;
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        } & {
                            version?: {
                                block?: any;
                                app?: any;
                            } & {
                                block?: any;
                                app?: any;
                            } & Record<Exclude<keyof I_53["hist"]["header"]["version"], keyof import("../tendermint/version/types").Consensus>, never>;
                            chainId?: string;
                            height?: any;
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            } & {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                } & {
                                    total?: number;
                                    hash?: Uint8Array;
                                } & Record<Exclude<keyof I_53["hist"]["header"]["lastBlockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                            } & Record<Exclude<keyof I_53["hist"]["header"]["lastBlockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        } & Record<Exclude<keyof I_53["hist"]["header"], keyof import("../tendermint/types/types").Header>, never>;
                        valset?: {
                            operatorAddress?: string;
                            consensusPubkey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            jailed?: boolean;
                            status?: _103.BondStatus;
                            tokens?: string;
                            delegatorShares?: string;
                            description?: {
                                moniker?: string;
                                identity?: string;
                                website?: string;
                                securityContact?: string;
                                details?: string;
                            };
                            unbondingHeight?: any;
                            unbondingTime?: Date;
                            commission?: {
                                commissionRates?: {
                                    rate?: string;
                                    maxRate?: string;
                                    maxChangeRate?: string;
                                };
                                updateTime?: Date;
                            };
                            minSelfDelegation?: string;
                        }[] & ({
                            operatorAddress?: string;
                            consensusPubkey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            jailed?: boolean;
                            status?: _103.BondStatus;
                            tokens?: string;
                            delegatorShares?: string;
                            description?: {
                                moniker?: string;
                                identity?: string;
                                website?: string;
                                securityContact?: string;
                                details?: string;
                            };
                            unbondingHeight?: any;
                            unbondingTime?: Date;
                            commission?: {
                                commissionRates?: {
                                    rate?: string;
                                    maxRate?: string;
                                    maxChangeRate?: string;
                                };
                                updateTime?: Date;
                            };
                            minSelfDelegation?: string;
                        } & {
                            operatorAddress?: string;
                            consensusPubkey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_53["hist"]["valset"][number]["consensusPubkey"], keyof import("../google/protobuf/any").Any>, never>;
                            jailed?: boolean;
                            status?: _103.BondStatus;
                            tokens?: string;
                            delegatorShares?: string;
                            description?: {
                                moniker?: string;
                                identity?: string;
                                website?: string;
                                securityContact?: string;
                                details?: string;
                            } & {
                                moniker?: string;
                                identity?: string;
                                website?: string;
                                securityContact?: string;
                                details?: string;
                            } & Record<Exclude<keyof I_53["hist"]["valset"][number]["description"], keyof _103.Description>, never>;
                            unbondingHeight?: any;
                            unbondingTime?: Date;
                            commission?: {
                                commissionRates?: {
                                    rate?: string;
                                    maxRate?: string;
                                    maxChangeRate?: string;
                                };
                                updateTime?: Date;
                            } & {
                                commissionRates?: {
                                    rate?: string;
                                    maxRate?: string;
                                    maxChangeRate?: string;
                                } & {
                                    rate?: string;
                                    maxRate?: string;
                                    maxChangeRate?: string;
                                } & Record<Exclude<keyof I_53["hist"]["valset"][number]["commission"]["commissionRates"], keyof _103.CommissionRates>, never>;
                                updateTime?: Date;
                            } & Record<Exclude<keyof I_53["hist"]["valset"][number]["commission"], keyof _103.Commission>, never>;
                            minSelfDelegation?: string;
                        } & Record<Exclude<keyof I_53["hist"]["valset"][number], keyof _103.Validator>, never>)[] & Record<Exclude<keyof I_53["hist"]["valset"], keyof {
                            operatorAddress?: string;
                            consensusPubkey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            jailed?: boolean;
                            status?: _103.BondStatus;
                            tokens?: string;
                            delegatorShares?: string;
                            description?: {
                                moniker?: string;
                                identity?: string;
                                website?: string;
                                securityContact?: string;
                                details?: string;
                            };
                            unbondingHeight?: any;
                            unbondingTime?: Date;
                            commission?: {
                                commissionRates?: {
                                    rate?: string;
                                    maxRate?: string;
                                    maxChangeRate?: string;
                                };
                                updateTime?: Date;
                            };
                            minSelfDelegation?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_53["hist"], keyof _103.HistoricalInfo>, never>;
                } & Record<Exclude<keyof I_53, "hist">, never>>(object: I_53): _102.QueryHistoricalInfoResponse;
            };
            QueryPoolRequest: {
                encode(_: _102.QueryPoolRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryPoolRequest;
                fromJSON(_: any): _102.QueryPoolRequest;
                toJSON(_: _102.QueryPoolRequest): unknown;
                fromPartial<I_54 extends {} & {} & Record<Exclude<keyof I_54, never>, never>>(_: I_54): _102.QueryPoolRequest;
            };
            QueryPoolResponse: {
                encode(message: _102.QueryPoolResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryPoolResponse;
                fromJSON(object: any): _102.QueryPoolResponse;
                toJSON(message: _102.QueryPoolResponse): unknown;
                fromPartial<I_55 extends {
                    pool?: {
                        notBondedTokens?: string;
                        bondedTokens?: string;
                    };
                } & {
                    pool?: {
                        notBondedTokens?: string;
                        bondedTokens?: string;
                    } & {
                        notBondedTokens?: string;
                        bondedTokens?: string;
                    } & Record<Exclude<keyof I_55["pool"], keyof _103.Pool>, never>;
                } & Record<Exclude<keyof I_55, "pool">, never>>(object: I_55): _102.QueryPoolResponse;
            };
            QueryParamsRequest: {
                encode(_: _102.QueryParamsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryParamsRequest;
                fromJSON(_: any): _102.QueryParamsRequest;
                toJSON(_: _102.QueryParamsRequest): unknown;
                fromPartial<I_56 extends {} & {} & Record<Exclude<keyof I_56, never>, never>>(_: I_56): _102.QueryParamsRequest;
            };
            QueryParamsResponse: {
                encode(message: _102.QueryParamsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _102.QueryParamsResponse;
                fromJSON(object: any): _102.QueryParamsResponse;
                toJSON(message: _102.QueryParamsResponse): unknown;
                fromPartial<I_57 extends {
                    params?: {
                        unbondingTime?: string;
                        maxValidators?: number;
                        maxEntries?: number;
                        historicalEntries?: number;
                        bondDenom?: string;
                        minCommissionRate?: string;
                    };
                } & {
                    params?: {
                        unbondingTime?: string;
                        maxValidators?: number;
                        maxEntries?: number;
                        historicalEntries?: number;
                        bondDenom?: string;
                        minCommissionRate?: string;
                    } & {
                        unbondingTime?: string;
                        maxValidators?: number;
                        maxEntries?: number;
                        historicalEntries?: number;
                        bondDenom?: string;
                        minCommissionRate?: string;
                    } & Record<Exclude<keyof I_57["params"], keyof _103.Params>, never>;
                } & Record<Exclude<keyof I_57, "params">, never>>(object: I_57): _102.QueryParamsResponse;
            };
            GenesisState: {
                encode(message: _101.GenesisState, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.GenesisState;
                fromJSON(object: any): _101.GenesisState;
                toJSON(message: _101.GenesisState): unknown;
                fromPartial<I_58 extends {
                    params?: {
                        unbondingTime?: string;
                        maxValidators?: number;
                        maxEntries?: number;
                        historicalEntries?: number;
                        bondDenom?: string;
                        minCommissionRate?: string;
                    };
                    lastTotalPower?: Uint8Array;
                    lastValidatorPowers?: {
                        address?: string;
                        power?: any;
                    }[];
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[];
                    delegations?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                    }[];
                    unbondingDelegations?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[];
                    redelegations?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[];
                    }[];
                    exported?: boolean;
                } & {
                    params?: {
                        unbondingTime?: string;
                        maxValidators?: number;
                        maxEntries?: number;
                        historicalEntries?: number;
                        bondDenom?: string;
                        minCommissionRate?: string;
                    } & {
                        unbondingTime?: string;
                        maxValidators?: number;
                        maxEntries?: number;
                        historicalEntries?: number;
                        bondDenom?: string;
                        minCommissionRate?: string;
                    } & Record<Exclude<keyof I_58["params"], keyof _103.Params>, never>;
                    lastTotalPower?: Uint8Array;
                    lastValidatorPowers?: {
                        address?: string;
                        power?: any;
                    }[] & ({
                        address?: string;
                        power?: any;
                    } & {
                        address?: string;
                        power?: any;
                    } & Record<Exclude<keyof I_58["lastValidatorPowers"][number], keyof _101.LastValidatorPower>, never>)[] & Record<Exclude<keyof I_58["lastValidatorPowers"], keyof {
                        address?: string;
                        power?: any;
                    }[]>, never>;
                    validators?: {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[] & ({
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    } & {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_58["validators"][number]["consensusPubkey"], keyof import("../google/protobuf/any").Any>, never>;
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        } & Record<Exclude<keyof I_58["validators"][number]["description"], keyof _103.Description>, never>;
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        } & {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            } & Record<Exclude<keyof I_58["validators"][number]["commission"]["commissionRates"], keyof _103.CommissionRates>, never>;
                            updateTime?: Date;
                        } & Record<Exclude<keyof I_58["validators"][number]["commission"], keyof _103.Commission>, never>;
                        minSelfDelegation?: string;
                    } & Record<Exclude<keyof I_58["validators"][number], keyof _103.Validator>, never>)[] & Record<Exclude<keyof I_58["validators"], keyof {
                        operatorAddress?: string;
                        consensusPubkey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        jailed?: boolean;
                        status?: _103.BondStatus;
                        tokens?: string;
                        delegatorShares?: string;
                        description?: {
                            moniker?: string;
                            identity?: string;
                            website?: string;
                            securityContact?: string;
                            details?: string;
                        };
                        unbondingHeight?: any;
                        unbondingTime?: Date;
                        commission?: {
                            commissionRates?: {
                                rate?: string;
                                maxRate?: string;
                                maxChangeRate?: string;
                            };
                            updateTime?: Date;
                        };
                        minSelfDelegation?: string;
                    }[]>, never>;
                    delegations?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                    }[] & ({
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                    } & {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                    } & Record<Exclude<keyof I_58["delegations"][number], keyof _103.Delegation>, never>)[] & Record<Exclude<keyof I_58["delegations"], keyof {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        shares?: string;
                    }[]>, never>;
                    unbondingDelegations?: {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[] & ({
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    } & {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[] & ({
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        } & {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        } & Record<Exclude<keyof I_58["unbondingDelegations"][number]["entries"][number], keyof _103.UnbondingDelegationEntry>, never>)[] & Record<Exclude<keyof I_58["unbondingDelegations"][number]["entries"], keyof {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_58["unbondingDelegations"][number], keyof _103.UnbondingDelegation>, never>)[] & Record<Exclude<keyof I_58["unbondingDelegations"], keyof {
                        delegatorAddress?: string;
                        validatorAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            balance?: string;
                        }[];
                    }[]>, never>;
                    redelegations?: {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[];
                    }[] & ({
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[];
                    } & {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[] & ({
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        } & {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        } & Record<Exclude<keyof I_58["redelegations"][number]["entries"][number], keyof _103.RedelegationEntry>, never>)[] & Record<Exclude<keyof I_58["redelegations"][number]["entries"], keyof {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_58["redelegations"][number], keyof _103.Redelegation>, never>)[] & Record<Exclude<keyof I_58["redelegations"], keyof {
                        delegatorAddress?: string;
                        validatorSrcAddress?: string;
                        validatorDstAddress?: string;
                        entries?: {
                            creationHeight?: any;
                            completionTime?: Date;
                            initialBalance?: string;
                            sharesDst?: string;
                        }[];
                    }[]>, never>;
                    exported?: boolean;
                } & Record<Exclude<keyof I_58, keyof _101.GenesisState>, never>>(object: I_58): _101.GenesisState;
            };
            LastValidatorPower: {
                encode(message: _101.LastValidatorPower, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _101.LastValidatorPower;
                fromJSON(object: any): _101.LastValidatorPower;
                toJSON(message: _101.LastValidatorPower): unknown;
                fromPartial<I_59 extends {
                    address?: string;
                    power?: any;
                } & {
                    address?: string;
                    power?: any;
                } & Record<Exclude<keyof I_59, keyof _101.LastValidatorPower>, never>>(object: I_59): _101.LastValidatorPower;
            };
            authorizationTypeFromJSON(object: any): _100.AuthorizationType;
            authorizationTypeToJSON(object: _100.AuthorizationType): string;
            AuthorizationType: typeof _100.AuthorizationType;
            StakeAuthorization: {
                encode(message: _100.StakeAuthorization, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.StakeAuthorization;
                fromJSON(object: any): _100.StakeAuthorization;
                toJSON(message: _100.StakeAuthorization): unknown;
                fromPartial<I_60 extends {
                    maxTokens?: {
                        denom?: string;
                        amount?: string;
                    };
                    allowList?: {
                        address?: string[];
                    };
                    denyList?: {
                        address?: string[];
                    };
                    authorizationType?: _100.AuthorizationType;
                } & {
                    maxTokens?: {
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_60["maxTokens"], keyof _46.Coin>, never>;
                    allowList?: {
                        address?: string[];
                    } & {
                        address?: string[] & string[] & Record<Exclude<keyof I_60["allowList"]["address"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I_60["allowList"], "address">, never>;
                    denyList?: {
                        address?: string[];
                    } & {
                        address?: string[] & string[] & Record<Exclude<keyof I_60["denyList"]["address"], keyof string[]>, never>;
                    } & Record<Exclude<keyof I_60["denyList"], "address">, never>;
                    authorizationType?: _100.AuthorizationType;
                } & Record<Exclude<keyof I_60, keyof _100.StakeAuthorization>, never>>(object: I_60): _100.StakeAuthorization;
            };
            StakeAuthorization_Validators: {
                encode(message: _100.StakeAuthorization_Validators, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _100.StakeAuthorization_Validators;
                fromJSON(object: any): _100.StakeAuthorization_Validators;
                toJSON(message: _100.StakeAuthorization_Validators): unknown;
                fromPartial<I_61 extends {
                    address?: string[];
                } & {
                    address?: string[] & string[] & Record<Exclude<keyof I_61["address"], keyof string[]>, never>;
                } & Record<Exclude<keyof I_61, "address">, never>>(object: I_61): _100.StakeAuthorization_Validators;
            };
        };
    }
    namespace tx {
        namespace signing {
            const v1beta1: {
                signModeFromJSON(object: any): _105.SignMode;
                signModeToJSON(object: _105.SignMode): string;
                SignMode: typeof _105.SignMode;
                SignatureDescriptors: {
                    encode(message: _105.SignatureDescriptors, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.SignatureDescriptors;
                    fromJSON(object: any): _105.SignatureDescriptors;
                    toJSON(message: _105.SignatureDescriptors): unknown;
                    fromPartial<I extends {
                        signatures?: {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            data?: {
                                single?: {
                                    mode?: _105.SignMode;
                                    signature?: Uint8Array;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    signatures?: any[];
                                };
                            };
                            sequence?: any;
                        }[];
                    } & {
                        signatures?: {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            data?: {
                                single?: {
                                    mode?: _105.SignMode;
                                    signature?: Uint8Array;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    signatures?: any[];
                                };
                            };
                            sequence?: any;
                        }[] & ({
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            data?: {
                                single?: {
                                    mode?: _105.SignMode;
                                    signature?: Uint8Array;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    signatures?: any[];
                                };
                            };
                            sequence?: any;
                        } & {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I["signatures"][number]["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                            data?: {
                                single?: {
                                    mode?: _105.SignMode;
                                    signature?: Uint8Array;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    signatures?: any[];
                                };
                            } & {
                                single?: {
                                    mode?: _105.SignMode;
                                    signature?: Uint8Array;
                                } & {
                                    mode?: _105.SignMode;
                                    signature?: Uint8Array;
                                } & Record<Exclude<keyof I["signatures"][number]["data"]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    signatures?: any[];
                                } & {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    } & {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                    signatures?: any[] & ({
                                        single?: {
                                            mode?: _105.SignMode;
                                            signature?: Uint8Array;
                                        };
                                        multi?: {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            };
                                            signatures?: any[];
                                        };
                                    } & {
                                        single?: {
                                            mode?: _105.SignMode;
                                            signature?: Uint8Array;
                                        } & {
                                            mode?: _105.SignMode;
                                            signature?: Uint8Array;
                                        } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                        multi?: {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            };
                                            signatures?: any[];
                                        } & {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            } & {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                            signatures?: any[] & ({
                                                single?: {
                                                    mode?: _105.SignMode;
                                                    signature?: Uint8Array;
                                                };
                                                multi?: {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    };
                                                    signatures?: any[];
                                                };
                                            } & {
                                                single?: {
                                                    mode?: _105.SignMode;
                                                    signature?: Uint8Array;
                                                } & {
                                                    mode?: _105.SignMode;
                                                    signature?: Uint8Array;
                                                } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                                multi?: {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    };
                                                    signatures?: any[];
                                                } & {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    } & {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                    signatures?: any[] & ({
                                                        single?: {
                                                            mode?: _105.SignMode;
                                                            signature?: Uint8Array;
                                                        };
                                                        multi?: {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            };
                                                            signatures?: any[];
                                                        };
                                                    } & {
                                                        single?: {
                                                            mode?: _105.SignMode;
                                                            signature?: Uint8Array;
                                                        } & {
                                                            mode?: _105.SignMode;
                                                            signature?: Uint8Array;
                                                        } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                                        multi?: {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            };
                                                            signatures?: any[];
                                                        } & {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            } & {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                            signatures?: any[] & ({
                                                                single?: {
                                                                    mode?: _105.SignMode;
                                                                    signature?: Uint8Array;
                                                                };
                                                                multi?: {
                                                                    bitarray?: {
                                                                        extraBitsStored?: number;
                                                                        elems?: Uint8Array;
                                                                    };
                                                                    signatures?: any[];
                                                                };
                                                            } & {
                                                                single?: {
                                                                    mode?: _105.SignMode;
                                                                    signature?: Uint8Array;
                                                                } & any & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                                                multi?: {
                                                                    bitarray?: {
                                                                        extraBitsStored?: number;
                                                                        elems?: Uint8Array;
                                                                    };
                                                                    signatures?: any[];
                                                                } & any & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                                            } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                                        } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                                    } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                                } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                            } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                        } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                    } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I["signatures"][number]["data"]["multi"]["signatures"], keyof any[]>, never>;
                                } & Record<Exclude<keyof I["signatures"][number]["data"]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                            } & Record<Exclude<keyof I["signatures"][number]["data"], keyof _105.SignatureDescriptor_Data>, never>;
                            sequence?: any;
                        } & Record<Exclude<keyof I["signatures"][number], keyof _105.SignatureDescriptor>, never>)[] & Record<Exclude<keyof I["signatures"], keyof {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            data?: {
                                single?: {
                                    mode?: _105.SignMode;
                                    signature?: Uint8Array;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    signatures?: any[];
                                };
                            };
                            sequence?: any;
                        }[]>, never>;
                    } & Record<Exclude<keyof I, "signatures">, never>>(object: I): _105.SignatureDescriptors;
                };
                SignatureDescriptor: {
                    encode(message: _105.SignatureDescriptor, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.SignatureDescriptor;
                    fromJSON(object: any): _105.SignatureDescriptor;
                    toJSON(message: _105.SignatureDescriptor): unknown;
                    fromPartial<I_1 extends {
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        data?: {
                            single?: {
                                mode?: _105.SignMode;
                                signature?: Uint8Array;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                signatures?: any[];
                            };
                        };
                        sequence?: any;
                    } & {
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_1["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                        data?: {
                            single?: {
                                mode?: _105.SignMode;
                                signature?: Uint8Array;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                signatures?: any[];
                            };
                        } & {
                            single?: {
                                mode?: _105.SignMode;
                                signature?: Uint8Array;
                            } & {
                                mode?: _105.SignMode;
                                signature?: Uint8Array;
                            } & Record<Exclude<keyof I_1["data"]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                signatures?: any[];
                            } & {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                } & {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                } & Record<Exclude<keyof I_1["data"]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                signatures?: any[] & ({
                                    single?: {
                                        mode?: _105.SignMode;
                                        signature?: Uint8Array;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        signatures?: any[];
                                    };
                                } & {
                                    single?: {
                                        mode?: _105.SignMode;
                                        signature?: Uint8Array;
                                    } & {
                                        mode?: _105.SignMode;
                                        signature?: Uint8Array;
                                    } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        signatures?: any[];
                                    } & {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                        signatures?: any[] & ({
                                            single?: {
                                                mode?: _105.SignMode;
                                                signature?: Uint8Array;
                                            };
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                signatures?: any[];
                                            };
                                        } & {
                                            single?: {
                                                mode?: _105.SignMode;
                                                signature?: Uint8Array;
                                            } & {
                                                mode?: _105.SignMode;
                                                signature?: Uint8Array;
                                            } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                signatures?: any[];
                                            } & {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                signatures?: any[] & ({
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                        signature?: Uint8Array;
                                                    };
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        signatures?: any[];
                                                    };
                                                } & {
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                        signature?: Uint8Array;
                                                    } & {
                                                        mode?: _105.SignMode;
                                                        signature?: Uint8Array;
                                                    } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        signatures?: any[];
                                                    } & {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                        signatures?: any[] & ({
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                                signature?: Uint8Array;
                                                            };
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                signatures?: any[];
                                                            };
                                                        } & {
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                                signature?: Uint8Array;
                                                            } & {
                                                                mode?: _105.SignMode;
                                                                signature?: Uint8Array;
                                                            } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                signatures?: any[];
                                                            } & {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                } & any & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                                signatures?: any[] & ({
                                                                    single?: {
                                                                        mode?: _105.SignMode;
                                                                        signature?: Uint8Array;
                                                                    };
                                                                    multi?: {
                                                                        bitarray?: {
                                                                            extraBitsStored?: number;
                                                                            elems?: Uint8Array;
                                                                        };
                                                                        signatures?: any[];
                                                                    };
                                                                } & any & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                                            } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                                        } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                                    } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                                } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                            } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                        } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                    } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                } & Record<Exclude<keyof I_1["data"]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_1["data"]["multi"]["signatures"], keyof any[]>, never>;
                            } & Record<Exclude<keyof I_1["data"]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                        } & Record<Exclude<keyof I_1["data"], keyof _105.SignatureDescriptor_Data>, never>;
                        sequence?: any;
                    } & Record<Exclude<keyof I_1, keyof _105.SignatureDescriptor>, never>>(object: I_1): _105.SignatureDescriptor;
                };
                SignatureDescriptor_Data: {
                    encode(message: _105.SignatureDescriptor_Data, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.SignatureDescriptor_Data;
                    fromJSON(object: any): _105.SignatureDescriptor_Data;
                    toJSON(message: _105.SignatureDescriptor_Data): unknown;
                    fromPartial<I_2 extends {
                        single?: {
                            mode?: _105.SignMode;
                            signature?: Uint8Array;
                        };
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            signatures?: any[];
                        };
                    } & {
                        single?: {
                            mode?: _105.SignMode;
                            signature?: Uint8Array;
                        } & {
                            mode?: _105.SignMode;
                            signature?: Uint8Array;
                        } & Record<Exclude<keyof I_2["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            signatures?: any[];
                        } & {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            } & {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            } & Record<Exclude<keyof I_2["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                            signatures?: any[] & ({
                                single?: {
                                    mode?: _105.SignMode;
                                    signature?: Uint8Array;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    signatures?: any[];
                                };
                            } & {
                                single?: {
                                    mode?: _105.SignMode;
                                    signature?: Uint8Array;
                                } & {
                                    mode?: _105.SignMode;
                                    signature?: Uint8Array;
                                } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    signatures?: any[];
                                } & {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    } & {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                    signatures?: any[] & ({
                                        single?: {
                                            mode?: _105.SignMode;
                                            signature?: Uint8Array;
                                        };
                                        multi?: {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            };
                                            signatures?: any[];
                                        };
                                    } & {
                                        single?: {
                                            mode?: _105.SignMode;
                                            signature?: Uint8Array;
                                        } & {
                                            mode?: _105.SignMode;
                                            signature?: Uint8Array;
                                        } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                        multi?: {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            };
                                            signatures?: any[];
                                        } & {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            } & {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                            signatures?: any[] & ({
                                                single?: {
                                                    mode?: _105.SignMode;
                                                    signature?: Uint8Array;
                                                };
                                                multi?: {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    };
                                                    signatures?: any[];
                                                };
                                            } & {
                                                single?: {
                                                    mode?: _105.SignMode;
                                                    signature?: Uint8Array;
                                                } & {
                                                    mode?: _105.SignMode;
                                                    signature?: Uint8Array;
                                                } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                                multi?: {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    };
                                                    signatures?: any[];
                                                } & {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    } & {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                    signatures?: any[] & ({
                                                        single?: {
                                                            mode?: _105.SignMode;
                                                            signature?: Uint8Array;
                                                        };
                                                        multi?: {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            };
                                                            signatures?: any[];
                                                        };
                                                    } & {
                                                        single?: {
                                                            mode?: _105.SignMode;
                                                            signature?: Uint8Array;
                                                        } & {
                                                            mode?: _105.SignMode;
                                                            signature?: Uint8Array;
                                                        } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                                        multi?: {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            };
                                                            signatures?: any[];
                                                        } & {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            } & {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                            signatures?: any[] & ({
                                                                single?: {
                                                                    mode?: _105.SignMode;
                                                                    signature?: Uint8Array;
                                                                };
                                                                multi?: {
                                                                    bitarray?: {
                                                                        extraBitsStored?: number;
                                                                        elems?: Uint8Array;
                                                                    };
                                                                    signatures?: any[];
                                                                };
                                                            } & {
                                                                single?: {
                                                                    mode?: _105.SignMode;
                                                                    signature?: Uint8Array;
                                                                } & any & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                                                multi?: {
                                                                    bitarray?: {
                                                                        extraBitsStored?: number;
                                                                        elems?: Uint8Array;
                                                                    };
                                                                    signatures?: any[];
                                                                } & any & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                                            } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                                        } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                                    } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                                } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                            } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                        } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                    } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                } & Record<Exclude<keyof I_2["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                            } & Record<Exclude<keyof I_2["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_2["multi"]["signatures"], keyof any[]>, never>;
                        } & Record<Exclude<keyof I_2["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                    } & Record<Exclude<keyof I_2, keyof _105.SignatureDescriptor_Data>, never>>(object: I_2): _105.SignatureDescriptor_Data;
                };
                SignatureDescriptor_Data_Single: {
                    encode(message: _105.SignatureDescriptor_Data_Single, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.SignatureDescriptor_Data_Single;
                    fromJSON(object: any): _105.SignatureDescriptor_Data_Single;
                    toJSON(message: _105.SignatureDescriptor_Data_Single): unknown;
                    fromPartial<I_3 extends {
                        mode?: _105.SignMode;
                        signature?: Uint8Array;
                    } & {
                        mode?: _105.SignMode;
                        signature?: Uint8Array;
                    } & Record<Exclude<keyof I_3, keyof _105.SignatureDescriptor_Data_Single>, never>>(object: I_3): _105.SignatureDescriptor_Data_Single;
                };
                SignatureDescriptor_Data_Multi: {
                    encode(message: _105.SignatureDescriptor_Data_Multi, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                    decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _105.SignatureDescriptor_Data_Multi;
                    fromJSON(object: any): _105.SignatureDescriptor_Data_Multi;
                    toJSON(message: _105.SignatureDescriptor_Data_Multi): unknown;
                    fromPartial<I_4 extends {
                        bitarray?: {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        };
                        signatures?: any[];
                    } & {
                        bitarray?: {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        } & {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        } & Record<Exclude<keyof I_4["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                        signatures?: any[] & ({
                            single?: {
                                mode?: _105.SignMode;
                                signature?: Uint8Array;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                signatures?: any[];
                            };
                        } & {
                            single?: {
                                mode?: _105.SignMode;
                                signature?: Uint8Array;
                            } & {
                                mode?: _105.SignMode;
                                signature?: Uint8Array;
                            } & Record<Exclude<keyof I_4["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                signatures?: any[];
                            } & {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                } & {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                signatures?: any[] & ({
                                    single?: {
                                        mode?: _105.SignMode;
                                        signature?: Uint8Array;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        signatures?: any[];
                                    };
                                } & {
                                    single?: {
                                        mode?: _105.SignMode;
                                        signature?: Uint8Array;
                                    } & {
                                        mode?: _105.SignMode;
                                        signature?: Uint8Array;
                                    } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        signatures?: any[];
                                    } & {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                        signatures?: any[] & ({
                                            single?: {
                                                mode?: _105.SignMode;
                                                signature?: Uint8Array;
                                            };
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                signatures?: any[];
                                            };
                                        } & {
                                            single?: {
                                                mode?: _105.SignMode;
                                                signature?: Uint8Array;
                                            } & {
                                                mode?: _105.SignMode;
                                                signature?: Uint8Array;
                                            } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                signatures?: any[];
                                            } & {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                signatures?: any[] & ({
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                        signature?: Uint8Array;
                                                    };
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        signatures?: any[];
                                                    };
                                                } & {
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                        signature?: Uint8Array;
                                                    } & {
                                                        mode?: _105.SignMode;
                                                        signature?: Uint8Array;
                                                    } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        signatures?: any[];
                                                    } & {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                        signatures?: any[] & ({
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                                signature?: Uint8Array;
                                                            };
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                signatures?: any[];
                                                            };
                                                        } & {
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                                signature?: Uint8Array;
                                                            } & {
                                                                mode?: _105.SignMode;
                                                                signature?: Uint8Array;
                                                            } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["single"], keyof _105.SignatureDescriptor_Data_Single>, never>;
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                signatures?: any[];
                                                            } & {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                } & any & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                                signatures?: any[] & ({
                                                                    single?: {
                                                                        mode?: _105.SignMode;
                                                                        signature?: Uint8Array;
                                                                    };
                                                                    multi?: {
                                                                        bitarray?: {
                                                                            extraBitsStored?: number;
                                                                            elems?: Uint8Array;
                                                                        };
                                                                        signatures?: any[];
                                                                    };
                                                                } & any & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                                            } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                                        } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                                    } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                                } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                            } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                        } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                                    } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                                } & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_4["signatures"][number]["multi"]["signatures"], keyof any[]>, never>;
                            } & Record<Exclude<keyof I_4["signatures"][number]["multi"], keyof _105.SignatureDescriptor_Data_Multi>, never>;
                        } & Record<Exclude<keyof I_4["signatures"][number], keyof _105.SignatureDescriptor_Data>, never>)[] & Record<Exclude<keyof I_4["signatures"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I_4, keyof _105.SignatureDescriptor_Data_Multi>, never>>(object: I_4): _105.SignatureDescriptor_Data_Multi;
                };
            };
        }
        const v1beta1: {
            Tx: {
                encode(message: _107.Tx, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.Tx;
                fromJSON(object: any): _107.Tx;
                toJSON(message: _107.Tx): unknown;
                fromPartial<I extends {
                    body?: {
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        memo?: string;
                        timeoutHeight?: any;
                        extensionOptions?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        nonCriticalExtensionOptions?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    };
                    authInfo?: {
                        signerInfos?: {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            modeInfo?: {
                                single?: {
                                    mode?: _105.SignMode;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                };
                            };
                            sequence?: any;
                        }[];
                        fee?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            gasLimit?: any;
                            payer?: string;
                            granter?: string;
                        };
                        tip?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            tipper?: string;
                        };
                    };
                    signatures?: Uint8Array[];
                } & {
                    body?: {
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        memo?: string;
                        timeoutHeight?: any;
                        extensionOptions?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                        nonCriticalExtensionOptions?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    } & {
                        messages?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["body"]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I["body"]["messages"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                        memo?: string;
                        timeoutHeight?: any;
                        extensionOptions?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["body"]["extensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I["body"]["extensionOptions"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                        nonCriticalExtensionOptions?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["body"]["nonCriticalExtensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I["body"]["nonCriticalExtensionOptions"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                    } & Record<Exclude<keyof I["body"], keyof _107.TxBody>, never>;
                    authInfo?: {
                        signerInfos?: {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            modeInfo?: {
                                single?: {
                                    mode?: _105.SignMode;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                };
                            };
                            sequence?: any;
                        }[];
                        fee?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            gasLimit?: any;
                            payer?: string;
                            granter?: string;
                        };
                        tip?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            tipper?: string;
                        };
                    } & {
                        signerInfos?: {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            modeInfo?: {
                                single?: {
                                    mode?: _105.SignMode;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                };
                            };
                            sequence?: any;
                        }[] & ({
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            modeInfo?: {
                                single?: {
                                    mode?: _105.SignMode;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                };
                            };
                            sequence?: any;
                        } & {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                            modeInfo?: {
                                single?: {
                                    mode?: _105.SignMode;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                };
                            } & {
                                single?: {
                                    mode?: _105.SignMode;
                                } & {
                                    mode?: _105.SignMode;
                                } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["single"], "mode">, never>;
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                } & {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    } & {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                    modeInfos?: any[] & ({
                                        single?: {
                                            mode?: _105.SignMode;
                                        };
                                        multi?: {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            };
                                            modeInfos?: any[];
                                        };
                                    } & {
                                        single?: {
                                            mode?: _105.SignMode;
                                        } & {
                                            mode?: _105.SignMode;
                                        } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                        multi?: {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            };
                                            modeInfos?: any[];
                                        } & {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            } & {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                            modeInfos?: any[] & ({
                                                single?: {
                                                    mode?: _105.SignMode;
                                                };
                                                multi?: {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    };
                                                    modeInfos?: any[];
                                                };
                                            } & {
                                                single?: {
                                                    mode?: _105.SignMode;
                                                } & {
                                                    mode?: _105.SignMode;
                                                } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                multi?: {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    };
                                                    modeInfos?: any[];
                                                } & {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    } & {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                    modeInfos?: any[] & ({
                                                        single?: {
                                                            mode?: _105.SignMode;
                                                        };
                                                        multi?: {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            };
                                                            modeInfos?: any[];
                                                        };
                                                    } & {
                                                        single?: {
                                                            mode?: _105.SignMode;
                                                        } & {
                                                            mode?: _105.SignMode;
                                                        } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                        multi?: {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            };
                                                            modeInfos?: any[];
                                                        } & {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            } & any & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                            modeInfos?: any[] & ({
                                                                single?: {
                                                                    mode?: _105.SignMode;
                                                                };
                                                                multi?: {
                                                                    bitarray?: {
                                                                        extraBitsStored?: number;
                                                                        elems?: Uint8Array;
                                                                    };
                                                                    modeInfos?: any[];
                                                                };
                                                            } & any & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                        } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                    } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                            } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                        } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                    } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"], keyof any[]>, never>;
                                } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"]["multi"], keyof _107.ModeInfo_Multi>, never>;
                            } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number]["modeInfo"], keyof _107.ModeInfo>, never>;
                            sequence?: any;
                        } & Record<Exclude<keyof I["authInfo"]["signerInfos"][number], keyof _107.SignerInfo>, never>)[] & Record<Exclude<keyof I["authInfo"]["signerInfos"], keyof {
                            publicKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            modeInfo?: {
                                single?: {
                                    mode?: _105.SignMode;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                };
                            };
                            sequence?: any;
                        }[]>, never>;
                        fee?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            gasLimit?: any;
                            payer?: string;
                            granter?: string;
                        } & {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["authInfo"]["fee"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I["authInfo"]["fee"]["amount"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            gasLimit?: any;
                            payer?: string;
                            granter?: string;
                        } & Record<Exclude<keyof I["authInfo"]["fee"], keyof _107.Fee>, never>;
                        tip?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            tipper?: string;
                        } & {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I["authInfo"]["tip"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I["authInfo"]["tip"]["amount"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            tipper?: string;
                        } & Record<Exclude<keyof I["authInfo"]["tip"], keyof _107.Tip>, never>;
                    } & Record<Exclude<keyof I["authInfo"], keyof _107.AuthInfo>, never>;
                    signatures?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I["signatures"], keyof Uint8Array[]>, never>;
                } & Record<Exclude<keyof I, keyof _107.Tx>, never>>(object: I): _107.Tx;
            };
            TxRaw: {
                encode(message: _107.TxRaw, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.TxRaw;
                fromJSON(object: any): _107.TxRaw;
                toJSON(message: _107.TxRaw): unknown;
                fromPartial<I_1 extends {
                    bodyBytes?: Uint8Array;
                    authInfoBytes?: Uint8Array;
                    signatures?: Uint8Array[];
                } & {
                    bodyBytes?: Uint8Array;
                    authInfoBytes?: Uint8Array;
                    signatures?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_1["signatures"], keyof Uint8Array[]>, never>;
                } & Record<Exclude<keyof I_1, keyof _107.TxRaw>, never>>(object: I_1): _107.TxRaw;
            };
            SignDoc: {
                encode(message: _107.SignDoc, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.SignDoc;
                fromJSON(object: any): _107.SignDoc;
                toJSON(message: _107.SignDoc): unknown;
                fromPartial<I_2 extends {
                    bodyBytes?: Uint8Array;
                    authInfoBytes?: Uint8Array;
                    chainId?: string;
                    accountNumber?: any;
                } & {
                    bodyBytes?: Uint8Array;
                    authInfoBytes?: Uint8Array;
                    chainId?: string;
                    accountNumber?: any;
                } & Record<Exclude<keyof I_2, keyof _107.SignDoc>, never>>(object: I_2): _107.SignDoc;
            };
            SignDocDirectAux: {
                encode(message: _107.SignDocDirectAux, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.SignDocDirectAux;
                fromJSON(object: any): _107.SignDocDirectAux;
                toJSON(message: _107.SignDocDirectAux): unknown;
                fromPartial<I_3 extends {
                    bodyBytes?: Uint8Array;
                    publicKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    chainId?: string;
                    accountNumber?: any;
                    sequence?: any;
                    tip?: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        tipper?: string;
                    };
                } & {
                    bodyBytes?: Uint8Array;
                    publicKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_3["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                    chainId?: string;
                    accountNumber?: any;
                    sequence?: any;
                    tip?: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        tipper?: string;
                    } & {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_3["tip"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_3["tip"]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        tipper?: string;
                    } & Record<Exclude<keyof I_3["tip"], keyof _107.Tip>, never>;
                } & Record<Exclude<keyof I_3, keyof _107.SignDocDirectAux>, never>>(object: I_3): _107.SignDocDirectAux;
            };
            TxBody: {
                encode(message: _107.TxBody, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.TxBody;
                fromJSON(object: any): _107.TxBody;
                toJSON(message: _107.TxBody): unknown;
                fromPartial<I_4 extends {
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    memo?: string;
                    timeoutHeight?: any;
                    extensionOptions?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                    nonCriticalExtensionOptions?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[];
                } & {
                    messages?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_4["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_4["messages"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                    memo?: string;
                    timeoutHeight?: any;
                    extensionOptions?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_4["extensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_4["extensionOptions"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                    nonCriticalExtensionOptions?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[] & ({
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_4["nonCriticalExtensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_4["nonCriticalExtensionOptions"], keyof {
                        typeUrl?: string;
                        value?: Uint8Array;
                    }[]>, never>;
                } & Record<Exclude<keyof I_4, keyof _107.TxBody>, never>>(object: I_4): _107.TxBody;
            };
            AuthInfo: {
                encode(message: _107.AuthInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.AuthInfo;
                fromJSON(object: any): _107.AuthInfo;
                toJSON(message: _107.AuthInfo): unknown;
                fromPartial<I_5 extends {
                    signerInfos?: {
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        modeInfo?: {
                            single?: {
                                mode?: _105.SignMode;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                modeInfos?: any[];
                            };
                        };
                        sequence?: any;
                    }[];
                    fee?: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        gasLimit?: any;
                        payer?: string;
                        granter?: string;
                    };
                    tip?: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        tipper?: string;
                    };
                } & {
                    signerInfos?: {
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        modeInfo?: {
                            single?: {
                                mode?: _105.SignMode;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                modeInfos?: any[];
                            };
                        };
                        sequence?: any;
                    }[] & ({
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        modeInfo?: {
                            single?: {
                                mode?: _105.SignMode;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                modeInfos?: any[];
                            };
                        };
                        sequence?: any;
                    } & {
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_5["signerInfos"][number]["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                        modeInfo?: {
                            single?: {
                                mode?: _105.SignMode;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                modeInfos?: any[];
                            };
                        } & {
                            single?: {
                                mode?: _105.SignMode;
                            } & {
                                mode?: _105.SignMode;
                            } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["single"], "mode">, never>;
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                modeInfos?: any[];
                            } & {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                } & {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                modeInfos?: any[] & ({
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                } & {
                                    single?: {
                                        mode?: _105.SignMode;
                                    } & {
                                        mode?: _105.SignMode;
                                    } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    } & {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                        modeInfos?: any[] & ({
                                            single?: {
                                                mode?: _105.SignMode;
                                            };
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            };
                                        } & {
                                            single?: {
                                                mode?: _105.SignMode;
                                            } & {
                                                mode?: _105.SignMode;
                                            } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            } & {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                modeInfos?: any[] & ({
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    };
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    };
                                                } & {
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    } & {
                                                        mode?: _105.SignMode;
                                                    } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    } & {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                        modeInfos?: any[] & ({
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            };
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            };
                                                        } & {
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            } & any & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            } & any & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                        } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                    } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                            } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                        } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                    } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"], keyof any[]>, never>;
                            } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"]["multi"], keyof _107.ModeInfo_Multi>, never>;
                        } & Record<Exclude<keyof I_5["signerInfos"][number]["modeInfo"], keyof _107.ModeInfo>, never>;
                        sequence?: any;
                    } & Record<Exclude<keyof I_5["signerInfos"][number], keyof _107.SignerInfo>, never>)[] & Record<Exclude<keyof I_5["signerInfos"], keyof {
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        modeInfo?: {
                            single?: {
                                mode?: _105.SignMode;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                modeInfos?: any[];
                            };
                        };
                        sequence?: any;
                    }[]>, never>;
                    fee?: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        gasLimit?: any;
                        payer?: string;
                        granter?: string;
                    } & {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_5["fee"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_5["fee"]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        gasLimit?: any;
                        payer?: string;
                        granter?: string;
                    } & Record<Exclude<keyof I_5["fee"], keyof _107.Fee>, never>;
                    tip?: {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        tipper?: string;
                    } & {
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_5["tip"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_5["tip"]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        tipper?: string;
                    } & Record<Exclude<keyof I_5["tip"], keyof _107.Tip>, never>;
                } & Record<Exclude<keyof I_5, keyof _107.AuthInfo>, never>>(object: I_5): _107.AuthInfo;
            };
            SignerInfo: {
                encode(message: _107.SignerInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.SignerInfo;
                fromJSON(object: any): _107.SignerInfo;
                toJSON(message: _107.SignerInfo): unknown;
                fromPartial<I_6 extends {
                    publicKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                    modeInfo?: {
                        single?: {
                            mode?: _105.SignMode;
                        };
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            modeInfos?: any[];
                        };
                    };
                    sequence?: any;
                } & {
                    publicKey?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I_6["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                    modeInfo?: {
                        single?: {
                            mode?: _105.SignMode;
                        };
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            modeInfos?: any[];
                        };
                    } & {
                        single?: {
                            mode?: _105.SignMode;
                        } & {
                            mode?: _105.SignMode;
                        } & Record<Exclude<keyof I_6["modeInfo"]["single"], "mode">, never>;
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            modeInfos?: any[];
                        } & {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            } & {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                            modeInfos?: any[] & ({
                                single?: {
                                    mode?: _105.SignMode;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                };
                            } & {
                                single?: {
                                    mode?: _105.SignMode;
                                } & {
                                    mode?: _105.SignMode;
                                } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                } & {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    } & {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                    modeInfos?: any[] & ({
                                        single?: {
                                            mode?: _105.SignMode;
                                        };
                                        multi?: {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            };
                                            modeInfos?: any[];
                                        };
                                    } & {
                                        single?: {
                                            mode?: _105.SignMode;
                                        } & {
                                            mode?: _105.SignMode;
                                        } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                        multi?: {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            };
                                            modeInfos?: any[];
                                        } & {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            } & {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                            modeInfos?: any[] & ({
                                                single?: {
                                                    mode?: _105.SignMode;
                                                };
                                                multi?: {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    };
                                                    modeInfos?: any[];
                                                };
                                            } & {
                                                single?: {
                                                    mode?: _105.SignMode;
                                                } & {
                                                    mode?: _105.SignMode;
                                                } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                multi?: {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    };
                                                    modeInfos?: any[];
                                                } & {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    } & {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                    modeInfos?: any[] & ({
                                                        single?: {
                                                            mode?: _105.SignMode;
                                                        };
                                                        multi?: {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            };
                                                            modeInfos?: any[];
                                                        };
                                                    } & {
                                                        single?: {
                                                            mode?: _105.SignMode;
                                                        } & {
                                                            mode?: _105.SignMode;
                                                        } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                        multi?: {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            };
                                                            modeInfos?: any[];
                                                        } & {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            } & any & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                            modeInfos?: any[] & ({
                                                                single?: {
                                                                    mode?: _105.SignMode;
                                                                };
                                                                multi?: {
                                                                    bitarray?: {
                                                                        extraBitsStored?: number;
                                                                        elems?: Uint8Array;
                                                                    };
                                                                    modeInfos?: any[];
                                                                };
                                                            } & any & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                        } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                    } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                            } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                        } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                    } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                            } & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_6["modeInfo"]["multi"]["modeInfos"], keyof any[]>, never>;
                        } & Record<Exclude<keyof I_6["modeInfo"]["multi"], keyof _107.ModeInfo_Multi>, never>;
                    } & Record<Exclude<keyof I_6["modeInfo"], keyof _107.ModeInfo>, never>;
                    sequence?: any;
                } & Record<Exclude<keyof I_6, keyof _107.SignerInfo>, never>>(object: I_6): _107.SignerInfo;
            };
            ModeInfo: {
                encode(message: _107.ModeInfo, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.ModeInfo;
                fromJSON(object: any): _107.ModeInfo;
                toJSON(message: _107.ModeInfo): unknown;
                fromPartial<I_7 extends {
                    single?: {
                        mode?: _105.SignMode;
                    };
                    multi?: {
                        bitarray?: {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        };
                        modeInfos?: any[];
                    };
                } & {
                    single?: {
                        mode?: _105.SignMode;
                    } & {
                        mode?: _105.SignMode;
                    } & Record<Exclude<keyof I_7["single"], "mode">, never>;
                    multi?: {
                        bitarray?: {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        };
                        modeInfos?: any[];
                    } & {
                        bitarray?: {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        } & {
                            extraBitsStored?: number;
                            elems?: Uint8Array;
                        } & Record<Exclude<keyof I_7["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                        modeInfos?: any[] & ({
                            single?: {
                                mode?: _105.SignMode;
                            };
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                modeInfos?: any[];
                            };
                        } & {
                            single?: {
                                mode?: _105.SignMode;
                            } & {
                                mode?: _105.SignMode;
                            } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["single"], "mode">, never>;
                            multi?: {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                };
                                modeInfos?: any[];
                            } & {
                                bitarray?: {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                } & {
                                    extraBitsStored?: number;
                                    elems?: Uint8Array;
                                } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                modeInfos?: any[] & ({
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                } & {
                                    single?: {
                                        mode?: _105.SignMode;
                                    } & {
                                        mode?: _105.SignMode;
                                    } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    } & {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                        modeInfos?: any[] & ({
                                            single?: {
                                                mode?: _105.SignMode;
                                            };
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            };
                                        } & {
                                            single?: {
                                                mode?: _105.SignMode;
                                            } & {
                                                mode?: _105.SignMode;
                                            } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            } & {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                modeInfos?: any[] & ({
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    };
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    };
                                                } & {
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    } & {
                                                        mode?: _105.SignMode;
                                                    } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    } & {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                        modeInfos?: any[] & ({
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            };
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            };
                                                        } & {
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            } & any & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            } & any & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                        } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                    } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                            } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                        } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                    } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                            } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                        } & Record<Exclude<keyof I_7["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_7["multi"]["modeInfos"], keyof any[]>, never>;
                    } & Record<Exclude<keyof I_7["multi"], keyof _107.ModeInfo_Multi>, never>;
                } & Record<Exclude<keyof I_7, keyof _107.ModeInfo>, never>>(object: I_7): _107.ModeInfo;
            };
            ModeInfo_Single: {
                encode(message: _107.ModeInfo_Single, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.ModeInfo_Single;
                fromJSON(object: any): _107.ModeInfo_Single;
                toJSON(message: _107.ModeInfo_Single): unknown;
                fromPartial<I_8 extends {
                    mode?: _105.SignMode;
                } & {
                    mode?: _105.SignMode;
                } & Record<Exclude<keyof I_8, "mode">, never>>(object: I_8): _107.ModeInfo_Single;
            };
            ModeInfo_Multi: {
                encode(message: _107.ModeInfo_Multi, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.ModeInfo_Multi;
                fromJSON(object: any): _107.ModeInfo_Multi;
                toJSON(message: _107.ModeInfo_Multi): unknown;
                fromPartial<I_9 extends {
                    bitarray?: {
                        extraBitsStored?: number;
                        elems?: Uint8Array;
                    };
                    modeInfos?: any[];
                } & {
                    bitarray?: {
                        extraBitsStored?: number;
                        elems?: Uint8Array;
                    } & {
                        extraBitsStored?: number;
                        elems?: Uint8Array;
                    } & Record<Exclude<keyof I_9["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                    modeInfos?: any[] & ({
                        single?: {
                            mode?: _105.SignMode;
                        };
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            modeInfos?: any[];
                        };
                    } & {
                        single?: {
                            mode?: _105.SignMode;
                        } & {
                            mode?: _105.SignMode;
                        } & Record<Exclude<keyof I_9["modeInfos"][number]["single"], "mode">, never>;
                        multi?: {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            };
                            modeInfos?: any[];
                        } & {
                            bitarray?: {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            } & {
                                extraBitsStored?: number;
                                elems?: Uint8Array;
                            } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                            modeInfos?: any[] & ({
                                single?: {
                                    mode?: _105.SignMode;
                                };
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                };
                            } & {
                                single?: {
                                    mode?: _105.SignMode;
                                } & {
                                    mode?: _105.SignMode;
                                } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                multi?: {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    };
                                    modeInfos?: any[];
                                } & {
                                    bitarray?: {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    } & {
                                        extraBitsStored?: number;
                                        elems?: Uint8Array;
                                    } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                    modeInfos?: any[] & ({
                                        single?: {
                                            mode?: _105.SignMode;
                                        };
                                        multi?: {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            };
                                            modeInfos?: any[];
                                        };
                                    } & {
                                        single?: {
                                            mode?: _105.SignMode;
                                        } & {
                                            mode?: _105.SignMode;
                                        } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                        multi?: {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            };
                                            modeInfos?: any[];
                                        } & {
                                            bitarray?: {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            } & {
                                                extraBitsStored?: number;
                                                elems?: Uint8Array;
                                            } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                            modeInfos?: any[] & ({
                                                single?: {
                                                    mode?: _105.SignMode;
                                                };
                                                multi?: {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    };
                                                    modeInfos?: any[];
                                                };
                                            } & {
                                                single?: {
                                                    mode?: _105.SignMode;
                                                } & {
                                                    mode?: _105.SignMode;
                                                } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                multi?: {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    };
                                                    modeInfos?: any[];
                                                } & {
                                                    bitarray?: {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    } & {
                                                        extraBitsStored?: number;
                                                        elems?: Uint8Array;
                                                    } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                    modeInfos?: any[] & ({
                                                        single?: {
                                                            mode?: _105.SignMode;
                                                        };
                                                        multi?: {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            };
                                                            modeInfos?: any[];
                                                        };
                                                    } & {
                                                        single?: {
                                                            mode?: _105.SignMode;
                                                        } & {
                                                            mode?: _105.SignMode;
                                                        } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                        multi?: {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            };
                                                            modeInfos?: any[];
                                                        } & {
                                                            bitarray?: {
                                                                extraBitsStored?: number;
                                                                elems?: Uint8Array;
                                                            } & any & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                            modeInfos?: any[] & ({
                                                                single?: {
                                                                    mode?: _105.SignMode;
                                                                };
                                                                multi?: {
                                                                    bitarray?: {
                                                                        extraBitsStored?: number;
                                                                        elems?: Uint8Array;
                                                                    };
                                                                    modeInfos?: any[];
                                                                };
                                                            } & any & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                        } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                    } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                            } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                        } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                    } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                            } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_9["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                        } & Record<Exclude<keyof I_9["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                    } & Record<Exclude<keyof I_9["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_9["modeInfos"], keyof any[]>, never>;
                } & Record<Exclude<keyof I_9, keyof _107.ModeInfo_Multi>, never>>(object: I_9): _107.ModeInfo_Multi;
            };
            Fee: {
                encode(message: _107.Fee, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.Fee;
                fromJSON(object: any): _107.Fee;
                toJSON(message: _107.Fee): unknown;
                fromPartial<I_10 extends {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    gasLimit?: any;
                    payer?: string;
                    granter?: string;
                } & {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_10["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_10["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    gasLimit?: any;
                    payer?: string;
                    granter?: string;
                } & Record<Exclude<keyof I_10, keyof _107.Fee>, never>>(object: I_10): _107.Fee;
            };
            Tip: {
                encode(message: _107.Tip, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.Tip;
                fromJSON(object: any): _107.Tip;
                toJSON(message: _107.Tip): unknown;
                fromPartial<I_11 extends {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    tipper?: string;
                } & {
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_11["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_11["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    tipper?: string;
                } & Record<Exclude<keyof I_11, keyof _107.Tip>, never>>(object: I_11): _107.Tip;
            };
            AuxSignerData: {
                encode(message: _107.AuxSignerData, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _107.AuxSignerData;
                fromJSON(object: any): _107.AuxSignerData;
                toJSON(message: _107.AuxSignerData): unknown;
                fromPartial<I_12 extends {
                    address?: string;
                    signDoc?: {
                        bodyBytes?: Uint8Array;
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        chainId?: string;
                        accountNumber?: any;
                        sequence?: any;
                        tip?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            tipper?: string;
                        };
                    };
                    mode?: _105.SignMode;
                    sig?: Uint8Array;
                } & {
                    address?: string;
                    signDoc?: {
                        bodyBytes?: Uint8Array;
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        chainId?: string;
                        accountNumber?: any;
                        sequence?: any;
                        tip?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            tipper?: string;
                        };
                    } & {
                        bodyBytes?: Uint8Array;
                        publicKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_12["signDoc"]["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                        chainId?: string;
                        accountNumber?: any;
                        sequence?: any;
                        tip?: {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[];
                            tipper?: string;
                        } & {
                            amount?: {
                                denom?: string;
                                amount?: string;
                            }[] & ({
                                denom?: string;
                                amount?: string;
                            } & {
                                denom?: string;
                                amount?: string;
                            } & Record<Exclude<keyof I_12["signDoc"]["tip"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_12["signDoc"]["tip"]["amount"], keyof {
                                denom?: string;
                                amount?: string;
                            }[]>, never>;
                            tipper?: string;
                        } & Record<Exclude<keyof I_12["signDoc"]["tip"], keyof _107.Tip>, never>;
                    } & Record<Exclude<keyof I_12["signDoc"], keyof _107.SignDocDirectAux>, never>;
                    mode?: _105.SignMode;
                    sig?: Uint8Array;
                } & Record<Exclude<keyof I_12, keyof _107.AuxSignerData>, never>>(object: I_12): _107.AuxSignerData;
            };
            orderByFromJSON(object: any): _106.OrderBy;
            orderByToJSON(object: _106.OrderBy): string;
            broadcastModeFromJSON(object: any): _106.BroadcastMode;
            broadcastModeToJSON(object: _106.BroadcastMode): string;
            OrderBy: typeof _106.OrderBy;
            BroadcastMode: typeof _106.BroadcastMode;
            GetTxsEventRequest: {
                encode(message: _106.GetTxsEventRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.GetTxsEventRequest;
                fromJSON(object: any): _106.GetTxsEventRequest;
                toJSON(message: _106.GetTxsEventRequest): unknown;
                fromPartial<I_13 extends {
                    events?: string[];
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                    orderBy?: _106.OrderBy;
                } & {
                    events?: string[] & string[] & Record<Exclude<keyof I_13["events"], keyof string[]>, never>;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_13["pagination"], keyof _39.PageRequest>, never>;
                    orderBy?: _106.OrderBy;
                } & Record<Exclude<keyof I_13, keyof _106.GetTxsEventRequest>, never>>(object: I_13): _106.GetTxsEventRequest;
            };
            GetTxsEventResponse: {
                encode(message: _106.GetTxsEventResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.GetTxsEventResponse;
                fromJSON(object: any): _106.GetTxsEventResponse;
                toJSON(message: _106.GetTxsEventResponse): unknown;
                fromPartial<I_14 extends {
                    txs?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    }[];
                    txResponses?: {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    }[];
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    txs?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    }[] & ({
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    } & {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        } & {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_14["txs"][number]["body"]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_14["txs"][number]["body"]["messages"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_14["txs"][number]["body"]["extensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_14["txs"][number]["body"]["extensionOptions"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_14["txs"][number]["body"]["nonCriticalExtensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_14["txs"][number]["body"]["nonCriticalExtensionOptions"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_14["txs"][number]["body"], keyof _107.TxBody>, never>;
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        } & {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[] & ({
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            } & {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                } & {
                                    single?: {
                                        mode?: _105.SignMode;
                                    } & {
                                        mode?: _105.SignMode;
                                    } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["single"], "mode">, never>;
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    } & {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                        modeInfos?: any[] & ({
                                            single?: {
                                                mode?: _105.SignMode;
                                            };
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            };
                                        } & {
                                            single?: {
                                                mode?: _105.SignMode;
                                            } & {
                                                mode?: _105.SignMode;
                                            } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            } & {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                modeInfos?: any[] & ({
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    };
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    };
                                                } & {
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    } & {
                                                        mode?: _105.SignMode;
                                                    } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    } & {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                        modeInfos?: any[] & ({
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            };
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            };
                                                        } & {
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            } & any & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            } & any & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                        } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                    } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                            } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                        } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"], keyof any[]>, never>;
                                    } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"], keyof _107.ModeInfo>, never>;
                                sequence?: any;
                            } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"][number], keyof _107.SignerInfo>, never>)[] & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["signerInfos"], keyof {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[]>, never>;
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            } & {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["fee"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["fee"]["amount"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["fee"], keyof _107.Fee>, never>;
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            } & {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["tip"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["tip"]["amount"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                tipper?: string;
                            } & Record<Exclude<keyof I_14["txs"][number]["authInfo"]["tip"], keyof _107.Tip>, never>;
                        } & Record<Exclude<keyof I_14["txs"][number]["authInfo"], keyof _107.AuthInfo>, never>;
                        signatures?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_14["txs"][number]["signatures"], keyof Uint8Array[]>, never>;
                    } & Record<Exclude<keyof I_14["txs"][number], keyof _107.Tx>, never>)[] & Record<Exclude<keyof I_14["txs"], keyof {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    }[]>, never>;
                    txResponses?: {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    }[] & ({
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    } & {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[] & ({
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        } & {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[] & ({
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            } & {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[] & ({
                                    key?: string;
                                    value?: string;
                                } & {
                                    key?: string;
                                    value?: string;
                                } & Record<Exclude<keyof I_14["txResponses"][number]["logs"][number]["events"][number]["attributes"][number], keyof _37.Attribute>, never>)[] & Record<Exclude<keyof I_14["txResponses"][number]["logs"][number]["events"][number]["attributes"], keyof {
                                    key?: string;
                                    value?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I_14["txResponses"][number]["logs"][number]["events"][number], keyof _37.StringEvent>, never>)[] & Record<Exclude<keyof I_14["txResponses"][number]["logs"][number]["events"], keyof {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[]>, never>;
                        } & Record<Exclude<keyof I_14["txResponses"][number]["logs"][number], keyof _37.ABCIMessageLog>, never>)[] & Record<Exclude<keyof I_14["txResponses"][number]["logs"], keyof {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[]>, never>;
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_14["txResponses"][number]["tx"], keyof import("../google/protobuf/any").Any>, never>;
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[] & ({
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        } & {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[] & ({
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & Record<Exclude<keyof I_14["txResponses"][number]["events"][number]["attributes"][number], keyof import("../tendermint/abci/types").EventAttribute>, never>)[] & Record<Exclude<keyof I_14["txResponses"][number]["events"][number]["attributes"], keyof {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_14["txResponses"][number]["events"][number], keyof import("../tendermint/abci/types").Event>, never>)[] & Record<Exclude<keyof I_14["txResponses"][number]["events"], keyof {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[]>, never>;
                    } & Record<Exclude<keyof I_14["txResponses"][number], keyof _37.TxResponse>, never>)[] & Record<Exclude<keyof I_14["txResponses"], keyof {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    }[]>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_14["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_14, keyof _106.GetTxsEventResponse>, never>>(object: I_14): _106.GetTxsEventResponse;
            };
            BroadcastTxRequest: {
                encode(message: _106.BroadcastTxRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.BroadcastTxRequest;
                fromJSON(object: any): _106.BroadcastTxRequest;
                toJSON(message: _106.BroadcastTxRequest): unknown;
                fromPartial<I_15 extends {
                    txBytes?: Uint8Array;
                    mode?: _106.BroadcastMode;
                } & {
                    txBytes?: Uint8Array;
                    mode?: _106.BroadcastMode;
                } & Record<Exclude<keyof I_15, keyof _106.BroadcastTxRequest>, never>>(object: I_15): _106.BroadcastTxRequest;
            };
            BroadcastTxResponse: {
                encode(message: _106.BroadcastTxResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.BroadcastTxResponse;
                fromJSON(object: any): _106.BroadcastTxResponse;
                toJSON(message: _106.BroadcastTxResponse): unknown;
                fromPartial<I_16 extends {
                    txResponse?: {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    };
                } & {
                    txResponse?: {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    } & {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[] & ({
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        } & {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[] & ({
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            } & {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[] & ({
                                    key?: string;
                                    value?: string;
                                } & {
                                    key?: string;
                                    value?: string;
                                } & Record<Exclude<keyof I_16["txResponse"]["logs"][number]["events"][number]["attributes"][number], keyof _37.Attribute>, never>)[] & Record<Exclude<keyof I_16["txResponse"]["logs"][number]["events"][number]["attributes"], keyof {
                                    key?: string;
                                    value?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I_16["txResponse"]["logs"][number]["events"][number], keyof _37.StringEvent>, never>)[] & Record<Exclude<keyof I_16["txResponse"]["logs"][number]["events"], keyof {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[]>, never>;
                        } & Record<Exclude<keyof I_16["txResponse"]["logs"][number], keyof _37.ABCIMessageLog>, never>)[] & Record<Exclude<keyof I_16["txResponse"]["logs"], keyof {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[]>, never>;
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_16["txResponse"]["tx"], keyof import("../google/protobuf/any").Any>, never>;
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[] & ({
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        } & {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[] & ({
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & Record<Exclude<keyof I_16["txResponse"]["events"][number]["attributes"][number], keyof import("../tendermint/abci/types").EventAttribute>, never>)[] & Record<Exclude<keyof I_16["txResponse"]["events"][number]["attributes"], keyof {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_16["txResponse"]["events"][number], keyof import("../tendermint/abci/types").Event>, never>)[] & Record<Exclude<keyof I_16["txResponse"]["events"], keyof {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[]>, never>;
                    } & Record<Exclude<keyof I_16["txResponse"], keyof _37.TxResponse>, never>;
                } & Record<Exclude<keyof I_16, "txResponse">, never>>(object: I_16): _106.BroadcastTxResponse;
            };
            SimulateRequest: {
                encode(message: _106.SimulateRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.SimulateRequest;
                fromJSON(object: any): _106.SimulateRequest;
                toJSON(message: _106.SimulateRequest): unknown;
                fromPartial<I_17 extends {
                    tx?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    };
                    txBytes?: Uint8Array;
                } & {
                    tx?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    } & {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        } & {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_17["tx"]["body"]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_17["tx"]["body"]["messages"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_17["tx"]["body"]["extensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_17["tx"]["body"]["extensionOptions"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_17["tx"]["body"]["nonCriticalExtensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_17["tx"]["body"]["nonCriticalExtensionOptions"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_17["tx"]["body"], keyof _107.TxBody>, never>;
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        } & {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[] & ({
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            } & {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                } & {
                                    single?: {
                                        mode?: _105.SignMode;
                                    } & {
                                        mode?: _105.SignMode;
                                    } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["single"], "mode">, never>;
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    } & {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                        modeInfos?: any[] & ({
                                            single?: {
                                                mode?: _105.SignMode;
                                            };
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            };
                                        } & {
                                            single?: {
                                                mode?: _105.SignMode;
                                            } & {
                                                mode?: _105.SignMode;
                                            } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            } & {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                modeInfos?: any[] & ({
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    };
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    };
                                                } & {
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    } & {
                                                        mode?: _105.SignMode;
                                                    } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    } & {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                        modeInfos?: any[] & ({
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            };
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            };
                                                        } & {
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            } & any & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            } & any & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                        } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                    } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                            } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                        } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"], keyof any[]>, never>;
                                    } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number]["modeInfo"], keyof _107.ModeInfo>, never>;
                                sequence?: any;
                            } & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"][number], keyof _107.SignerInfo>, never>)[] & Record<Exclude<keyof I_17["tx"]["authInfo"]["signerInfos"], keyof {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[]>, never>;
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            } & {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I_17["tx"]["authInfo"]["fee"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_17["tx"]["authInfo"]["fee"]["amount"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            } & Record<Exclude<keyof I_17["tx"]["authInfo"]["fee"], keyof _107.Fee>, never>;
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            } & {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I_17["tx"]["authInfo"]["tip"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_17["tx"]["authInfo"]["tip"]["amount"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                tipper?: string;
                            } & Record<Exclude<keyof I_17["tx"]["authInfo"]["tip"], keyof _107.Tip>, never>;
                        } & Record<Exclude<keyof I_17["tx"]["authInfo"], keyof _107.AuthInfo>, never>;
                        signatures?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_17["tx"]["signatures"], keyof Uint8Array[]>, never>;
                    } & Record<Exclude<keyof I_17["tx"], keyof _107.Tx>, never>;
                    txBytes?: Uint8Array;
                } & Record<Exclude<keyof I_17, keyof _106.SimulateRequest>, never>>(object: I_17): _106.SimulateRequest;
            };
            SimulateResponse: {
                encode(message: _106.SimulateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.SimulateResponse;
                fromJSON(object: any): _106.SimulateResponse;
                toJSON(message: _106.SimulateResponse): unknown;
                fromPartial<I_18 extends {
                    gasInfo?: {
                        gasWanted?: any;
                        gasUsed?: any;
                    };
                    result?: {
                        data?: Uint8Array;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                        msgResponses?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    };
                } & {
                    gasInfo?: {
                        gasWanted?: any;
                        gasUsed?: any;
                    } & {
                        gasWanted?: any;
                        gasUsed?: any;
                    } & Record<Exclude<keyof I_18["gasInfo"], keyof _37.GasInfo>, never>;
                    result?: {
                        data?: Uint8Array;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                        msgResponses?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[];
                    } & {
                        data?: Uint8Array;
                        log?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[] & ({
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        } & {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[] & ({
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & Record<Exclude<keyof I_18["result"]["events"][number]["attributes"][number], keyof import("../tendermint/abci/types").EventAttribute>, never>)[] & Record<Exclude<keyof I_18["result"]["events"][number]["attributes"], keyof {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_18["result"]["events"][number], keyof import("../tendermint/abci/types").Event>, never>)[] & Record<Exclude<keyof I_18["result"]["events"], keyof {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[]>, never>;
                        msgResponses?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[] & ({
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_18["result"]["msgResponses"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_18["result"]["msgResponses"], keyof {
                            typeUrl?: string;
                            value?: Uint8Array;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_18["result"], keyof _37.Result>, never>;
                } & Record<Exclude<keyof I_18, keyof _106.SimulateResponse>, never>>(object: I_18): _106.SimulateResponse;
            };
            GetTxRequest: {
                encode(message: _106.GetTxRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.GetTxRequest;
                fromJSON(object: any): _106.GetTxRequest;
                toJSON(message: _106.GetTxRequest): unknown;
                fromPartial<I_19 extends {
                    hash?: string;
                } & {
                    hash?: string;
                } & Record<Exclude<keyof I_19, "hash">, never>>(object: I_19): _106.GetTxRequest;
            };
            GetTxResponse: {
                encode(message: _106.GetTxResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.GetTxResponse;
                fromJSON(object: any): _106.GetTxResponse;
                toJSON(message: _106.GetTxResponse): unknown;
                fromPartial<I_20 extends {
                    tx?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    };
                    txResponse?: {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    };
                } & {
                    tx?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    } & {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        } & {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_20["tx"]["body"]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_20["tx"]["body"]["messages"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_20["tx"]["body"]["extensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_20["tx"]["body"]["extensionOptions"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_20["tx"]["body"]["nonCriticalExtensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_20["tx"]["body"]["nonCriticalExtensionOptions"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_20["tx"]["body"], keyof _107.TxBody>, never>;
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        } & {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[] & ({
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            } & {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                } & {
                                    single?: {
                                        mode?: _105.SignMode;
                                    } & {
                                        mode?: _105.SignMode;
                                    } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["single"], "mode">, never>;
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    } & {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                        modeInfos?: any[] & ({
                                            single?: {
                                                mode?: _105.SignMode;
                                            };
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            };
                                        } & {
                                            single?: {
                                                mode?: _105.SignMode;
                                            } & {
                                                mode?: _105.SignMode;
                                            } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            } & {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                modeInfos?: any[] & ({
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    };
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    };
                                                } & {
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    } & {
                                                        mode?: _105.SignMode;
                                                    } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    } & {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                        modeInfos?: any[] & ({
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            };
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            };
                                                        } & {
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            } & any & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            } & any & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                        } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                    } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                            } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                        } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"], keyof any[]>, never>;
                                    } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number]["modeInfo"], keyof _107.ModeInfo>, never>;
                                sequence?: any;
                            } & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"][number], keyof _107.SignerInfo>, never>)[] & Record<Exclude<keyof I_20["tx"]["authInfo"]["signerInfos"], keyof {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[]>, never>;
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            } & {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I_20["tx"]["authInfo"]["fee"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_20["tx"]["authInfo"]["fee"]["amount"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            } & Record<Exclude<keyof I_20["tx"]["authInfo"]["fee"], keyof _107.Fee>, never>;
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            } & {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I_20["tx"]["authInfo"]["tip"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_20["tx"]["authInfo"]["tip"]["amount"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                tipper?: string;
                            } & Record<Exclude<keyof I_20["tx"]["authInfo"]["tip"], keyof _107.Tip>, never>;
                        } & Record<Exclude<keyof I_20["tx"]["authInfo"], keyof _107.AuthInfo>, never>;
                        signatures?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_20["tx"]["signatures"], keyof Uint8Array[]>, never>;
                    } & Record<Exclude<keyof I_20["tx"], keyof _107.Tx>, never>;
                    txResponse?: {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[];
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[];
                    } & {
                        height?: any;
                        txhash?: string;
                        codespace?: string;
                        code?: number;
                        data?: string;
                        rawLog?: string;
                        logs?: {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[] & ({
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        } & {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[] & ({
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            } & {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[] & ({
                                    key?: string;
                                    value?: string;
                                } & {
                                    key?: string;
                                    value?: string;
                                } & Record<Exclude<keyof I_20["txResponse"]["logs"][number]["events"][number]["attributes"][number], keyof _37.Attribute>, never>)[] & Record<Exclude<keyof I_20["txResponse"]["logs"][number]["events"][number]["attributes"], keyof {
                                    key?: string;
                                    value?: string;
                                }[]>, never>;
                            } & Record<Exclude<keyof I_20["txResponse"]["logs"][number]["events"][number], keyof _37.StringEvent>, never>)[] & Record<Exclude<keyof I_20["txResponse"]["logs"][number]["events"], keyof {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[]>, never>;
                        } & Record<Exclude<keyof I_20["txResponse"]["logs"][number], keyof _37.ABCIMessageLog>, never>)[] & Record<Exclude<keyof I_20["txResponse"]["logs"], keyof {
                            msgIndex?: number;
                            log?: string;
                            events?: {
                                type?: string;
                                attributes?: {
                                    key?: string;
                                    value?: string;
                                }[];
                            }[];
                        }[]>, never>;
                        info?: string;
                        gasWanted?: any;
                        gasUsed?: any;
                        tx?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_20["txResponse"]["tx"], keyof import("../google/protobuf/any").Any>, never>;
                        timestamp?: string;
                        events?: {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[] & ({
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        } & {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[] & ({
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            } & Record<Exclude<keyof I_20["txResponse"]["events"][number]["attributes"][number], keyof import("../tendermint/abci/types").EventAttribute>, never>)[] & Record<Exclude<keyof I_20["txResponse"]["events"][number]["attributes"], keyof {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_20["txResponse"]["events"][number], keyof import("../tendermint/abci/types").Event>, never>)[] & Record<Exclude<keyof I_20["txResponse"]["events"], keyof {
                            type?: string;
                            attributes?: {
                                key?: Uint8Array;
                                value?: Uint8Array;
                                index?: boolean;
                            }[];
                        }[]>, never>;
                    } & Record<Exclude<keyof I_20["txResponse"], keyof _37.TxResponse>, never>;
                } & Record<Exclude<keyof I_20, keyof _106.GetTxResponse>, never>>(object: I_20): _106.GetTxResponse;
            };
            GetBlockWithTxsRequest: {
                encode(message: _106.GetBlockWithTxsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.GetBlockWithTxsRequest;
                fromJSON(object: any): _106.GetBlockWithTxsRequest;
                toJSON(message: _106.GetBlockWithTxsRequest): unknown;
                fromPartial<I_21 extends {
                    height?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    };
                } & {
                    height?: any;
                    pagination?: {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & {
                        key?: Uint8Array;
                        offset?: any;
                        limit?: any;
                        countTotal?: boolean;
                        reverse?: boolean;
                    } & Record<Exclude<keyof I_21["pagination"], keyof _39.PageRequest>, never>;
                } & Record<Exclude<keyof I_21, keyof _106.GetBlockWithTxsRequest>, never>>(object: I_21): _106.GetBlockWithTxsRequest;
            };
            GetBlockWithTxsResponse: {
                encode(message: _106.GetBlockWithTxsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _106.GetBlockWithTxsResponse;
                fromJSON(object: any): _106.GetBlockWithTxsResponse;
                toJSON(message: _106.GetBlockWithTxsResponse): unknown;
                fromPartial<I_22 extends {
                    txs?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    }[];
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    };
                    block?: {
                        header?: {
                            version?: {
                                block?: any;
                                app?: any;
                            };
                            chainId?: string;
                            height?: any;
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        };
                        data?: {
                            txs?: Uint8Array[];
                        };
                        evidence?: {
                            evidence?: {
                                duplicateVoteEvidence?: {
                                    voteA?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    voteB?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    totalVotingPower?: any;
                                    validatorPower?: any;
                                    timestamp?: Date;
                                };
                                lightClientAttackEvidence?: {
                                    conflictingBlock?: {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                };
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        };
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            };
                                            totalVotingPower?: any;
                                        };
                                    };
                                    commonHeight?: any;
                                    byzantineValidators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    }[];
                                    totalVotingPower?: any;
                                    timestamp?: Date;
                                };
                            }[];
                        };
                        lastCommit?: {
                            height?: any;
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            signatures?: {
                                blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            }[];
                        };
                    };
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    };
                } & {
                    txs?: {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    }[] & ({
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    } & {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        } & {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_22["txs"][number]["body"]["messages"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_22["txs"][number]["body"]["messages"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_22["txs"][number]["body"]["extensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_22["txs"][number]["body"]["extensionOptions"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[] & ({
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_22["txs"][number]["body"]["nonCriticalExtensionOptions"][number], keyof import("../google/protobuf/any").Any>, never>)[] & Record<Exclude<keyof I_22["txs"][number]["body"]["nonCriticalExtensionOptions"], keyof {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_22["txs"][number]["body"], keyof _107.TxBody>, never>;
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        } & {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[] & ({
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            } & {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["publicKey"], keyof import("../google/protobuf/any").Any>, never>;
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                } & {
                                    single?: {
                                        mode?: _105.SignMode;
                                    } & {
                                        mode?: _105.SignMode;
                                    } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["single"], "mode">, never>;
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    } & {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                        modeInfos?: any[] & ({
                                            single?: {
                                                mode?: _105.SignMode;
                                            };
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            };
                                        } & {
                                            single?: {
                                                mode?: _105.SignMode;
                                            } & {
                                                mode?: _105.SignMode;
                                            } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                            multi?: {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                };
                                                modeInfos?: any[];
                                            } & {
                                                bitarray?: {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & {
                                                    extraBitsStored?: number;
                                                    elems?: Uint8Array;
                                                } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                modeInfos?: any[] & ({
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    };
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    };
                                                } & {
                                                    single?: {
                                                        mode?: _105.SignMode;
                                                    } & {
                                                        mode?: _105.SignMode;
                                                    } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                    multi?: {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        };
                                                        modeInfos?: any[];
                                                    } & {
                                                        bitarray?: {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & {
                                                            extraBitsStored?: number;
                                                            elems?: Uint8Array;
                                                        } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["bitarray"], keyof import("./crypto/multisig/v1beta1/multisig").CompactBitArray>, never>;
                                                        modeInfos?: any[] & ({
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            };
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            };
                                                        } & {
                                                            single?: {
                                                                mode?: _105.SignMode;
                                                            } & any & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["single"], "mode">, never>;
                                                            multi?: {
                                                                bitarray?: {
                                                                    extraBitsStored?: number;
                                                                    elems?: Uint8Array;
                                                                };
                                                                modeInfos?: any[];
                                                            } & any & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                        } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                                    } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                                } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"]["modeInfos"], keyof any[]>, never>;
                                            } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                        } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"][number], keyof _107.ModeInfo>, never>)[] & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"]["modeInfos"], keyof any[]>, never>;
                                    } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"]["multi"], keyof _107.ModeInfo_Multi>, never>;
                                } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number]["modeInfo"], keyof _107.ModeInfo>, never>;
                                sequence?: any;
                            } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"][number], keyof _107.SignerInfo>, never>)[] & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["signerInfos"], keyof {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[]>, never>;
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            } & {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["fee"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["fee"]["amount"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["fee"], keyof _107.Fee>, never>;
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            } & {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[] & ({
                                    denom?: string;
                                    amount?: string;
                                } & {
                                    denom?: string;
                                    amount?: string;
                                } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["tip"]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["tip"]["amount"], keyof {
                                    denom?: string;
                                    amount?: string;
                                }[]>, never>;
                                tipper?: string;
                            } & Record<Exclude<keyof I_22["txs"][number]["authInfo"]["tip"], keyof _107.Tip>, never>;
                        } & Record<Exclude<keyof I_22["txs"][number]["authInfo"], keyof _107.AuthInfo>, never>;
                        signatures?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_22["txs"][number]["signatures"], keyof Uint8Array[]>, never>;
                    } & Record<Exclude<keyof I_22["txs"][number], keyof _107.Tx>, never>)[] & Record<Exclude<keyof I_22["txs"], keyof {
                        body?: {
                            messages?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            memo?: string;
                            timeoutHeight?: any;
                            extensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                            nonCriticalExtensionOptions?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            }[];
                        };
                        authInfo?: {
                            signerInfos?: {
                                publicKey?: {
                                    typeUrl?: string;
                                    value?: Uint8Array;
                                };
                                modeInfo?: {
                                    single?: {
                                        mode?: _105.SignMode;
                                    };
                                    multi?: {
                                        bitarray?: {
                                            extraBitsStored?: number;
                                            elems?: Uint8Array;
                                        };
                                        modeInfos?: any[];
                                    };
                                };
                                sequence?: any;
                            }[];
                            fee?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                gasLimit?: any;
                                payer?: string;
                                granter?: string;
                            };
                            tip?: {
                                amount?: {
                                    denom?: string;
                                    amount?: string;
                                }[];
                                tipper?: string;
                            };
                        };
                        signatures?: Uint8Array[];
                    }[]>, never>;
                    blockId?: {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        };
                    } & {
                        hash?: Uint8Array;
                        partSetHeader?: {
                            total?: number;
                            hash?: Uint8Array;
                        } & {
                            total?: number;
                            hash?: Uint8Array;
                        } & Record<Exclude<keyof I_22["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                    } & Record<Exclude<keyof I_22["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                    block?: {
                        header?: {
                            version?: {
                                block?: any;
                                app?: any;
                            };
                            chainId?: string;
                            height?: any;
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        };
                        data?: {
                            txs?: Uint8Array[];
                        };
                        evidence?: {
                            evidence?: {
                                duplicateVoteEvidence?: {
                                    voteA?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    voteB?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    totalVotingPower?: any;
                                    validatorPower?: any;
                                    timestamp?: Date;
                                };
                                lightClientAttackEvidence?: {
                                    conflictingBlock?: {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                };
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        };
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            };
                                            totalVotingPower?: any;
                                        };
                                    };
                                    commonHeight?: any;
                                    byzantineValidators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    }[];
                                    totalVotingPower?: any;
                                    timestamp?: Date;
                                };
                            }[];
                        };
                        lastCommit?: {
                            height?: any;
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            signatures?: {
                                blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            }[];
                        };
                    } & {
                        header?: {
                            version?: {
                                block?: any;
                                app?: any;
                            };
                            chainId?: string;
                            height?: any;
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        } & {
                            version?: {
                                block?: any;
                                app?: any;
                            } & {
                                block?: any;
                                app?: any;
                            } & Record<Exclude<keyof I_22["block"]["header"]["version"], keyof import("../tendermint/version/types").Consensus>, never>;
                            chainId?: string;
                            height?: any;
                            time?: Date;
                            lastBlockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            } & {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                } & {
                                    total?: number;
                                    hash?: Uint8Array;
                                } & Record<Exclude<keyof I_22["block"]["header"]["lastBlockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                            } & Record<Exclude<keyof I_22["block"]["header"]["lastBlockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                            lastCommitHash?: Uint8Array;
                            dataHash?: Uint8Array;
                            validatorsHash?: Uint8Array;
                            nextValidatorsHash?: Uint8Array;
                            consensusHash?: Uint8Array;
                            appHash?: Uint8Array;
                            lastResultsHash?: Uint8Array;
                            evidenceHash?: Uint8Array;
                            proposerAddress?: Uint8Array;
                        } & Record<Exclude<keyof I_22["block"]["header"], keyof import("../tendermint/types/types").Header>, never>;
                        data?: {
                            txs?: Uint8Array[];
                        } & {
                            txs?: Uint8Array[] & Uint8Array[] & Record<Exclude<keyof I_22["block"]["data"]["txs"], keyof Uint8Array[]>, never>;
                        } & Record<Exclude<keyof I_22["block"]["data"], "txs">, never>;
                        evidence?: {
                            evidence?: {
                                duplicateVoteEvidence?: {
                                    voteA?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    voteB?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    totalVotingPower?: any;
                                    validatorPower?: any;
                                    timestamp?: Date;
                                };
                                lightClientAttackEvidence?: {
                                    conflictingBlock?: {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                };
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        };
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            };
                                            totalVotingPower?: any;
                                        };
                                    };
                                    commonHeight?: any;
                                    byzantineValidators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    }[];
                                    totalVotingPower?: any;
                                    timestamp?: Date;
                                };
                            }[];
                        } & {
                            evidence?: {
                                duplicateVoteEvidence?: {
                                    voteA?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    voteB?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    totalVotingPower?: any;
                                    validatorPower?: any;
                                    timestamp?: Date;
                                };
                                lightClientAttackEvidence?: {
                                    conflictingBlock?: {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                };
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        };
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            };
                                            totalVotingPower?: any;
                                        };
                                    };
                                    commonHeight?: any;
                                    byzantineValidators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    }[];
                                    totalVotingPower?: any;
                                    timestamp?: Date;
                                };
                            }[] & ({
                                duplicateVoteEvidence?: {
                                    voteA?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    voteB?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    totalVotingPower?: any;
                                    validatorPower?: any;
                                    timestamp?: Date;
                                };
                                lightClientAttackEvidence?: {
                                    conflictingBlock?: {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                };
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        };
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            };
                                            totalVotingPower?: any;
                                        };
                                    };
                                    commonHeight?: any;
                                    byzantineValidators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    }[];
                                    totalVotingPower?: any;
                                    timestamp?: Date;
                                };
                            } & {
                                duplicateVoteEvidence?: {
                                    voteA?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    voteB?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    totalVotingPower?: any;
                                    validatorPower?: any;
                                    timestamp?: Date;
                                } & {
                                    voteA?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    } & {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        } & {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            } & {
                                                total?: number;
                                                hash?: Uint8Array;
                                            } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteA"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                        } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteA"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteA"], keyof import("../tendermint/types/types").Vote>, never>;
                                    voteB?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    } & {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        } & {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            } & {
                                                total?: number;
                                                hash?: Uint8Array;
                                            } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteB"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                        } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteB"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"]["voteB"], keyof import("../tendermint/types/types").Vote>, never>;
                                    totalVotingPower?: any;
                                    validatorPower?: any;
                                    timestamp?: Date;
                                } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["duplicateVoteEvidence"], keyof import("../tendermint/types/evidence").DuplicateVoteEvidence>, never>;
                                lightClientAttackEvidence?: {
                                    conflictingBlock?: {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                };
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        };
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            };
                                            totalVotingPower?: any;
                                        };
                                    };
                                    commonHeight?: any;
                                    byzantineValidators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    }[];
                                    totalVotingPower?: any;
                                    timestamp?: Date;
                                } & {
                                    conflictingBlock?: {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                };
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        };
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            };
                                            totalVotingPower?: any;
                                        };
                                    } & {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                };
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        } & {
                                            header?: {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                };
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            } & {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                } & {
                                                    block?: any;
                                                    app?: any;
                                                } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"]["version"], keyof import("../tendermint/version/types").Consensus>, never>;
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                } & {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    } & {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"]["lastBlockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                                } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"]["lastBlockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["header"], keyof import("../tendermint/types/types").Header>, never>;
                                            commit?: {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            } & {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                } & {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    } & {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                                                } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[] & ({
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                } & {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["signatures"][number], keyof import("../tendermint/types/types").CommitSig>, never>)[] & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"]["signatures"], keyof {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[]>, never>;
                                            } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"]["commit"], keyof import("../tendermint/types/types").Commit>, never>;
                                        } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["signedHeader"], keyof import("../tendermint/types/types").SignedHeader>, never>;
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            };
                                            totalVotingPower?: any;
                                        } & {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[] & ({
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            } & {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                } & {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["validators"][number]["pubKey"], keyof import("../tendermint/crypto/keys").PublicKey>, never>;
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["validators"][number], keyof import("../tendermint/types/validator").Validator>, never>)[] & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["validators"], keyof {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[]>, never>;
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            } & {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                } & {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["proposer"]["pubKey"], keyof import("../tendermint/crypto/keys").PublicKey>, never>;
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"]["proposer"], keyof import("../tendermint/types/validator").Validator>, never>;
                                            totalVotingPower?: any;
                                        } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"]["validatorSet"], keyof import("../tendermint/types/validator").ValidatorSet>, never>;
                                    } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["conflictingBlock"], keyof import("../tendermint/types/types").LightBlock>, never>;
                                    commonHeight?: any;
                                    byzantineValidators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    }[] & ({
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    } & {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        } & {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["byzantineValidators"][number]["pubKey"], keyof import("../tendermint/crypto/keys").PublicKey>, never>;
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["byzantineValidators"][number], keyof import("../tendermint/types/validator").Validator>, never>)[] & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"]["byzantineValidators"], keyof {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    }[]>, never>;
                                    totalVotingPower?: any;
                                    timestamp?: Date;
                                } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number]["lightClientAttackEvidence"], keyof import("../tendermint/types/evidence").LightClientAttackEvidence>, never>;
                            } & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"][number], keyof import("../tendermint/types/evidence").Evidence>, never>)[] & Record<Exclude<keyof I_22["block"]["evidence"]["evidence"], keyof {
                                duplicateVoteEvidence?: {
                                    voteA?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    voteB?: {
                                        type?: import("../tendermint/types/types").SignedMsgType;
                                        height?: any;
                                        round?: number;
                                        blockId?: {
                                            hash?: Uint8Array;
                                            partSetHeader?: {
                                                total?: number;
                                                hash?: Uint8Array;
                                            };
                                        };
                                        timestamp?: Date;
                                        validatorAddress?: Uint8Array;
                                        validatorIndex?: number;
                                        signature?: Uint8Array;
                                    };
                                    totalVotingPower?: any;
                                    validatorPower?: any;
                                    timestamp?: Date;
                                };
                                lightClientAttackEvidence?: {
                                    conflictingBlock?: {
                                        signedHeader?: {
                                            header?: {
                                                version?: {
                                                    block?: any;
                                                    app?: any;
                                                };
                                                chainId?: string;
                                                height?: any;
                                                time?: Date;
                                                lastBlockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                lastCommitHash?: Uint8Array;
                                                dataHash?: Uint8Array;
                                                validatorsHash?: Uint8Array;
                                                nextValidatorsHash?: Uint8Array;
                                                consensusHash?: Uint8Array;
                                                appHash?: Uint8Array;
                                                lastResultsHash?: Uint8Array;
                                                evidenceHash?: Uint8Array;
                                                proposerAddress?: Uint8Array;
                                            };
                                            commit?: {
                                                height?: any;
                                                round?: number;
                                                blockId?: {
                                                    hash?: Uint8Array;
                                                    partSetHeader?: {
                                                        total?: number;
                                                        hash?: Uint8Array;
                                                    };
                                                };
                                                signatures?: {
                                                    blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                                    validatorAddress?: Uint8Array;
                                                    timestamp?: Date;
                                                    signature?: Uint8Array;
                                                }[];
                                            };
                                        };
                                        validatorSet?: {
                                            validators?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            }[];
                                            proposer?: {
                                                address?: Uint8Array;
                                                pubKey?: {
                                                    ed25519?: Uint8Array;
                                                    secp256k1?: Uint8Array;
                                                };
                                                votingPower?: any;
                                                proposerPriority?: any;
                                            };
                                            totalVotingPower?: any;
                                        };
                                    };
                                    commonHeight?: any;
                                    byzantineValidators?: {
                                        address?: Uint8Array;
                                        pubKey?: {
                                            ed25519?: Uint8Array;
                                            secp256k1?: Uint8Array;
                                        };
                                        votingPower?: any;
                                        proposerPriority?: any;
                                    }[];
                                    totalVotingPower?: any;
                                    timestamp?: Date;
                                };
                            }[]>, never>;
                        } & Record<Exclude<keyof I_22["block"]["evidence"], "evidence">, never>;
                        lastCommit?: {
                            height?: any;
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            };
                            signatures?: {
                                blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            }[];
                        } & {
                            height?: any;
                            round?: number;
                            blockId?: {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                };
                            } & {
                                hash?: Uint8Array;
                                partSetHeader?: {
                                    total?: number;
                                    hash?: Uint8Array;
                                } & {
                                    total?: number;
                                    hash?: Uint8Array;
                                } & Record<Exclude<keyof I_22["block"]["lastCommit"]["blockId"]["partSetHeader"], keyof import("../tendermint/types/types").PartSetHeader>, never>;
                            } & Record<Exclude<keyof I_22["block"]["lastCommit"]["blockId"], keyof import("../tendermint/types/types").BlockID>, never>;
                            signatures?: {
                                blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            }[] & ({
                                blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            } & {
                                blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            } & Record<Exclude<keyof I_22["block"]["lastCommit"]["signatures"][number], keyof import("../tendermint/types/types").CommitSig>, never>)[] & Record<Exclude<keyof I_22["block"]["lastCommit"]["signatures"], keyof {
                                blockIdFlag?: import("../tendermint/types/types").BlockIDFlag;
                                validatorAddress?: Uint8Array;
                                timestamp?: Date;
                                signature?: Uint8Array;
                            }[]>, never>;
                        } & Record<Exclude<keyof I_22["block"]["lastCommit"], keyof import("../tendermint/types/types").Commit>, never>;
                    } & Record<Exclude<keyof I_22["block"], keyof import("../tendermint/types/block").Block>, never>;
                    pagination?: {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & {
                        nextKey?: Uint8Array;
                        total?: any;
                    } & Record<Exclude<keyof I_22["pagination"], keyof _39.PageResponse>, never>;
                } & Record<Exclude<keyof I_22, keyof _106.GetBlockWithTxsResponse>, never>>(object: I_22): _106.GetBlockWithTxsResponse;
            };
        };
    }
    namespace upgrade {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    softwareUpgrade(value: _109.MsgSoftwareUpgrade): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    cancelUpgrade(value: _109.MsgCancelUpgrade): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    softwareUpgrade(value: _109.MsgSoftwareUpgrade): {
                        typeUrl: string;
                        value: _109.MsgSoftwareUpgrade;
                    };
                    cancelUpgrade(value: _109.MsgCancelUpgrade): {
                        typeUrl: string;
                        value: _109.MsgCancelUpgrade;
                    };
                };
                toJSON: {
                    softwareUpgrade(value: _109.MsgSoftwareUpgrade): {
                        typeUrl: string;
                        value: unknown;
                    };
                    cancelUpgrade(value: _109.MsgCancelUpgrade): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    softwareUpgrade(value: any): {
                        typeUrl: string;
                        value: _109.MsgSoftwareUpgrade;
                    };
                    cancelUpgrade(value: any): {
                        typeUrl: string;
                        value: _109.MsgCancelUpgrade;
                    };
                };
                fromPartial: {
                    softwareUpgrade(value: _109.MsgSoftwareUpgrade): {
                        typeUrl: string;
                        value: _109.MsgSoftwareUpgrade;
                    };
                    cancelUpgrade(value: _109.MsgCancelUpgrade): {
                        typeUrl: string;
                        value: _109.MsgCancelUpgrade;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.upgrade.v1beta1.MsgSoftwareUpgrade": {
                    aminoType: string;
                    toAmino: ({ authority, plan }: _109.MsgSoftwareUpgrade) => {
                        authority: string;
                        plan: {
                            name: string;
                            time: {
                                seconds: string;
                                nanos: number;
                            };
                            height: string;
                            info: string;
                            upgraded_client_state: {
                                type_url: string;
                                value: Uint8Array;
                            };
                        };
                    };
                    fromAmino: ({ authority, plan }: {
                        authority: string;
                        plan: {
                            name: string;
                            time: {
                                seconds: string;
                                nanos: number;
                            };
                            height: string;
                            info: string;
                            upgraded_client_state: {
                                type_url: string;
                                value: Uint8Array;
                            };
                        };
                    }) => _109.MsgSoftwareUpgrade;
                };
                "/cosmos.upgrade.v1beta1.MsgCancelUpgrade": {
                    aminoType: string;
                    toAmino: ({ authority }: _109.MsgCancelUpgrade) => {
                        authority: string;
                    };
                    fromAmino: ({ authority }: {
                        authority: string;
                    }) => _109.MsgCancelUpgrade;
                };
            };
            Plan: {
                encode(message: _110.Plan, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _110.Plan;
                fromJSON(object: any): _110.Plan;
                toJSON(message: _110.Plan): unknown;
                fromPartial<I extends {
                    name?: string;
                    time?: Date;
                    height?: any;
                    info?: string;
                    upgradedClientState?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    };
                } & {
                    name?: string;
                    time?: Date;
                    height?: any;
                    info?: string;
                    upgradedClientState?: {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & {
                        typeUrl?: string;
                        value?: Uint8Array;
                    } & Record<Exclude<keyof I["upgradedClientState"], keyof import("../google/protobuf/any").Any>, never>;
                } & Record<Exclude<keyof I, keyof _110.Plan>, never>>(object: I): _110.Plan;
            };
            SoftwareUpgradeProposal: {
                encode(message: _110.SoftwareUpgradeProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _110.SoftwareUpgradeProposal;
                fromJSON(object: any): _110.SoftwareUpgradeProposal;
                toJSON(message: _110.SoftwareUpgradeProposal): unknown;
                fromPartial<I_1 extends {
                    title?: string;
                    description?: string;
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: any;
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                } & {
                    title?: string;
                    description?: string;
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: any;
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        name?: string;
                        time?: Date;
                        height?: any;
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_1["plan"]["upgradedClientState"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_1["plan"], keyof _110.Plan>, never>;
                } & Record<Exclude<keyof I_1, keyof _110.SoftwareUpgradeProposal>, never>>(object: I_1): _110.SoftwareUpgradeProposal;
            };
            CancelSoftwareUpgradeProposal: {
                encode(message: _110.CancelSoftwareUpgradeProposal, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _110.CancelSoftwareUpgradeProposal;
                fromJSON(object: any): _110.CancelSoftwareUpgradeProposal;
                toJSON(message: _110.CancelSoftwareUpgradeProposal): unknown;
                fromPartial<I_2 extends {
                    title?: string;
                    description?: string;
                } & {
                    title?: string;
                    description?: string;
                } & Record<Exclude<keyof I_2, keyof _110.CancelSoftwareUpgradeProposal>, never>>(object: I_2): _110.CancelSoftwareUpgradeProposal;
            };
            ModuleVersion: {
                encode(message: _110.ModuleVersion, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _110.ModuleVersion;
                fromJSON(object: any): _110.ModuleVersion;
                toJSON(message: _110.ModuleVersion): unknown;
                fromPartial<I_3 extends {
                    name?: string;
                    version?: any;
                } & {
                    name?: string;
                    version?: any;
                } & Record<Exclude<keyof I_3, keyof _110.ModuleVersion>, never>>(object: I_3): _110.ModuleVersion;
            };
            MsgSoftwareUpgrade: {
                encode(message: _109.MsgSoftwareUpgrade, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _109.MsgSoftwareUpgrade;
                fromJSON(object: any): _109.MsgSoftwareUpgrade;
                toJSON(message: _109.MsgSoftwareUpgrade): unknown;
                fromPartial<I_4 extends {
                    authority?: string;
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: any;
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                } & {
                    authority?: string;
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: any;
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        name?: string;
                        time?: Date;
                        height?: any;
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_4["plan"]["upgradedClientState"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_4["plan"], keyof _110.Plan>, never>;
                } & Record<Exclude<keyof I_4, keyof _109.MsgSoftwareUpgrade>, never>>(object: I_4): _109.MsgSoftwareUpgrade;
            };
            MsgSoftwareUpgradeResponse: {
                encode(_: _109.MsgSoftwareUpgradeResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _109.MsgSoftwareUpgradeResponse;
                fromJSON(_: any): _109.MsgSoftwareUpgradeResponse;
                toJSON(_: _109.MsgSoftwareUpgradeResponse): unknown;
                fromPartial<I_5 extends {} & {} & Record<Exclude<keyof I_5, never>, never>>(_: I_5): _109.MsgSoftwareUpgradeResponse;
            };
            MsgCancelUpgrade: {
                encode(message: _109.MsgCancelUpgrade, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _109.MsgCancelUpgrade;
                fromJSON(object: any): _109.MsgCancelUpgrade;
                toJSON(message: _109.MsgCancelUpgrade): unknown;
                fromPartial<I_6 extends {
                    authority?: string;
                } & {
                    authority?: string;
                } & Record<Exclude<keyof I_6, "authority">, never>>(object: I_6): _109.MsgCancelUpgrade;
            };
            MsgCancelUpgradeResponse: {
                encode(_: _109.MsgCancelUpgradeResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _109.MsgCancelUpgradeResponse;
                fromJSON(_: any): _109.MsgCancelUpgradeResponse;
                toJSON(_: _109.MsgCancelUpgradeResponse): unknown;
                fromPartial<I_7 extends {} & {} & Record<Exclude<keyof I_7, never>, never>>(_: I_7): _109.MsgCancelUpgradeResponse;
            };
            QueryCurrentPlanRequest: {
                encode(_: _108.QueryCurrentPlanRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.QueryCurrentPlanRequest;
                fromJSON(_: any): _108.QueryCurrentPlanRequest;
                toJSON(_: _108.QueryCurrentPlanRequest): unknown;
                fromPartial<I_8 extends {} & {} & Record<Exclude<keyof I_8, never>, never>>(_: I_8): _108.QueryCurrentPlanRequest;
            };
            QueryCurrentPlanResponse: {
                encode(message: _108.QueryCurrentPlanResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.QueryCurrentPlanResponse;
                fromJSON(object: any): _108.QueryCurrentPlanResponse;
                toJSON(message: _108.QueryCurrentPlanResponse): unknown;
                fromPartial<I_9 extends {
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: any;
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    };
                } & {
                    plan?: {
                        name?: string;
                        time?: Date;
                        height?: any;
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                    } & {
                        name?: string;
                        time?: Date;
                        height?: any;
                        info?: string;
                        upgradedClientState?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I_9["plan"]["upgradedClientState"], keyof import("../google/protobuf/any").Any>, never>;
                    } & Record<Exclude<keyof I_9["plan"], keyof _110.Plan>, never>;
                } & Record<Exclude<keyof I_9, "plan">, never>>(object: I_9): _108.QueryCurrentPlanResponse;
            };
            QueryAppliedPlanRequest: {
                encode(message: _108.QueryAppliedPlanRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.QueryAppliedPlanRequest;
                fromJSON(object: any): _108.QueryAppliedPlanRequest;
                toJSON(message: _108.QueryAppliedPlanRequest): unknown;
                fromPartial<I_10 extends {
                    name?: string;
                } & {
                    name?: string;
                } & Record<Exclude<keyof I_10, "name">, never>>(object: I_10): _108.QueryAppliedPlanRequest;
            };
            QueryAppliedPlanResponse: {
                encode(message: _108.QueryAppliedPlanResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.QueryAppliedPlanResponse;
                fromJSON(object: any): _108.QueryAppliedPlanResponse;
                toJSON(message: _108.QueryAppliedPlanResponse): unknown;
                fromPartial<I_11 extends {
                    height?: any;
                } & {
                    height?: any;
                } & Record<Exclude<keyof I_11, "height">, never>>(object: I_11): _108.QueryAppliedPlanResponse;
            };
            QueryUpgradedConsensusStateRequest: {
                encode(message: _108.QueryUpgradedConsensusStateRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.QueryUpgradedConsensusStateRequest;
                fromJSON(object: any): _108.QueryUpgradedConsensusStateRequest;
                toJSON(message: _108.QueryUpgradedConsensusStateRequest): unknown;
                fromPartial<I_12 extends {
                    lastHeight?: any;
                } & {
                    lastHeight?: any;
                } & Record<Exclude<keyof I_12, "lastHeight">, never>>(object: I_12): _108.QueryUpgradedConsensusStateRequest;
            };
            QueryUpgradedConsensusStateResponse: {
                encode(message: _108.QueryUpgradedConsensusStateResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.QueryUpgradedConsensusStateResponse;
                fromJSON(object: any): _108.QueryUpgradedConsensusStateResponse;
                toJSON(message: _108.QueryUpgradedConsensusStateResponse): unknown;
                fromPartial<I_13 extends {
                    upgradedConsensusState?: Uint8Array;
                } & {
                    upgradedConsensusState?: Uint8Array;
                } & Record<Exclude<keyof I_13, "upgradedConsensusState">, never>>(object: I_13): _108.QueryUpgradedConsensusStateResponse;
            };
            QueryModuleVersionsRequest: {
                encode(message: _108.QueryModuleVersionsRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.QueryModuleVersionsRequest;
                fromJSON(object: any): _108.QueryModuleVersionsRequest;
                toJSON(message: _108.QueryModuleVersionsRequest): unknown;
                fromPartial<I_14 extends {
                    moduleName?: string;
                } & {
                    moduleName?: string;
                } & Record<Exclude<keyof I_14, "moduleName">, never>>(object: I_14): _108.QueryModuleVersionsRequest;
            };
            QueryModuleVersionsResponse: {
                encode(message: _108.QueryModuleVersionsResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.QueryModuleVersionsResponse;
                fromJSON(object: any): _108.QueryModuleVersionsResponse;
                toJSON(message: _108.QueryModuleVersionsResponse): unknown;
                fromPartial<I_15 extends {
                    moduleVersions?: {
                        name?: string;
                        version?: any;
                    }[];
                } & {
                    moduleVersions?: {
                        name?: string;
                        version?: any;
                    }[] & ({
                        name?: string;
                        version?: any;
                    } & {
                        name?: string;
                        version?: any;
                    } & Record<Exclude<keyof I_15["moduleVersions"][number], keyof _110.ModuleVersion>, never>)[] & Record<Exclude<keyof I_15["moduleVersions"], keyof {
                        name?: string;
                        version?: any;
                    }[]>, never>;
                } & Record<Exclude<keyof I_15, "moduleVersions">, never>>(object: I_15): _108.QueryModuleVersionsResponse;
            };
            QueryAuthorityRequest: {
                encode(_: _108.QueryAuthorityRequest, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.QueryAuthorityRequest;
                fromJSON(_: any): _108.QueryAuthorityRequest;
                toJSON(_: _108.QueryAuthorityRequest): unknown;
                fromPartial<I_16 extends {} & {} & Record<Exclude<keyof I_16, never>, never>>(_: I_16): _108.QueryAuthorityRequest;
            };
            QueryAuthorityResponse: {
                encode(message: _108.QueryAuthorityResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _108.QueryAuthorityResponse;
                fromJSON(object: any): _108.QueryAuthorityResponse;
                toJSON(message: _108.QueryAuthorityResponse): unknown;
                fromPartial<I_17 extends {
                    address?: string;
                } & {
                    address?: string;
                } & Record<Exclude<keyof I_17, "address">, never>>(object: I_17): _108.QueryAuthorityResponse;
            };
        };
    }
    namespace vesting {
        const v1beta1: {
            registry: readonly [string, import("@cosmjs/proto-signing").GeneratedType][];
            load: (protoRegistry: import("@cosmjs/proto-signing").Registry) => void;
            MessageComposer: {
                encoded: {
                    createVestingAccount(value: _111.MsgCreateVestingAccount): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    createPermanentLockedAccount(value: _111.MsgCreatePermanentLockedAccount): {
                        type_url: string;
                        value: Uint8Array;
                    };
                    createPeriodicVestingAccount(value: _111.MsgCreatePeriodicVestingAccount): {
                        type_url: string;
                        value: Uint8Array;
                    };
                };
                withTypeUrl: {
                    createVestingAccount(value: _111.MsgCreateVestingAccount): {
                        typeUrl: string;
                        value: _111.MsgCreateVestingAccount;
                    };
                    createPermanentLockedAccount(value: _111.MsgCreatePermanentLockedAccount): {
                        typeUrl: string;
                        value: _111.MsgCreatePermanentLockedAccount;
                    };
                    createPeriodicVestingAccount(value: _111.MsgCreatePeriodicVestingAccount): {
                        typeUrl: string;
                        value: _111.MsgCreatePeriodicVestingAccount;
                    };
                };
                toJSON: {
                    createVestingAccount(value: _111.MsgCreateVestingAccount): {
                        typeUrl: string;
                        value: unknown;
                    };
                    createPermanentLockedAccount(value: _111.MsgCreatePermanentLockedAccount): {
                        typeUrl: string;
                        value: unknown;
                    };
                    createPeriodicVestingAccount(value: _111.MsgCreatePeriodicVestingAccount): {
                        typeUrl: string;
                        value: unknown;
                    };
                };
                fromJSON: {
                    createVestingAccount(value: any): {
                        typeUrl: string;
                        value: _111.MsgCreateVestingAccount;
                    };
                    createPermanentLockedAccount(value: any): {
                        typeUrl: string;
                        value: _111.MsgCreatePermanentLockedAccount;
                    };
                    createPeriodicVestingAccount(value: any): {
                        typeUrl: string;
                        value: _111.MsgCreatePeriodicVestingAccount;
                    };
                };
                fromPartial: {
                    createVestingAccount(value: _111.MsgCreateVestingAccount): {
                        typeUrl: string;
                        value: _111.MsgCreateVestingAccount;
                    };
                    createPermanentLockedAccount(value: _111.MsgCreatePermanentLockedAccount): {
                        typeUrl: string;
                        value: _111.MsgCreatePermanentLockedAccount;
                    };
                    createPeriodicVestingAccount(value: _111.MsgCreatePeriodicVestingAccount): {
                        typeUrl: string;
                        value: _111.MsgCreatePeriodicVestingAccount;
                    };
                };
            };
            AminoConverter: {
                "/cosmos.vesting.v1beta1.MsgCreateVestingAccount": {
                    aminoType: string;
                    toAmino: ({ fromAddress, toAddress, amount, endTime, delayed }: _111.MsgCreateVestingAccount) => {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        end_time: string;
                        delayed: boolean;
                    };
                    fromAmino: ({ from_address, to_address, amount, end_time, delayed }: {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                        end_time: string;
                        delayed: boolean;
                    }) => _111.MsgCreateVestingAccount;
                };
                "/cosmos.vesting.v1beta1.MsgCreatePermanentLockedAccount": {
                    aminoType: string;
                    toAmino: ({ fromAddress, toAddress, amount }: _111.MsgCreatePermanentLockedAccount) => {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    };
                    fromAmino: ({ from_address, to_address, amount }: {
                        from_address: string;
                        to_address: string;
                        amount: {
                            denom: string;
                            amount: string;
                        }[];
                    }) => _111.MsgCreatePermanentLockedAccount;
                };
                "/cosmos.vesting.v1beta1.MsgCreatePeriodicVestingAccount": {
                    aminoType: string;
                    toAmino: ({ fromAddress, toAddress, startTime, vestingPeriods }: _111.MsgCreatePeriodicVestingAccount) => {
                        from_address: string;
                        to_address: string;
                        start_time: string;
                        vesting_periods: {
                            length: string;
                            amount: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                    };
                    fromAmino: ({ from_address, to_address, start_time, vesting_periods }: {
                        from_address: string;
                        to_address: string;
                        start_time: string;
                        vesting_periods: {
                            length: string;
                            amount: {
                                denom: string;
                                amount: string;
                            }[];
                        }[];
                    }) => _111.MsgCreatePeriodicVestingAccount;
                };
            };
            BaseVestingAccount: {
                encode(message: _112.BaseVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _112.BaseVestingAccount;
                fromJSON(object: any): _112.BaseVestingAccount;
                toJSON(message: _112.BaseVestingAccount): unknown;
                fromPartial<I extends {
                    baseAccount?: {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        accountNumber?: any;
                        sequence?: any;
                    };
                    originalVesting?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    delegatedFree?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    delegatedVesting?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    endTime?: any;
                } & {
                    baseAccount?: {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        };
                        accountNumber?: any;
                        sequence?: any;
                    } & {
                        address?: string;
                        pubKey?: {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & {
                            typeUrl?: string;
                            value?: Uint8Array;
                        } & Record<Exclude<keyof I["baseAccount"]["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                        accountNumber?: any;
                        sequence?: any;
                    } & Record<Exclude<keyof I["baseAccount"], keyof _24.BaseAccount>, never>;
                    originalVesting?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["originalVesting"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I["originalVesting"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    delegatedFree?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["delegatedFree"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I["delegatedFree"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    delegatedVesting?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I["delegatedVesting"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I["delegatedVesting"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    endTime?: any;
                } & Record<Exclude<keyof I, keyof _112.BaseVestingAccount>, never>>(object: I): _112.BaseVestingAccount;
            };
            ContinuousVestingAccount: {
                encode(message: _112.ContinuousVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _112.ContinuousVestingAccount;
                fromJSON(object: any): _112.ContinuousVestingAccount;
                toJSON(message: _112.ContinuousVestingAccount): unknown;
                fromPartial<I_1 extends {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: any;
                    };
                    startTime?: any;
                } & {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: any;
                    } & {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        } & {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_1["baseVestingAccount"]["baseAccount"]["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                            accountNumber?: any;
                            sequence?: any;
                        } & Record<Exclude<keyof I_1["baseVestingAccount"]["baseAccount"], keyof _24.BaseAccount>, never>;
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_1["baseVestingAccount"]["originalVesting"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_1["baseVestingAccount"]["originalVesting"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_1["baseVestingAccount"]["delegatedFree"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_1["baseVestingAccount"]["delegatedFree"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_1["baseVestingAccount"]["delegatedVesting"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_1["baseVestingAccount"]["delegatedVesting"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        endTime?: any;
                    } & Record<Exclude<keyof I_1["baseVestingAccount"], keyof _112.BaseVestingAccount>, never>;
                    startTime?: any;
                } & Record<Exclude<keyof I_1, keyof _112.ContinuousVestingAccount>, never>>(object: I_1): _112.ContinuousVestingAccount;
            };
            DelayedVestingAccount: {
                encode(message: _112.DelayedVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _112.DelayedVestingAccount;
                fromJSON(object: any): _112.DelayedVestingAccount;
                toJSON(message: _112.DelayedVestingAccount): unknown;
                fromPartial<I_2 extends {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: any;
                    };
                } & {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: any;
                    } & {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        } & {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_2["baseVestingAccount"]["baseAccount"]["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                            accountNumber?: any;
                            sequence?: any;
                        } & Record<Exclude<keyof I_2["baseVestingAccount"]["baseAccount"], keyof _24.BaseAccount>, never>;
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_2["baseVestingAccount"]["originalVesting"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_2["baseVestingAccount"]["originalVesting"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_2["baseVestingAccount"]["delegatedFree"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_2["baseVestingAccount"]["delegatedFree"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_2["baseVestingAccount"]["delegatedVesting"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_2["baseVestingAccount"]["delegatedVesting"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        endTime?: any;
                    } & Record<Exclude<keyof I_2["baseVestingAccount"], keyof _112.BaseVestingAccount>, never>;
                } & Record<Exclude<keyof I_2, "baseVestingAccount">, never>>(object: I_2): _112.DelayedVestingAccount;
            };
            Period: {
                encode(message: _112.Period, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _112.Period;
                fromJSON(object: any): _112.Period;
                toJSON(message: _112.Period): unknown;
                fromPartial<I_3 extends {
                    length?: any;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    length?: any;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_3["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_3["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_3, keyof _112.Period>, never>>(object: I_3): _112.Period;
            };
            PeriodicVestingAccount: {
                encode(message: _112.PeriodicVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _112.PeriodicVestingAccount;
                fromJSON(object: any): _112.PeriodicVestingAccount;
                toJSON(message: _112.PeriodicVestingAccount): unknown;
                fromPartial<I_4 extends {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: any;
                    };
                    startTime?: any;
                    vestingPeriods?: {
                        length?: any;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                } & {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: any;
                    } & {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        } & {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_4["baseVestingAccount"]["baseAccount"]["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                            accountNumber?: any;
                            sequence?: any;
                        } & Record<Exclude<keyof I_4["baseVestingAccount"]["baseAccount"], keyof _24.BaseAccount>, never>;
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_4["baseVestingAccount"]["originalVesting"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_4["baseVestingAccount"]["originalVesting"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_4["baseVestingAccount"]["delegatedFree"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_4["baseVestingAccount"]["delegatedFree"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_4["baseVestingAccount"]["delegatedVesting"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_4["baseVestingAccount"]["delegatedVesting"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        endTime?: any;
                    } & Record<Exclude<keyof I_4["baseVestingAccount"], keyof _112.BaseVestingAccount>, never>;
                    startTime?: any;
                    vestingPeriods?: {
                        length?: any;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        length?: any;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        length?: any;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_4["vestingPeriods"][number]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_4["vestingPeriods"][number]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_4["vestingPeriods"][number], keyof _112.Period>, never>)[] & Record<Exclude<keyof I_4["vestingPeriods"], keyof {
                        length?: any;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                } & Record<Exclude<keyof I_4, keyof _112.PeriodicVestingAccount>, never>>(object: I_4): _112.PeriodicVestingAccount;
            };
            PermanentLockedAccount: {
                encode(message: _112.PermanentLockedAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _112.PermanentLockedAccount;
                fromJSON(object: any): _112.PermanentLockedAccount;
                toJSON(message: _112.PermanentLockedAccount): unknown;
                fromPartial<I_5 extends {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: any;
                    };
                } & {
                    baseVestingAccount?: {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        };
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[];
                        endTime?: any;
                    } & {
                        baseAccount?: {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            };
                            accountNumber?: any;
                            sequence?: any;
                        } & {
                            address?: string;
                            pubKey?: {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & {
                                typeUrl?: string;
                                value?: Uint8Array;
                            } & Record<Exclude<keyof I_5["baseVestingAccount"]["baseAccount"]["pubKey"], keyof import("../google/protobuf/any").Any>, never>;
                            accountNumber?: any;
                            sequence?: any;
                        } & Record<Exclude<keyof I_5["baseVestingAccount"]["baseAccount"], keyof _24.BaseAccount>, never>;
                        originalVesting?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_5["baseVestingAccount"]["originalVesting"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_5["baseVestingAccount"]["originalVesting"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        delegatedFree?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_5["baseVestingAccount"]["delegatedFree"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_5["baseVestingAccount"]["delegatedFree"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        delegatedVesting?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_5["baseVestingAccount"]["delegatedVesting"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_5["baseVestingAccount"]["delegatedVesting"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                        endTime?: any;
                    } & Record<Exclude<keyof I_5["baseVestingAccount"], keyof _112.BaseVestingAccount>, never>;
                } & Record<Exclude<keyof I_5, "baseVestingAccount">, never>>(object: I_5): _112.PermanentLockedAccount;
            };
            MsgCreateVestingAccount: {
                encode(message: _111.MsgCreateVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _111.MsgCreateVestingAccount;
                fromJSON(object: any): _111.MsgCreateVestingAccount;
                toJSON(message: _111.MsgCreateVestingAccount): unknown;
                fromPartial<I_6 extends {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                    endTime?: any;
                    delayed?: boolean;
                } & {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_6["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_6["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                    endTime?: any;
                    delayed?: boolean;
                } & Record<Exclude<keyof I_6, keyof _111.MsgCreateVestingAccount>, never>>(object: I_6): _111.MsgCreateVestingAccount;
            };
            MsgCreateVestingAccountResponse: {
                encode(_: _111.MsgCreateVestingAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _111.MsgCreateVestingAccountResponse;
                fromJSON(_: any): _111.MsgCreateVestingAccountResponse;
                toJSON(_: _111.MsgCreateVestingAccountResponse): unknown;
                fromPartial<I_7 extends {} & {} & Record<Exclude<keyof I_7, never>, never>>(_: I_7): _111.MsgCreateVestingAccountResponse;
            };
            MsgCreatePermanentLockedAccount: {
                encode(message: _111.MsgCreatePermanentLockedAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _111.MsgCreatePermanentLockedAccount;
                fromJSON(object: any): _111.MsgCreatePermanentLockedAccount;
                toJSON(message: _111.MsgCreatePermanentLockedAccount): unknown;
                fromPartial<I_8 extends {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[];
                } & {
                    fromAddress?: string;
                    toAddress?: string;
                    amount?: {
                        denom?: string;
                        amount?: string;
                    }[] & ({
                        denom?: string;
                        amount?: string;
                    } & {
                        denom?: string;
                        amount?: string;
                    } & Record<Exclude<keyof I_8["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_8["amount"], keyof {
                        denom?: string;
                        amount?: string;
                    }[]>, never>;
                } & Record<Exclude<keyof I_8, keyof _111.MsgCreatePermanentLockedAccount>, never>>(object: I_8): _111.MsgCreatePermanentLockedAccount;
            };
            MsgCreatePermanentLockedAccountResponse: {
                encode(_: _111.MsgCreatePermanentLockedAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _111.MsgCreatePermanentLockedAccountResponse;
                fromJSON(_: any): _111.MsgCreatePermanentLockedAccountResponse;
                toJSON(_: _111.MsgCreatePermanentLockedAccountResponse): unknown;
                fromPartial<I_9 extends {} & {} & Record<Exclude<keyof I_9, never>, never>>(_: I_9): _111.MsgCreatePermanentLockedAccountResponse;
            };
            MsgCreatePeriodicVestingAccount: {
                encode(message: _111.MsgCreatePeriodicVestingAccount, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _111.MsgCreatePeriodicVestingAccount;
                fromJSON(object: any): _111.MsgCreatePeriodicVestingAccount;
                toJSON(message: _111.MsgCreatePeriodicVestingAccount): unknown;
                fromPartial<I_10 extends {
                    fromAddress?: string;
                    toAddress?: string;
                    startTime?: any;
                    vestingPeriods?: {
                        length?: any;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[];
                } & {
                    fromAddress?: string;
                    toAddress?: string;
                    startTime?: any;
                    vestingPeriods?: {
                        length?: any;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[] & ({
                        length?: any;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    } & {
                        length?: any;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[] & ({
                            denom?: string;
                            amount?: string;
                        } & {
                            denom?: string;
                            amount?: string;
                        } & Record<Exclude<keyof I_10["vestingPeriods"][number]["amount"][number], keyof _46.Coin>, never>)[] & Record<Exclude<keyof I_10["vestingPeriods"][number]["amount"], keyof {
                            denom?: string;
                            amount?: string;
                        }[]>, never>;
                    } & Record<Exclude<keyof I_10["vestingPeriods"][number], keyof _112.Period>, never>)[] & Record<Exclude<keyof I_10["vestingPeriods"], keyof {
                        length?: any;
                        amount?: {
                            denom?: string;
                            amount?: string;
                        }[];
                    }[]>, never>;
                } & Record<Exclude<keyof I_10, keyof _111.MsgCreatePeriodicVestingAccount>, never>>(object: I_10): _111.MsgCreatePeriodicVestingAccount;
            };
            MsgCreatePeriodicVestingAccountResponse: {
                encode(_: _111.MsgCreatePeriodicVestingAccountResponse, writer?: import("protobufjs").Writer): import("protobufjs").Writer;
                decode(input: Uint8Array | import("protobufjs").Reader, length?: number): _111.MsgCreatePeriodicVestingAccountResponse;
                fromJSON(_: any): _111.MsgCreatePeriodicVestingAccountResponse;
                toJSON(_: _111.MsgCreatePeriodicVestingAccountResponse): unknown;
                fromPartial<I_11 extends {} & {} & Record<Exclude<keyof I_11, never>, never>>(_: I_11): _111.MsgCreatePeriodicVestingAccountResponse;
            };
        };
    }
}
